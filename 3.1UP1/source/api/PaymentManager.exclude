#PaymentManager

This is the primary object to access the payment feature.

**Example Usage:**

    :::java
    EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);
   
  	//After EMDK opened
  	paymentManager = (PaymentManager)this.emdkManager.getInstance(FEATURE_TYPE.PAYMENT);

  	PaymentDevice paymentDevice = paymentManager.getDevice(DeviceIdentifer.DEFAULT);
  	InterfaceConfig interfaceConfig = paymentDevice.getInterfaceConfig(); *  
  	interfaceConfig.deviceName = "MPOS-61781234";
  	paymentDevice.setInterfaceConfig(interfaceConfig);
  	paymentDevice.addDataListener(this);
  	paymentDevice.enable();
  
  	paymentDevice.readCardData();
  
  	paymentDevice.disable();
  
  	EMDKManager.release(FEATURE_TYPE.PAYMENT);

**Version:**

1.0


##Public Methods
###getSupportedDevicesInfo()
Returns list of supported payment devices information.

**Returns:**

java.util.ArrayList<[DeviceInfo](DeviceInfo)> - Returns list of payment devices information.

###getDevice(PaymentManager.DeviceIdentifier deviceIdentifier)
This method returns the PaymentDevice object based on device identifier specified. The PaymentDevice object created will be singleton object for that application instance for a specific type of payment device.

**Parameters:**

**deviceIdentifier** - The device identifier specifies which payment device the application wants.

**Returns:**

[PaymentDevice](PaymentDevice) object if the device identifier specified is valid on the device. Otherwise null is returned.

###getDevice(DeviceInfo deviceInfo)
This method returns the PaymentDevice object if the Device info specified is valid and Device info object can obtain from the PaymentManager.getSupportedDevicesInfo(). The PaymentDevice object created will be singleton object for a specific payment device.

**Parameters:**

**deviceInfo** - provides information on DeviceInfo class.

**Returns:**

[PaymentDevice](PaymentDevice) object if the deviceInfo specified is valid on the device. Otherwise null is returned.

###getDevice(java.lang.String deviceName, boolean isMacAddress)
The getDevice method gets payment object which can be used to enable and communicate with payment device. The getDevice method is a overload method which will access different values and returns the payment object for the device requested.

**Parameters:**

**deviceName** - provides information like device name or mac address of the devices.

**isMacAddress** - decides if device name is mac address or the name of the device.

**Returns:**
[PaymentDevice](PaymentDevice) object if the PaymentDevice specified. Otherwise null is returned.

###getPairedDevicesInfo(DeviceInfo.DeviceType deviceType) throws PaymentException
This method gets the list of payment devices paired with Mobile Device based on the deviceType. The Device can be PD40, MPM (in the Future). The device info provides the information like deviceâ€™s mac address, friendly name, isConnected, connection type, other info.

**Parameters:**

deviceType

**Returns:**

java.util.ArrayList<[DeviceInfo](DeviceInfo)> - Returns list of DeviceInfo objects.

**Throws:**

[PaymentException](PaymentException)



##Public Enums
###PaymentManager.ConnectionState
Connection states of a payment device.

**Values:**

**CONNECTED** - Indicates that a payment device was connected.

**DISCONNECTED** - Indicates that a payment device was disconnected.


###PaymentManager.DeviceIdentifier
Defines specific payment devices of each type.

**Values:**

**DEFAULT** - Default available payment device

**PD40** - PD40 payment device


###PaymentResults
Defines all the error codes the payment API returns.

**Values:**

**SUCCESS**

Success.

**INVALID_VALUE**

The parameter value is not correct.

**AUTHORIZATION_FAILED**

Application authorization failed.

**FAILURE**

Operation is failed.

**TIMED_OUT**

Operation is timed out.

**AUTHENTICATION_FAILED**

Payment device authentication failed.

**ENABLE_FAILED**

Failed to enable the payment device.

**DISABLE_FAILED**

Failed to disable the payment device.

**ALREADY_ENABLED**

Payment device is already enabled and its ready to use.

**OPERATION_CANCELLED**

The operation is canceled by the user.

**OK_KEY_PRESSED**

OK or Enter key is pressed by the user.

**CANCEL_KEY_PRESSED**

Cancel key is pressed by the user.

**LOW_POWER_OPERATION_CANCELLED**

The payment device is low power and operation is canceled.

**TLV_DATA_ERROR**

Tag-Length-Value data format error.

**MAC_KEY_CREATE_ERROR**

Error occurred during mac key creation.

**MAC_BLOCK_CREATE_ERROR**

Error occurred during mac block creation.

**MAC_VALIDATION_ERROR**

Mac validation failed.

**INVALID_MAC_KEY_LENGTH**

Invalid MAC key length.

**INVALID_DATA_LENGTH**

Invalid data length

**INVALID_PIN_LENGTH**

Invalid maximum and minimum PIN length

**ALREADY_CLOSED**

The device is already closed.

**CHIP_READ_ERROR**

Error occurred while reading chip or IC.

**CARD_BLOCKED**

The card is blocked.

**CHIP_READ_NO_APP_ERROR**

No app to read the chip on this card.

**CARD_INSERTION_ERROR**

The card insertion error.

**DEVICE_NOT_PAIRED**

The payment device is not paired.

**DEVICE_NOT_ENABLED**

The payment device is not enabled.

**INVALID_CONFIGURATION**

The payment device configuration is not correct.

**COMMUNICATION_ERROR**

Communication error occurred.

**FEATURE_NOT_SUPPORTED**

The feature is not supported.

**INVALID_OBJECT**

The object is invalid.

**NO_DATA_LISTENER**

Data listener is not added.

**PREVIOUS_COMMAND_PENDING**

Previously requested command is in progress, wait for it to complete.

**CARD_SWIPE_ERROR**

Error occurred while swiping the card.

**EMV_APP_NOT_SELECTED**

Must set the EMV App before calling this method.

**EMV_APP_ADD_ERROR**

Failed to add the EMV APP/EMV CAPK.

**EMV_TRANSACTION_DENIED**

EMV transaction is denied.

**CARD_EXPIRED**

The card is expired.

**APP_EXPIRED**

The Card App is expired.

**CARD_NOT_AUTHORIZED**

The card is not authorized. Try calling authorizeCard before completeOnlineEMV.

**DEVICE_IN_USE**

Payment device is already used by other application. Close the previous session before using it or set the forceEnable to true in the payment configuration to forcibly close the previous session.

**CONNECTION_ERROR**

Bluetooth connection error. Try calling enable..

**NULL_POINTER**

Null value is passed as input parameter.

**CARD_REMOVED**

Card removed while payment device was reading the card data.

**EMV_TRANSACTION_ERROR**

EMV transaction error or not expected.

**CARD_AUTHENTICATION_FAILED**

Card data authentication failed.

**GET_ONLINE_PIN_FAILED**

Get Online PIN failed.

**GAC_CARD_LOOPBACK**

GAC (Generation Authentication Code) card loopback 6985. The application to must decide whether fallback or not.

**GAC_RESPONSE_ERROR**

GAC (Generation Authentication Code) response error.

**NO_DUKPT_KEY**

No DUKPT key to get PIN

**EMV_CAPK_ADD_ERROR**

Add EMV CAPK failed

**ACCOUNT_NUMBER_MISMATCH**

The account does not match account number of card used.

**DISABLED**

New state when PD40 disconnects or goes out of range

**CANNOT_ABORT**

Abort does not support aborting the previously requested command

**REMOVECARD_COMMAND_PENDING**

RemoveCard is pending, Please remove the card to perform other requests.

**UNDEFINED**

Error code not defined.