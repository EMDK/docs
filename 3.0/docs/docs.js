var docs = [{"key":"api-BarcodeManager-ScannerConnectionListener-ConnectionStatus","name":"BarcodeManager.ScannerConnectionListener.ConnectionStatus","md":"#BarcodeManager.ScannerConnectionListener.ConnectionStatus\n\nThe ConnectionStatus class provides the information about status of scanner connection changes.\n\n##Constructors\n\n###ConnectionStatus()\n\n##Public Methods\n###getConnectionState()\nReturns the device connection state of pluggable scanner.\n\n**Returns:**\n\ncom.symbol.emdk.barcode.BarcodeManager.ConnectionState - Returns the connection state.\n\n###getFriendlyName()\nReturns the friendly name of scanner for which the data is returned.\n\n**Returns:**\n\njava.lang.String - Returns friendly name of the pluggable scanner."},{"key":"api-BarcodeManager-ScannerConnectionListener","name":"BarcodeManager.ScannerConnectionListener","md":"#BarcodeManager.ScannerConnectionListener\n\nAn interface for notifying client applications when the external scanner is connected or disconnected to the mobile device.\n\n**Example Usage:**\n\n\t:::java\n\tpublic class MainActivity extends Activity implements ScannerConnectionListener\n    {\n       .. .. .. \n    } \n\n\n**Version:**\n\n3.0\n\n##Public Methods\n###onConnectionChange(BarcodeManager.ScannerConnectionListener.ConnectionStatus connectionStatus)\nCalled to notify the client when the scanner device has been connected or disconnected to the mobile device.\n\n**Parameters:**\n\n**connectionStatus** - The Scanner connection status object.\n\n**Returns:**\n\nvoid\n\n"},{"key":"api-BarcodeManager","name":"BarcodeManager","md":"#BarcodeManager\n\nThis is the primary object to access the barcode scanning feature.\n\n**Example Usage:**\n\n    :::java\n    public class MainActivity extends Activity implements EMDKListener, StatusListener, DataListener, ScannerConnectionListener {\n    \n      Override:\n      protected void onCreate(Bundle savedInstanceState) { \n      //.. \n      EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this); \n      }\n\n      Override:\n      public void onOpened(EMDKManager emdkManager) { \n      this.emdkManager = emdkManager; \n      } \n\n       //... \n       barcodeManager = (BarcodeManager)this.emdkManager.getInstance(FEATURE_TYPE.BARCODE); \n       //... \n       Scanner scanner = barcodeManager.getDevice(DeviceIdentifier.DEFAULT); \n       scanner.enable(); \n       scanner.addDataListener(callbackObj); scanner.addStatusListener(callbackObj); \n       scanner.read(); \n       //... \n       scanner.cancelRead(); \n       //... \n       scanner.disable(); \n       //.. \n       EMDKManager.release(FEATURE_TYPE.BARCODE);  \n    } \n\n\n**Version:**\n\n3.0\n\n##Public Methods\n###getDevice(ScannerInfo scannerInfo)\nThis method returns the scanner object if the scanner info specified is valid and scanner info object can obtain from the BarcoderManager.getSupportedDevices(). The scanner object created will be singleton object for a specific scanner.\n\n**Parameters:**\n\n**scannerInfo** - friendlyName The scanner friendly name.\n\n**Returns:**\n\ncom.symbol.emdk.barcode.Scanner - Returns the scanner object if scanner friendly name is valid. Otherwise null is returned.\n\n###getDevice(BarcodeManager.DeviceIdentifier deviceIdentifier)\nThis method returns the scanner object based on device identifier specified. The scanner object created will be signleton object for a specific scanner.\n\n**Parameters:**\n\n**deviceIdentifier** - The device identifier specifies which scanner the application wants.\n\n**Returns:**\n\ncom.symbol.emdk.barcode.Scanner - [Scanner](#api-Scanner) object if the device identifier specified is valid on the device. Otherwise null is returned.\n\n###getSupportedDevicesInfo()\nReturns list of supported scanner devices information.\n\n**Returns:**\n\njava.util.List&lt;com.symbol.emdk.barcode.ScannerInfo&gt; - Returns list of supported scanner devices information.\n\n###getDescription()\nReturns the description for the error.\n\n**Returns:**\njava.lang.String - Returns error description as String.\n\n##Public Enums\n###BarcodeManager.ConnectionState\nConnection states of a scanner device.\n\n**Values:**\n\n**CONNECTED** - Indicates that a pluggable scanner was connected.\n\n**DISCONNECTED** - Indicates that a pluggable scanner was removed and no longer avail for scanning.\n\n###BarcodeManager.DeviceIdentifier\nDefines specific scanner devices of each type.\n\n**Values:**\n\n**DEFAULT**\n\n**INTERNAL_CAMERA1**\n\n**INTERNAL_IMAGER1**\n\n**INTERNAL_LASER1**\n\n**BLUETOOTH_IMAGER1**\n\n###BarcodeManager.ScannerResults\nDefines all the error codes the barcode scanning API returns. \n\n**Values:**\n\n**SUCCESS** - Success.\n\n**FAILURE** - Failure.\n\n**ALREADY_SCANNING** - Scanning in progress.\n\n**SCANNER_IN_USE** - Cannot enable scanner and is already in use.\n\n**VF_ERROR** - View finder error.\n\n**INVALID_VALUE** - The value is invalid.\n\n**SCAN_PARAM_NOT_SUPPORTED** - Particular parameter not supported.\n\n**SCAN_DATA_FAILURE** - Unexpected scan data\n\n**SCAN_PARAM_READ_ONLY** - Read only parameters.\n\n**LENGTH_MISMATCH** - Decoded barcode does not meet length requirements.\n\n**SCANNER_OPERATION_FAILURE** - Scanner operation failed.\n\n**FEATURE_NOT_SUPPORTED** - The feature is not supported.\n\n**SCANNER_NOT_SUPPORTED** - Scanner not supported.\n\n**SCANNER_NOT_ENABLED** - The scanner device is not enabled.\n\n**SCANNER_TIMED_OUT** - The timer out error occurred.\n\n**INVALID_OBJECT** - The object is not valid.\n\n**NO_DATA_LISTENER** - Scan read is issued without adding the data listener.\n\n**TRIGGER_KEY_REG_FAILED** - Failed to register for the hard trigger key notification.\n\n**TRIGGER_KEY_IN_USE** - Trigger key is already used by other user.\n\n**TRIGGER_KEY_UNREG_FAILED** - Failed to unRegister for the hard trigger key notification.\n\n**SCANNER_INIT_FAILURE** - Scanner initialization failed.\n\n**SCANNER_DEINIT_FAILURE** - Scanner de-initialization failed.\n\n**UNDEFINED** - Error code not defined.\n\n**Version:**\n\n3.0"},{"key":"api-Collection-ScanData","name":"Collection.ScanData","md":"#Collection.ScanData\n\nThe ScanData object gives information on the barcode data scanned. \n\n**Example Usage:**\n\n\t:::java\n\tArrayList<ScanData> scanDataList = scanDataCollection.getScanData();\n     for(ScanData scanData :scanDataList) { \n      String data = scanData.getData(); \n      LABEL_TYPE labelType = scanData.getLabelType(); \n      String timeStamp = scanData.getTimeStamp(); \n     }\n\n**Version:**\n\n3.0\n\n##Public Methods\n###getData()\nReturns the scanned barcode data.\n\n**Returns:**\n\njava.lang.String - Returns barcode data\n\n###getLabelType()\nReturns label type of the scanned data.\n\n**Returns:**\n\ncom.symbol.emdk.barcode.ScanDataCollection.LabelType - Returns LabelType\n\n###getTimeStamp()\nReturns the time at which the barcode was scanned. The time format is \"yyyy-MM-dd HH:mm:ss.nnnnnnnnn\"\n\n**Returns:**\n\njava.lang.String - Returns time stamp string\n"},{"key":"api-EMDKBase","name":"EMDKBase","md":"#EMDKBase\nThis is the base class for all the EMDK manager classes derived from.\n\n**Version:**\n\n3.0\n"},{"key":"api-EMDKManager-EMDKListener","name":"EMDKManager.EMDKListener","md":"#EMDKManager.EMDKListener\nThis is the interface for the callback to notify the opening and closing status of the EMDK. On a successful opening, the EMDKManager object will be returned. An interface for notifying clients when they the EMDKManager is ready to use or closed abruptly.\n\n**Example Usage:**\n\n\t:::java\n\tpublic class MainActivity extends Activity implements EMDKListener\n\n\t.. .. ..\n\n\tEMDKManager.getEMDKManager(getApplicationContext(), emdkListener);\n\n\n**Version:**\n\n2.0\n\n##Public Methods\n###onClosed()\nCalled to notify the client that this EMDKManager object has been abruptly closed. The clients must call to call [EMDKManager.release()](#api-EMDKManager?release()) to free all the resources used by EMDKManager even after onClosed(). Notifies user upon a abrupt closing of EMDKManager.\n\n**Example Usage:**\n\n\t:::java\n\t@Override\n\tpublic void onClosed()\n\t{\n\n\t}\n\n\n**Returns:**\n\nvoid\n\n###onOpened(EMDKManager emdkManager)\nCalled to notify the client when the EMDKManager object has been opened and its ready to use.\n\n**Example Usage:**\n\n\t:::java\n\t@Override\n\tpublic void onOpened(EMDKManager emdkManager)\n\t{\n\n\t}\n\n\n**Parameters:**\n\n**emdkManager**\n\n**Returns:**\n\nvoid\n"},{"key":"api-EMDKManager","name":"EMDKManager","md":"#EMDKManager\n\nThe EMDKManager class is the key class in Android EMDK. This class provides access to different classes for the supported features. Clients should call EMDKManager.getEMDKManager(Context, EMDKManager.EMDKListener), to get the EMDKManager object. Each application implements EMDKListener interface. The EMDKManager object will be returned on successful opening through the EMDKListener callback.\n\n**Example Usage:**\n\n\t:::java\n\tEMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), emdkListener);\n\n\n**Version:**\n\n3.0\n\n##Public Methods\n###getEMDKManager(Context context, EMDKManager.EMDKListener emdkListener)\nThis is static method and it is the key function to get the EMDKManager object. Clients must implement [EMDKManager.EMDKListener](#api-EMDKManager-EMDKListener) to get notified of the EMDK manager status and to get the EMDKManager object.\n\n**Example Usage:**\n\n\t:::java\n\tEMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), emdkListener);\n\n\n**Parameters:**\n\n**context** - The application context should be provided by the user.\n**emdkListener** - The EMDK Listener for listener callbacks.\n\n**Returns:**\ncom.symbol.emdk.EMDKResults - [EMDKResults](#api-EMDKResults) object.\n\n###getInstance(EMDKManager.FEATURE_TYPE featureType)\nThis method returns an object instance which has derived from [EMDKBase](#api-EMDKBase). Based on the type given, the object needs to be type-casted before used. Calling this method [EMDKManager.getInstance(FEATURE_TYPE)](#api-EMDKManager?getInstance(EMDKManager.FEATURE_TYPE featureType)) before EMDKManager opened will return null.\n\n**Example Usage:**\n\n\t:::java\n\t@Override\n\tpublic void onOpened(EMDKManager emdkmanager)\n\t{\n\tProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);\n\tVersionManager versionManager = (VersionManager)emdkmanager.getInstance(FEATURE_TYPE.VERSION);\n\tBarcodeManager barcodeManager = (BarcodeManager)emdkmanager.getInstance(FEATURE_TYPE.BARCODE); \n\t}\n\n\n**Parameters:**\n\n**featureType** - The [EMDKManager.FEATURE_TYPE](#api-EMDKManager?FEATURE_TYPE) the object to be created.\n\n**Returns:**\n\ncom.symbol.emdk.EMDKBase - Object derived from [EMDKBase](#api-EMDKBase) to be type-casted to the appropriate type. Currently [ProfileManager](#api-ProfileManager), [VersionManager](#api-VersionManager) and [BarcodeManager](#api-BarcodeManager) are returned based on the [EMDKManager.FEATURE_TYPE](#api-EMDKManager?FEATURE_TYPE) given in.\n\n###release()\nThis method releases all the resources constructed by EMDKManager. EMDKManager can't be used after this call. The clients should call this method only before exiting the application.\n\n**Example Usage:**\n\n\t:::java\n\temdkManager.release();\n\n\n**Returns:**\n\nvoid\n\n###release(EMDKManager.FEATURE_TYPE featureType)\nThis method releases resources of a given manager type. Instance variable is not required as multiple instances are not allowed by design.\n\n**Example Usage:**\n\n\t:::java\n\temdkManager.release(EMDKManager.FEATURE_TYPE.PROFILE);\n\n\n**Parameters:**\n\n**featureType** - Type of [EMDKManager.FEATURE_TYPE](#api-EMDKManager?FEATURE_TYPE) to be released. Only the given feature related manager will be cleared if it has been constructed.\n\n**Returns:**\n\nvoid\n\n##Public Enums\n###FEATURE_TYPE\nThis lists all the features exposed by the EMDK.\n\n**Example Usage:**\n\n\t:::java\n\tFEATURE_TYPE.PROFILE\n\n\n**Values:**\n\n**PROFILE** - EMDK feature type profile\n\n**VERSION** - EMDK feature type version\n\n**BARCODE** - EMDK feature type for Barcode Scanning"},{"key":"api-EMDKResults","name":"EMDKResults","md":"#EMDKResults\nClass for holding EMDK result data.\n\n**Example Usage:**\n\n\t:::java\n\t@Override\n\tpublic void onOpened(EMDKManager emdkmanager)\n\t{\n\tProfileConfig profileConfigObj = new ProfileConfig();\n\tProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);\n\tEMDKResults results = profileManager.processProfile(\"Profile Name\", ProfileManager.PROFILE_FLAG.GET, profileConfigObj);\n\t}\n\n\n**Version:**\n\n2.0\n\n##Public Methods\n###getStatusDocument()\nGets status results from process profile as xml document.\n\n**Example Usage:**\n\n\t:::java\n\tDocument document = results.getStatusDocument();\n\n\n**Returns:**\n\norg.w3c.dom.Document - XML document.\n\n###getStatusString()\nGets status results from process profile as xml string.\n\n**Example Usage:**\n\n\t:::java\n\tString xml = results.getStatusString();\n\n\n**Returns:**\n\njava.lang.String - XML text.\n\n##Public Fields\n###statusCode\nGets status code result from process profile as enum value of type [EMDKResults.STATUS_CODE](#api-EMDKResults?STATUS_CODE)\t.\n\n**Example Usage:**\n\n\t:::java\n\tSTATUS_CODE statusCode = results.statusCode;\n\n\n**Type:**\n\ncom.symbol.emdk.[EMDKResults.STATUS_CODE](#api-EMDKResults?STATUS_CODE)\n\n##Public Enums\n###STATUS_CODE\nDefines all the status codes the library returns.\n\n**Example Usage:**\n\n\t:::java\n\tresults.statusCode.SUCCESS;\n\n\n**Values:**\n\n* **SUCCESS** - Process profile was a success.\n\n* **FAILURE** - Process profile was a failure.\n\n* **UNKNOWN** - Process profile had mixed results.\n\n* **NULL_POINTER** - Process profile had a null value.\n\n* **EMPTY_PROFILENAME** - Profile name passed Process profile was empty.\n\n* **EMDK_NOT_OPENED** - EMDK is not opened\n\n* **CHECK_XML** - MX Results can be found in the XML status\n document. Use [getStatusDocument](#api-EMDKResults?getStatusDocument()) to retrieve the XML document. This is returned when multiple features are present in the profile or the MX service returned an error."},{"key":"api-ProfileConfig-ActivitySelection-ActivityElement","name":"ProfileConfig.ActivitySelection.ActivityElement","md":"#ProfileConfig.ActivitySelection.ActivityElement\nGets and Sets application's package name and its activities to the profile [ProfileConfig.ActivitySelection.ActivityElement](#api-ProfileConfig-ActivitySelection-ActivityElement).\n\n**Example Usage:**\n\n\t:::java\n\tArrayList<ActivityElement> activities = profileConfig.activitySelection.activities;\n\n\n**Version:**\n\n2.0\n\n##Constructors\n\n###ProfileConfig.ActivitySelection.ActivityElement**(String packageName, java.lang.String[] activities)\n\n**Parameters:**\n\n* packageName\n* activities\n\n##Public Fields\n\n###packageName\n\n**Type:**\n\njava.lang.String\n\n"},{"key":"api-ProfileConfig-ActivitySelection","name":"ProfileConfig.ActivitySelection","md":"#ProfileConfig.ActivitySelection\nClass for dealing with ActivitySelection of profile data ProfileConfig.activitySelection()\n\n**Example Usage:**\n\n\t:::java\n\tActivitySelection activitySelection = profileConfig.activitySelection;\n\n\n**Version:**\n\n2.0\n\n##Constructors\n###ProfileConfig.ActivitySelection()\n\n##Public Fields\n###activities\nGets and Sets activities to the profile ProfileConfig.ActivitySelection.activities.\n\n**Example Usage:**\n\n\t:::java\n\tActivitySelection activitySelection = profileConfig.activitySelection\n\n\n**Type:**\n\njava.util.ArrayList&lt;com.symbol.emdk.ProfileConfig.ActivitySelection.ActivityElement&gt;\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-Codabar","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.Codabar","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.Codabar\nHolds Codabar configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tCodabar codabar = profileConfig.dataCapture.barcode.decoderParams.codabar;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###clsi_editing\nEnable this parameter to strip the start and stop characters and insert a space after the first, fifth, and tenth characters of a 14-character Codabar symbol. Enable this feature if the host system requires this data format (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcodabar.clsi_editing = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###length1\nUse to set decode lengths (default - 6).\n\n**Example Usage:**\n\n\t:::java\n\tint length1 = codabar.length1;\n\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths (default - 55).\n\n**Example Usage:**\n\n\t:::java\n\tint length2 = codabar.length2;\n\n\n**Type:**\n\nint\n\n###notis_editing\nEnable this parameter to strip the start and stop characters from a decoded Codabar symbol. Enable this feature if the host system requires this data format (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcodabar.notis_editing = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###redundancy\nSets the reader to read the bar code twice before accepting data (default - enabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcodabar.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code11","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.Code11","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.Code11\nHolds Code 11 configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tCode11 code11 = profileConfig.dataCapture.barcode.decoderParams.code11;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###length1\nUse to set decode lengths (default - 4).\n\n**Example Usage:**\n\n\t:::java\n\tint length1 = code11.length1;\n\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths (default - 55).\n\n**Example Usage:**\n\n\t:::java\n\tint length2 = code11.length2;\n\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data (default - enabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode11.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###report_check_digit\nTransmit Code 11 data with or without the check digit (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode11.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###verify_check_digit\nCheck the integrity of all Code 11 symbols to verify that the data complies with the specified check digit algorithm. This selects the check digit mechanism for the decoded Code 11 bar code. Use enum [ProfileConfig.VERIFY_CHECK_DIGIT](#api-ProfileConfig?VERIFY_CHECK_DIGIT).\n\n**Example Usage:**\n\n\t:::java\n\tcode11.verify_check_digit = VERIFY_CHECK_DIGIT.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.VERIFY_CHECK_DIGIT](#api-ProfileConfig?VERIFY_CHECK_DIGIT)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code128","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.Code128","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.Code128\nHolds Code128 configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tCode128 code128 = profileConfig.dataCapture.barcode.decoderParams.code128;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###check_isbt_table\nThe ISBT specification includes a table that lists several types of ISBT bar codes that are commonly used in pairs. If ISBT128 Concat Mode is set, enable Check ISBT T able to concatenate only those pairs found in this table. Other types of ISBT codes are not concatenated (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode128.check_isbt_table = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###enable_ean128\nUse enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode128.enable_ean128 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###enable_plain\nFlag to enable other 128 sub types (besides GS1-128 and ISBT -128). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode128.enable_plain = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###isbt128_concat_mode\nSelect an option for concatenating pairs of ISBT code types. Use enum [ProfileConfig.ISBT128_CONTACT_MODE](#api-ProfileConfig?ISBT128_CONTACT_MODE).\n\n**Example Usage:**\n\n\t:::java\n\tcode128.isbt128_concat_mode = ISBT128_CONTACT_MODE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ISBT128_CONTACT_MODE](#api-ProfileConfig?ISBT128_CONTACT_MODE)\n\n###length1\nUse to set decode lengths (default - 0).\n\n**Example Usage:**\n\n\t:::java\n\tint length1 = code128.length1;\n\n\n\n**Type:**\n\nint\n\n\n###length2\nUse to set decode lengths (default - 55).\n\n**Example Usage:**\n\n\t:::java\n\tint length2 = code128.length2;\n\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode128.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###security_level\nThe scanner of fers four levels of decode security for Code 128 bar codes. Select increasing levels of security for decreasing levels of bar code quality. There is an inverse relationship between security and scanner aggressiveness, so choose only that level of security necessary for any given application. Use enum [ProfileConfig.SECURITY_LEVEL](#api-ProfileConfig?SECURITY_LEVEL).\n\n**Example Usage:**\n\n\t:::java\n\tcode128.security_level = SECURITY_LEVEL.DEFAULT;\n\n\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.SECURITY_LEVEL](#api-ProfileConfig?SECURITY_LEVEL)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code39","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.Code39","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.Code39\nHolds Code39 configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tCode39 code39 = profileConfig.dataCapture.barcode.decoderParams.code39;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n###convert_to_code32\nCode 32 is a variant of Code 39 used by the Italian pharmaceutical industry (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode39.convert_to_code32 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###full_ascii\nCode 39 Full ASCII is a variant of Code 39 that pairs characters to encode the full ASCII character set (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode39.full_ascii = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###length1\nUse to set decode lengths (default - 0).\n\n**Example Usage:**\n\n\t:::java\n\tint length1 = code39.length1;\n\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths 4 (default - 55).\n\n**Example Usage:**\n\n\t:::java\n\tint length2 = code39.length2;\n\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode39.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###report_check_digit\nTransmit Code 39 data with or without the check digit (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode39.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###report_code32_prefix\nScan the appropriate bar code to enable or disable adding the prefix character \"A\" to all Code 32 bar codes (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode39.report_code32_prefix = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###security_level\nOptions: Security level 0 , Security Level 1 , Security Level 2 and Security Level 3 (default - Security level 1). Use enum [ProfileConfig.SECURITY_LEVEL](#api-ProfileConfig?SECURITY_LEVEL).\n\n**Example Usage:**\n\n\t:::java\n\tcode39.security_level = SECURITY_LEVEL.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.SECURITY_LEVEL](#api-ProfileConfig?SECURITY_LEVEL)\n\n###verify_check_digit\nEnable this feature to check the integrity of all Code 39 symbols to verify that the data complies with a specified check digit algorithm. The digital scanner decodes only those Code 39 symbols that include a modulo 43 check digit. Enable this feature only if the Code 39 symbols contain a modulo 43 check digit (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode39.verify_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code93","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.Code93","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.Code93\nHolds Code93 configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tCode93 code93 = profileConfig.dataCapture.barcode.decoderParams.code93;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###length1\nUse to set decode lengths (default - 0).\n\n**Example Usage:**\n\n\t:::java\n\tint length1 = code93.length1;\n\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths (default - 55).\n\n**Example Usage:**\n\n\t:::java\n\tint length2 = code93.length2;\n\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tcode93.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-Composite_AB","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.Composite_AB","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.Composite_AB\nHolds Composite AB configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tComposite_AB compositeAB = profileConfig.dataCapture.barcode.decoderParams.composite_AB;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###ucc_link_mode\nGets and Sets UCC Link Mode using [ProfileConfig.UCC_LINK_MODE](#api-ProfileConfig?UCC_LINK_MODE) enum;\n\n**Example Usage:**\n\n\t:::java\n\tcompositeAB.ucc_link_mode = UCC_LINK_MODE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.UCC_LINK_MODE](#api-ProfileConfig?UCC_LINK_MODE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-Discrete_2of5","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.Discrete_2of5","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.Discrete_2of5\nHolds Discrete 2 of 5 configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tDiscrete_2of5 discrete_2of5 = profileConfig.dataCapture.barcode.decoderParams.discrete_2of5;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###length1\nUsed to set decode lengths (default - 0).\n\n**Example Usage:**\n\n\t:::java\n\tint length1 = discrete_2of5.length1;\n\n\n**Type:**\n\nint\n\n###length2\nUsed to set decode lengths (default - 14).\n\n**Example Usage:**\n\n\t:::java\n\tint length2 = discrete_2of5.length2;\n\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data (default - enabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdiscrete_2of5.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-Interleaved_2of5","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.Interleaved_2of5","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.Interleaved_2of5\nHolds Interleaved 2 of 5 configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tInterleaved_2of5 interleaved2of5 = profileConfig.dataCapture.barcode.decoderParams.interleaved_2of5;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###check_digit\nThe check digit type to verify. Use enum [ProfileConfig.CHECK_DIGIT_TYPE](#api-ProfileConfig?CHECK_DIGIT_TYPE).\n\n**Example Usage:**\n\n\t:::java\n\tinterleaved2of5.check_digit = CHECK_DIGIT_TYPE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.CHECK_DIGIT_TYPE](#api-ProfileConfig?CHECK_DIGIT_TYPE)\n\n###convert_itf14_to_ean13\nConvert 14-character Interleaved 2 of 5 bar codes to EAN-13, and transmit as EAN-13. The Interleaved 2 of 5 bar code must be enabled and must have a leading zero and a valid EAN-13 check digit (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tinterleaved2of5.convert_itf14_to_ean13 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###length1\nUse to set decode lengths (default - 14).\n\n**Example Usage:**\n\n\t:::java\n\tint length1 = interleaved2of5.length1;\n\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths (default - 10).\n\n**Example Usage:**\n\n\t:::java\n\tint length2 = interleaved2of5.length2;\n\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data (default - enabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tinterleaved2of5.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###report_check_digit\nTransmit Interleaved 2 of 5 data with or without the check digit (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tinterleaved2of5.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###security_level\nSpecifies security level Use enum [ProfileConfig.SECURITY_LEVEL](#api-ProfileConfig?SECURITY_LEVEL).\n\n**Example Usage:**\n\n\t:::java\n\tinterleaved2of5.security_level = SECURITY_LEVEL.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.SECURITY_LEVEL](#api-ProfileConfig?SECURITY_LEVEL)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-Matrix_2of5","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.Matrix_2of5","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.Matrix_2of5\nHolds Matrix 2 of 5 configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tMatrix_2of5 matrix2of5 = profileConfig.dataCapture.barcode.decoderParams.matrix_2of5;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###length1\nUsed to set decode lengths (default - 10).\n\n**Example Usage:**\n\n\t:::java\n\tint length1 = matrix2of5.length1;\n\n\n**Type:**\n\nint\n\n###length2\nUsed to set decode lengths (default - 0).\n\n**Example Usage:**\n\n\t:::java\n\tint length2 = matrix2of5.length2;\n\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tmatrix2of5.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###report_check_digit\nTransmit Matrix 2 of 5 data with or without the check digit(default - enabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tmatrix2of5.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###verify_check_digit\nEnable this feature to check the integrity of all Matrix 2 of 5 symbols to verify that the data complies with a specified check digit algorithm (default - enabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tmatrix2of5.verify_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-MSI","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.MSI","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.MSI\nHolds Codabar configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tMSI msi = profileConfig.dataCapture.barcode.decoderParams.msi;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###check_digit\nWith MSI symbols, one check digit is mandatory and always verified by the reader. The second check digit is optional. Use enum [ProfileConfig.CHECK_DIGIT](#api-ProfileConfig?CHECK_DIGIT).\n\n**Example Usage:**\n\n\t:::java\n\tmsi.check_digit = CHECK_DIGIT.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.CHECK_DIGIT](#api-ProfileConfig?CHECK_DIGIT)\n\n###check_digit_scheme\nTwo algorithms are possible for the verification of the second MSI check digit. Select the algorithm used to encode the check digit. Use enum [ProfileConfig.CHECK_DIGIT_SCHEME](#api-ProfileConfig?CHECK_DIGIT_SCHEME).\n\n**Example Usage:**\n\n\t:::java\n\tmsi.check_digit_scheme = CHECK_DIGIT_SCHEME.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.CHECK_DIGIT_SCHEME](#api-ProfileConfig?CHECK_DIGIT_SCHEME)\n\n###length1\nUse to set decode lengths (default - 4).\n\n**Example Usage:**\n\n\t:::java\n\tint length1 = msi.length1;\n\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths (default - 55).\n\n**Example Usage:**\n\n\t:::java\n\tint length2 = msi.length2\n\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data (default - enabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tmsi.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###report_check_digit\nTransmit MSI data with or without the check digit (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tmsi.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-UK_Postal","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.UK_Postal","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.UK_Postal\nHolds UK Postal configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tUK_Postal ukPostal = profileConfig.dataCapture.barcode.decoderParams.uk_Postal;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###report_check_digit\nTransmit UK Postal data with or without the check digit (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tukPostal.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCA","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.UPCA","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.UPCA\nHolds UPCA configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tUPCA upca = profileConfig.dataCapture.barcode.decoderParams.upca;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###preamble\nPreamble characters are part of the UPC symbol consisting of Country Code and System Character. Select the appropriate option to match the host system. Use enum [ProfileConfig.PREAMBLE](#api-ProfileConfig?PREAMBLE).\n\n**Example Usage:**\n\n\t:::java\n\tupca.preamble = PREAMBLE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.PREAMBLE](#api-ProfileConfig?PREAMBLE)\n\n###report_check_digit\nThe check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option (default - enabled) . Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupca.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCE0","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE0","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE0\nHolds UPCE0 configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tUPCE0 upce0 = profileConfig.dataCapture.barcode.decoderParams.upce0;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###convert_to_upca\nEnable to convert UPCE0 (zero suppressed) decoded data to UPC-A format before transmission. After conversion, the data follows UPC-A format and is af fected by UPC-A programming selections. Disable to transmit UPCE0 decoded data as UPCE0 data, without conversion (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupce0.convert_to_upca = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###preamble\nPreamble characters are part of the UPC symbol consisting of Country Code and System Character. Select the appropriate option to match the host system. Use enum [ProfileConfig.PREAMBLE](#api-ProfileConfig?PREAMBLE).\n\n**Example Usage:**\n\n\t:::java\n\tupce0.preamble = PREAMBLE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.PREAMBLE](#api-ProfileConfig?PREAMBLE)\n\n###report_check_digit\nThe check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupce0.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCE1","name":"ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE1","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE1\nHolds UPCE1 configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tUPCE1 upce1 = profileConfig.dataCapture.barcode.decoderParams.upce1;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###convert_to_upca\nEnable this to convert UPCE1 decoded data to UPC-A format before transmission. After conversion, the data follows UPC-A format and is af fected by UPC-A programming selections. Disable this to transmit UPCE1 decoded data as UPCE1 data, without conversion (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupce1.convert_to_upca = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###preamble\nPreamble characters are part of the UPC symbol consisting of Country Code and System Character. Select the appropriate option to match the host system. Use enum [ProfileConfig.PREAMBLE](#api-ProfileConfig?PREAMBLE).\n\n**Example Usage:**\n\t:::java\n\tupce1.preamble = PREAMBLE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.PREAMBLE](#api-ProfileConfig?PREAMBLE)\n\n###report_check_digit\nThe check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option (default - disabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupce1.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-DecoderParams","name":"ProfileConfig.DataCapture.Barcode.DecoderParams","md":"#ProfileConfig.DataCapture.Barcode.DecoderParams\nHolds Decoder configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tDecoderParams decoderParams = profileConfig.dataCapture.barcode.decoderParams;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###codabar\nConfigures the Codabar Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.Codabar](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Codabar).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.codabar.clsi_editing = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.Codabar](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Codabar)\n\n###code11\nConfigures the Code11 Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.Code11](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code11).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.code11.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.Code11](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code11)\n\n###code128\nConfigures the Code128 Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.Code128](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code128).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.code128.enable_ean128 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.Code128](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code128)\n\n###code39\nConfigures the Code39 Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.Code39](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code39).\n\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.code39.full_ascii = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.Code39](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code39)\n\n###code93\nConfigures the Code93 Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.Code93](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code93).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.code93.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.Code93](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code93)\n\n###composite_AB\nConfigures the Composite AB Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.Composite_AB](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Composite_AB).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.composite_AB.ucc_link_mode = UCC_LINK_MODE.ALWAYS_LINKED;\n\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.Composite_AB](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Composite_AB)\n\n###discrete_2of5\nConfigures the Discrete_2of5 Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.Discrete_2of5](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Discrete_2of5).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.discrete_2of5.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.Discrete_2of5](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Discrete_2of5)\n\n###interleaved_2of5\nConfigures the Interleaved 2of5 Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.Interleaved_2of5](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Interleaved_2of5).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.interleaved_2of5.check_digit = CHECK_DIGIT_TYPE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.Interleaved_2of5](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Interleaved_2of5)\n\n###matrix_2of5\nConfigures the Matrix 2of5 Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.Matrix_2of5](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Matrix_2of5).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.matrix_2of5.redundancy = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.Matrix_2of5](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Matrix_2of5)\n\n###msi\nConfigures the MSI Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.MSI](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-MSI).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.msi.check_digit = CHECK_DIGIT.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.MSI](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-MSI)\n\n###uk_Postal\nConfigures the UK_Postal Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.UK_Postal](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UK_Postal).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.uk_Postal.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.UK_Postal](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UK_Postal)\n\n###upca\nConfigures the UPCA Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.UPCA](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCA).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.upca.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.UPCA](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCA)\n\n###upce0\nConfigures the UPCE0 Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE0](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCE0).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.upce0.report_check_digit = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE0](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCE0)\n\n###upce1\nConfigures the UPCE1 Symbology object [ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE1](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCE1).\n\n**Example Usage:**\n\n\t:::java\n\tdecoderParams.upce1.convert_to_upca = ENABLED_STATE.DEFAULT;\n\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE1](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCE1)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-Decoders","name":"ProfileConfig.DataCapture.Barcode.Decoders","md":"#ProfileConfig.DataCapture.Barcode.Decoders\nThe Decoders class provides access to enable or disable decoder barcode symbologies.\n\n**Example Usage:**\n\n\t:::java\n\tDecoders decoders = barcode.decoders;\n\tdecoders.upca = ENABLED_STATE.TRUE;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###australian_postal\nSets the Enabled State of Decoder Australian Postal. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.australian_postal = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###aztec\nSets the Enabled State of Decoder Aztec. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.aztec = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###canadian_postal\nSets the Enabled State of Decoder Canadian Postal. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.canadian_postal = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###chinese_2of5\nSets the Enabled State of Decoder Chinese 2 of 5. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.chinese_2of5 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###codabar\nSets the Enabled State of Decoder Codabar. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.codabar = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###code11\nSets the Enabled State of Decoder Code11. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.code11 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###code128\nSets the Enabled State of Decoder Code 128. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.code128 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###code39\nSets the Enabled State of Decoder Code 39. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.code39 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###code93\nSets the Enabled State of Decoder Code 93. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.code93 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###composite_ab\nSets the Enabled State of Decoder Composite AB. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.composite_ab = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###composite_c\nSets the Enabled State of Decoder Composite C. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.composite_c = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###d2of5\nSets the Enabled State of Decoder Discrete 2 of 5. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.d2of5 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###datamatrix\nSets the Enabled State of Decoder Data Matrix. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.datamatrix = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###dutch_postal\nSets the Enabled State of Decoder Dutch Postal. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.dutch_postal = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###ean13\nSets the Enabled State of Decoder EAN-13. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.ean13 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###ean8\nSets the Enabled State of Decoder EAN-8. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.ean8 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###gs1_databar\nSets the Enabled State of Decoder Interleaved 2 of 5. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.gs1_databar = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###gs1_databar_exp\nSets the Enabled State of Decoder GS1 DataBar Expanded. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.gs1_databar_exp = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###gs1_databar_lim\nSets the Enabled State of Decoder GS1 DataBar Limited. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.gs1_databar_lim = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###i2of5\nUse enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.i2of5 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###japanese_postal\nSets the Enabled State of Decoder Japan Postal. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.japanese_postal = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###korean_3of5\nSets the Enabled State of Decoder Korean 3 of 5. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.korean_3of5 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###matrix_2of5\nSets the Enabled State of Decoder Matrix 2 of 5. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.matrix_2of5 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###maxicode\nSets the Enabled State of Decoder Maxicode. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.maxicode = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###micropdf\nSets the Enabled State of Decoder Micro PDF. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.micropdf = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###microqr\nSets the Enabled State of Decoder Micro QR. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.microqr = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###msi\nSets the Enabled State of Decoder MSI. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.msi = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###pdf417\nSets the Enabled State of Decoder PDF417. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.pdf417 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###qrcode\nSets the Enabled State of Decoder QR Code. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.qrcode = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###signature\nSets the Enabled State of Decoder Signature. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.signature = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###tlc39\nSets the Enabled State of Decoder TLC 39. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.tlc39 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###trioptic39\nSets the Enabled State of Decoder Trioptic 39. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.trioptic39 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###uk_postal\nSets the Enabled State of Decoder UK Postal. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.uk_postal = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###upca\nSets the Enabled State of Decoder UPCA. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.upca = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###upce0\nSets the Enabled State of Decoder UPCE0. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.upce0 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###upce1\nSets the Enabled State of Decoder UPCE1. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.upce1 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###us4state\nSets the Enabled State of Decoder US4State. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.us4state = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###us4state_fics\nSets the Enabled State of Decoder US4State FICS. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.us4state_fics = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###usplanet\nSets the Enabled State of Decoder US Planet. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.usplanet = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###uspostnet\nSets the Enabled State of Decoder US Postnet. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.uspostnet = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###webcode\nSets the Enabled State of Decoder Web Code. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tdecoders.webcode = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-ReaderParams","name":"ProfileConfig.DataCapture.Barcode.ReaderParams","md":"#ProfileConfig.DataCapture.Barcode.ReaderParams\nHolds reader configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tReaderParams readerParams = profileConfig.dataCapture.barcode.readerParams;\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###beam_timer\nSets the maximum amount of time that the reader remains on (0 - 60,000 ms in increments of 100 ms). A value of 0 sets the reader to stay on indefinitely (default -15000).\n\n**Example Usage:**\n\n\t:::java\n\tint timer = readerParams.beam_timer;\n\n**Type:**\n\nint\n\n###illumination_mode\nTurns camera illumination on and off. This option is only available when camera is selected in the Barcode input Scanner selection option. Use enum [ProfileConfig.ILLUMINATION_MODE](#api-ProfileConfig?ILLUMINATION_MODE).\n\n**Example Usage:**\n\n\t:::java\n\treaderParams.illumination_mode = ILLUMINATION_MODE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ILLUMINATION_MODE](#api-ProfileConfig?ILLUMINATION_MODE)\n\n###inverse_1d_mode\nThis parameter allows the user to select decoding on inverse 1D bar codes. Use enum [ProfileConfig.INVERSE_1D_MODE](#api-ProfileConfig?INVERSE_1D_MODE).\n\n**Example Usage:**\n\t\n\t:::java\n\treaderParams.inverse_1d_mode = INVERSE_1D_MODE.AUTO;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.INVERSE_1D_MODE](#api-ProfileConfig?INVERSE_1D_MODE)\n\n###lcd_mode\nEnables or disables LCD mode. LCD mode enhances the ability of the imager to read bar codes from LCD displays such as cellphones (imager only). Use enum [ProfileConfig.LCD_MODE](#api-ProfileConfig?LCD_MODE).\n\n**Example Usage:**\n\n\t:::java\n\treaderParams.lcd_mode = LCD_MODE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.LCD_MODE](#api-ProfileConfig?LCD_MODE)\n\n###linear_security_level\nSets the number of times a bar code is read to confirm an accurate decode. Use enum [ProfileConfig.LINEAR_SECURITY_LEVEL](#api-ProfileConfig?LINEAR_SECURITY_LEVEL).\n\n**Example Usage:**\n\n\t:::java\n\treaderParams.linear_security_level = LINEAR_SECURITY_LEVEL.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.LINEAR_SECURITY_LEVEL](#api-ProfileConfig?LINEAR_SECURITY_LEVEL)\n\n###low_power_timeout\nTime in milliseconds of non-use before dropping to a low-power mode.\n\n**Example Usage:**\n\n\t:::java\n\tint timeout = readerParams.low_power_timeout;\n\n**Type:**\n\nint\n\n###picklist\nAllows the imager to decode only the bar code that is directly under the cross-hair/reticle (+) part of the pattern. This feature is useful in applications where multiple bar codes may appear in the field of view during a decode session and only one of them is targeted for decode. Use enum [ProfileConfig.PICK_LIST](#api-ProfileConfig?PICK_LIST).\n\n**Example Usage:**\n\n\t:::java\n\treaderParams.picklist = PICK_LIST.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.PICK_LIST](#api-ProfileConfig?PICK_LIST)\n\n###viewfinder_mode\nConfigures the Viewfinder modes supported for camera scanning. Use enum [ProfileConfig.VIEWFINDER_MODE](#api-ProfileConfig?VIEWFINDER_MODE).\n\n**Example Usage:**\n\n\t:::java\n\treaderParams.viewfinder_mode = VIEWFINDER_MODE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.VIEWFINDER_MODE](#api-ProfileConfig?VIEWFINDER_MODE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-ScanParams","name":"ProfileConfig.DataCapture.Barcode.ScanParams","md":"#ProfileConfig.DataCapture.Barcode.ScanParams\nHolds scanning configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tScanParams scanParams = profileConfig.dataCapture.barcode.scanParams;\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###code_id_type\nA Code ID character identifies the code type of a scanned bar code. This is useful when the reader is decoding more than one code type. Select a code ID character to insert between the prefix and the decoded symbol. Use enum [ProfileConfig.CODE_ID_TYPE](#api-ProfileConfig?CODE_ID_TYPE).\n\n**Example Usage:**\n\n\t:::java\n\tscanParams.code_id_type = CODE_ID_TYPE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.CODE_ID_TYPE](#api-ProfileConfig?CODE_ID_TYPE)\n\n###datacapture_led_id\nData Capture LED ID\n\n**Example Usage:**\n\n\t:::java\n\tint led = scanParams.datacapture_led_id;\n\n**Type:**\n\nint\n\n###decode_audio_feedback_uri\nSelect an audio tone to sound upon a good decode.\n\n**Example Usage:**\n\n\t:::java\n\tString audioFeedback = scanParams.decode_audio_feedback_uri;\n\n**Type:**\n\njava.lang.String\n\n###decode_haptic_feedback\nEnable the device to vibrate upon a good decode (default - enabled). Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tscanParams.decode_haptic_feedback = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###good_decode_led_timer\nTime for which Good Decode LED Notification Runs in milliseconds.\n\n**Example Usage:**\n\n\t:::java\n\tint ledTimer = scanParams.good_decode_led_timer;\n\n**Type:**\n\nint\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode-UpcEanParams","name":"ProfileConfig.DataCapture.Barcode.UpcEanParams","md":"#ProfileConfig.DataCapture.Barcode.UpcEanParams\nHolds Upc Ean Params configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tUpcEanParams upcEanParams = profileConfig.dataCapture.barcode.upcEanParams;\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###bookland\nFlag to enable Bookland code decoding. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupcEanParams.bookland = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###bookland_format\nSpecifies the bookland format to use. Use enum [ProfileConfig.BOOKLAND_FORMAT](#api-ProfileConfig?BOOKLAND_FORMAT).\n\n**Example Usage:**\n\n\t:::java\n\tupcEanParams.bookland_format = BOOKLAND_FORMAT.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.BOOKLAND_FORMAT](#api-ProfileConfig?BOOKLAND_FORMAT)\n\n###coupon\nEnables Coupon code decoding. Note that in order to successfully decode Coupon codes, all of the correct decoders must be enabled. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupcEanParams.coupon = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###coupon_report\nUsed to differentiate between old coupon (UPC/EAN and Code128) and new GS1 DataBar Coupons. NOTE: There is an Interim GS1 DataBar Coupon (UPC A and the GS1 DataBar), which is meant for smooth transition of adaption from old coupon format to new coupon format. If an interim coupon is presented to the scanner, it will read old or new portion of it, depending on the report mode setting. Use enum [ProfileConfig.COUPON_REPORT](#api-ProfileConfig?COUPON_REPORT).\n\n**Example Usage:**\n\n\t:::java\n\tupcEanParams.coupon_report = COUPON_REPORT.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.COUPON_REPORT](#api-ProfileConfig?COUPON_REPORT)\n\n###databar_to_upc_ean\nIf this is set it converts DataBar bar codes to UPC/EAN format. For this setting to work UPC/EAN symbologies must be enabled. A check in the checkbox indicates that the option is enabled. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupcEanParams.databar_to_upc_ean = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###linear_decode\nFlag to enable linear decode. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupcEanParams.linear_decode = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###random_weight_check_digit\nFlag to enable random weight check digit verification. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupcEanParams.random_weight_check_digit = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###retry_count\nRetry count for auto-discriminating for supplementals. Possible values are 2 to 20 inclusive. Note that this flag is only considered if Supplemental Mode - UPC EAN is set to one of the following values: Supplementals Auto, Supplementals Smart, Supplementals 378-379 , Supplementals 978-979, Supplementals 977 or Supplementals 414-419-434-439 (2 to 20, default 10).\n\n**Example Usage:**\n\n\t:::java\n\tint retry = upcEanParams.retry_count;\n\n**Type:**\n\nint\n\n###security_level\nThe scanner of fers four levels of decode security for UPC/EAN bar codes. Select higher security levels for lower quality bar codes. There is an inverse relationship between security and decode speed, so be sure to choose only that level of security necessary for the application. Use enum [ProfileConfig.SECURITY_LEVEL](#api-ProfileConfig?SECURITY_LEVEL).\n\n**Example Usage:**\n\t\n\t:::java\n\tupcEanParams.security_level = SECURITY_LEVEL.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.SECURITY_LEVEL](#api-ProfileConfig?SECURITY_LEVEL)\n\n###supplemental2\nFlag to enable length 2 supplementals. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupcEanParams.supplemental2 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###supplemental5\nFlag to enable length 5 supplementals. Use enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tupcEanParams.supplemental5 = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###supplemental_mode\nThe supplemental mode. Use enum [ProfileConfig.SUPPLEMENTAL_MODE](#api-ProfileConfig?SUPPLEMENTAL_MODE).\n\n**Example Usage:**\n\n\t:::java\n\tupcEanParams.supplemental_mode = SUPPLEMENTAL_MODE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.SUPPLEMENTAL_MODE](#api-ProfileConfig?SUPPLEMENTAL_MODE)\n\n"},{"key":"api-ProfileConfig-DataCapture-Barcode","name":"ProfileConfig.DataCapture.Barcode","md":"#ProfileConfig.DataCapture.Barcode\nHolds Barcode configuration settings\n\n**Example Usage:**\n\n\t:::java\n\tBarcode barcode = profileConfig.dataCapture.barcode;\n\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###decoderParams\nGets and Sets DecoderParams configuration object [ProfileConfig.DataCapture.Barcode.DecoderParams](#api-ProfileConfig-DataCapture-Barcode-DecoderParams).\n\n**Example Usage:**\n\n\t:::java\n\tbarcode.decoderParams.upca.preamble = PREAMBLE.SYS_CHAR;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.DecoderParams](#api-ProfileConfig-DataCapture-Barcode-DecoderParams)\n\n###decoders\nGets and Sets Decoders configuration object [ProfileConfig.DataCapture.Barcode.Decoders](#api-ProfileConfig-DataCapture-Barcode-Decoders).\n\n**Example Usage:**\n\n\t:::java\n\tbarcode.decoders.codabar = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.Decoders](#api-ProfileConfig-DataCapture-Barcode-Decoders)\n\n###readerParams\nGets and Sets ReaderParams configuration object [ProfileConfig.DataCapture.Barcode.ReaderParams](#api-ProfileConfig-DataCapture-Barcode-ReaderParams).\n\n**Example Usage:**\n\n\t:::java\n\tbarcode.readerParams.illumination_mode = ILLUMINATION_MODE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.ReaderParams](#api-ProfileConfig-DataCapture-Barcode-ReaderParams)\n\n###scanParams\nGets and Sets ScanParams configuration object [ProfileConfig.DataCapture.Barcode.ScanParams](#api-ProfileConfig-DataCapture-Barcode-ScanParams).\n\n**Example Usage:**\n\n\t:::java\n\tbarcode.ScanParams.decode_haptic_feedback = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.ScanParams](#api-ProfileConfig-DataCapture-Barcode-ScanParams)\n\n###scannerSelection\nGets and Sets scanner selection [ProfileConfig.DEVICETYPES](#api-ProfileConfig?DEVICETYPES).\n\n**Example Usage:**\n\n\t:::java\n\tbarcode.scannerSelection = DEVICETYPES.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DEVICETYPES](#api-ProfileConfig?DEVICETYPES)\n\n###scanner_input_enabled\nGets and Sets scanner enabled state [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tbarcode.scanner_input_enabled = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###upcEanParams\nGets and Sets UpcEanParams configuration object [ProfileConfig.DataCapture.Barcode.UpcEanParams](#api-ProfileConfig-DataCapture-Barcode-UpcEanParams).\n\n**Example Usage:**\n\n\t:::java\n\tbarcode.upcEanParams.linear_decode = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode.UpcEanParams](#api-ProfileConfig-DataCapture-Barcode-UpcEanParams)\n\n"},{"key":"api-ProfileConfig-DataCapture-DataDelivery-BasicDataFormatting","name":"ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting","md":"#ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting\nHolds Basic Data Formatting configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tBasicDataFormatting basicDataFormatting = profileConfig.dataCapture.dataDelivery.intent.basicDataFormatting;\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###bdf_enabled\nEnables or disables Basic Data Formatting (default - enabled). Uses the [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE) enum.\n\n**Example Usage:**\n\t\n\t:::java\n\tbasicDataFormatting.bdf_enabled = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###bdf_prefix\nAdd characters to the beginning of the data when sent.\n\n**Example Usage:**\n\t\n\t:::java\n\tString prefix = basicDataFormatting.bdf_prefix;\n\n**Type:**\n\njava.lang.String\n\n###bdf_send_data\nSet to transfer the captured data to the foreground application. Disabling this option prevents the actual data from being transmitted. However, the prefix and suf fix strings, if present, are still transmitted even when this option is disabled (default - enabled). Uses the [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE) enum.\n\n**Example Usage:**\n\n\t:::java\n\tbasicDataFormatting.bdf_send_data = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###bdf_send_enter\nSet to append an Enter character to the end of the processed data(default - disabled). Uses the [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE) enum.\n\n**Example Usage:**\n\n\t:::java\n\tbasicDataFormatting.bdf_send_enter = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###bdf_send_hex\nSet to send the data in hexadecimal format(default - disabled). Uses the [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE) enum.\n\n**Example Usage:**\n\n\t:::java\n\tbasicDataFormatting.bdf_send_hex = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###bdf_send_tab\nSet to append a tab character to the end of the processed data(default - disabled). Uses the [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE) enum.\n\n**Example Usage:**\n\n\t:::java\n\tbasicDataFormatting.bdf_send_tab = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###bdf_suffix\nAdd characters to the end of the data when sent.\n\n**Example Usage:**\n\n\t:::java\n\tString suffix = basicDataFormatting.bdf_suffix;\n\n**Type:**\n\njava.lang.String\n\n"},{"key":"api-ProfileConfig-DataCapture-DataDelivery-Intent","name":"ProfileConfig.DataCapture.DataDelivery.Intent","md":"#ProfileConfig.DataCapture.DataDelivery.Intent\nHolds Intent configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tIntent intent = profileConfig.Intent;\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###action\nGets and Sets the intent action.\n\n**Example Usage:**\n\n\t:::java\n\tString action = intent.action;\n\n**Type:**\n\njava.lang.String\n\n###basicDataFormatting\nGets and Sets intent INTENT_DELIVERY configuration object [ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting](#api-ProfileConfig-DataCapture-DataDelivery-BasicDataFormatting).\n\n**Example Usage:**\n\n\t:::java\n\tintent.BasicDataFormatting.bdf_enabled = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting](#api-ProfileConfig-DataCapture-DataDelivery-BasicDataFormatting)\n\n###category\nGets and Sets the intent category.\n\n**Example Usage:**\n\n\t:::java\n\tString category = intent.category;\n\n**Type:**\n\njava.lang.String\n\n###delivery\nGets and Sets intent INTENT_DELIVERY configuration enum [ProfileConfig.INTENT_DELIVERY](#api-ProfileConfig?INTENT_DELIVERY).\n\n**Example Usage:**\n\n\t:::java\n\tintent.delivery = INTENT_DELIVERY.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.INTENT_DELIVERY](#api-ProfileConfig?INTENT_DELIVERY)\n\n###output_enabled\nGets and Sets intent ENABLED_STATE configuration enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tintent.output_enabled = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture-DataDelivery-Keystroke","name":"ProfileConfig.DataCapture.DataDelivery.Keystroke","md":"#ProfileConfig.DataCapture.DataDelivery.Keystroke\nHolds Keystroke configuration settings.\n\n**Example Usage:**\n\n\t:::java\n\tKeystroke keystroke = profileConfig.dataCapture.dataDelivery.keystroke;\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n\n###basicDataFormatting\nGets and Sets keystroke basic data formatting configuration object [ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting](#api-ProfileConfig-DataCapture-DataDelivery-BasicDataFormatting).\n\n**Example Usage:**\n\n\t:::java\n\tkeystroke.BasicDataFormatting.bdf_enabled = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting](#api-ProfileConfig-DataCapture-DataDelivery-BasicDataFormatting)\n\n###ime_output_enabled\nGets and Sets keystroke ENABLED_STATE configuration enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tkeystroke.ime_output_enabled = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n###keystroke_action_char\nGets and Sets keystroke ACTION_KEY_CHAR configuration enum [ProfileConfig.ACTION_KEY_CHAR](#api-ProfileConfig?ACTION_KEY_CHAR).\n\n**Example Usage:**\n\n\t:::java\n\tkeystroke.keystroke_action_char = ACTION_KEY_CHAR.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ACTION_KEY_CHAR](#api-ProfileConfig?ACTION_KEY_CHAR)\n\n"},{"key":"api-ProfileConfig-DataCapture-DataDelivery","name":"ProfileConfig.DataCapture.DataDelivery","md":"#ProfileConfig.DataCapture.DataDelivery\nClass for dealing with DataDelivery profile data ProfileConfig.DataCapture.DataDelivery.\n\n**Example Usage:**\n\n\t:::java\n\tDataDelivery dataDelivery = profileConfig.dataCapture.dataDelivery;\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###intent\nGets and Sets Intent configuration object [ProfileConfig.DataCapture.DataDelivery.Intent](#api-ProfileConfig-DataCapture-DataDelivery-Intent).\n\n**Example Usage:**\n\n\t:::java\n\tprofileConfig.dataCapture.dataDelivery.intent.output_enabled = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.DataDelivery.Intent](#api-ProfileConfig-DataCapture-DataDelivery-Intent)\n\n###keystroke\nGets and Sets Keystroke configuration object [ProfileConfig.DataCapture.DataDelivery.Keystroke](#api-ProfileConfig-DataCapture-DataDelivery-Keystroke).\n\n**Example Usage:**\n\n\t:::java\n\tprofileConfig.dataCapture.dataDelivery.keystroke.ime_output_enabled = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.DataDelivery.Keystroke](#api-ProfileConfig-DataCapture-DataDelivery-Keystroke)\n\n"},{"key":"api-ProfileConfig-DataCapture-MSR","name":"ProfileConfig.DataCapture.MSR","md":"#ProfileConfig.DataCapture.MSR\nHolds MSR configuration settings\n\n**Example Usage:**\n\n\t:::java\n\tMSR msr = profileConfig.dataCapture.msr;\n\n**Version:**\n\n2.0\n\n##Constructors\n\n###ProfileConfig.DataCapture.MSR()\n\n##Public Fields\n\n###msr_input_enabled\nGets and Sets MSR enabled configuration enum [ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE).\n\n**Example Usage:**\n\n\t:::java\n\tmsr.msr_input_enabled = ENABLED_STATE.DEFAULT;\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ENABLED_STATE](#api-ProfileConfig?ENABLED_STATE)\n\n"},{"key":"api-ProfileConfig-DataCapture","name":"ProfileConfig.DataCapture","md":"#ProfileConfig.DataCapture\nClass for dealing with data capture profile data ProfileConfig.DataCapture\n\n**Example Usage:**\n\n\t:::java\n\tDataCapture dataCapture = profileConfig.dataCapture;\n\n**Version:**\n\n2.0\n\n##Public Fields\n\n###barcode\nGets and Sets Barcode configuration object.\n\n**Example Usage:**\n\n\t:::java\n\tprofileConfig.dataCapture.barcode.decoders.code11 = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.Barcode](#api-ProfileConfig-DataCapture-Barcode)\n\n###dataDelivery\nGets and Sets DataDelivery configuration object.\n\n**Example Usage:**\n\n\t:::java\n\tprofileConfig.dataCapture.dataDelivery.keystroke.ime_output_enabled = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.DataDelivery](#api-ProfileConfig-DataCapture-DataDelivery)\n\n###msr\nGets and Sets MSR configuration object.\n\n**Example Usage:**\n\n\t:::java\n\tprofileConfig.msr.msr_input_enabled = ENABLED_STATE.DEFAULT;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture.MSR](#api-ProfileConfig-DataCapture-MSR)\n\n\n"},{"key":"api-ProfileConfig","name":"ProfileConfig","md":"#ProfileConfig\nClass for dealing with profile data\n\n**Example Usage:**\n\n\t:::java\n\tProfileConfig profileConfig = new ProfileConfig();\n\n**Version:**\n\n2.0\n\n##Constructors\n\n###ProfileConfig()\nCreates a new instance of ProfileConfig.\n\n**Example Usage:**\n\n\t:::java\n\tProfileConfig profileConfig = new ProfileConfig();\n\n\n##Public Fields\n###activitySelection\nGets and Sets the activity selection for the profiles [ProfileConfig.ActivitySelection](#api-ProfileConfig-ActivitySelection). If no activities are associated to profile, the profile will be associated to that application for that session.\n\n**Example Usage:**\n\n\t:::java\n\tActivitySelection activitySelection = profileConfig.activitySelection;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.ActivitySelection](#api-ProfileConfig-ActivitySelection)\n\n###dataCapture\nGets and Sets the profiles DataCapture object [ProfileConfig.DataCapture](#api-ProfileConfig-DataCapture).\n\n**Example Usage:**\n\n\t:::java\n\tDataCapture dataCapture = profileConfig.dataCapture;\n\n\n**Type:**\n\ncom.symbol.emdk.[ProfileConfig.DataCapture](#api-ProfileConfig-DataCapture)\n\n###modifiedDate\nGets and Sets the profiles modified date string.\n\n**Example Usage:**\n\n\t:::java\n\tString profileDate = profileConfig.modifiedDate;\n\n\n**Type:**\n\njava.lang.String\n\n###profileName\nGets and Sets the profile name.\n\n**Example Usage:**\n\n\t:::java\n\tString profileName = profileConfig.profileName;\n\n\n**Type:**\n\njava.lang.String\n\n##Public Enums\n###ACTION_KEY_CHAR\nKeystroke Output Action key character enables decoding of a special character embedded within a bar code or MSR data for use in native Android applications. This feature is helpful when populating or executing a form.\n\n**Example Usage:**\n\n\t:::java\n\tACTION_KEY_CHAR.NONE;\n\n\n**Values:**\n\n* **DEFAULT** - Default action key character configured on the device.\n* **NONE** - Action key character feature is disabled.\n* **TAB** - Tab character code in a bar code is processed. When DataWedge detects this character code in a bar code, move the focus to the next field.\n* **LINEFEED** - Line feed character code in a bar code is processed. When DataWedge detects this character code in a bar code, move the focus to the next field.\n* **CARRIAGERETURN** - Carriage return character code in a bar code is processed. When DataWedge detects this character code in a bar code, move the focus to the next field.\n\n###BOOKLAND_FORMAT\nLists the Bookland formats\n\n**Example Usage:**\n\n\t:::java\n\tBOOKLAND_FORMAT.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default bookland format configured on device.\n* **ISBN_10** - 978 reported in 10 digit mode.\n* **ISBN_13** - 978/979 transmitted as EAN13 as per 2007 ISBN-13 protocol.\n\n###CHECK_DIGIT\nThe number of check digits to be verified. With MSI symbols, one check digit is mandatory and always verified by the reader. The second check digit is optional.\n\n**Example Usage:**\n\n\t:::java\n\tCHECK_DIGIT.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default check digit configured on device.\n* **ONE** - Verify one check digit.\n* **TWO** - Verify two check digits.\n\n###CHECK_DIGIT_SCHEME\nTwo algorithms are possible for the verification of the second MSI check digit. Select the algorithm used to encode the check digit.\n\n**Example Usage:**\n\n\t:::java\n\tCHECK_DIGIT_SCHEME.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default check digit scheme configured on device.\n* **MOD_11_10** - First check digit is MOD 11 and second check digit is MOD 10.\n* **MOD_10_10** - Both check digits are MOD 10.\n\n###CHECK_DIGIT_TYPE\nVerify data integrity.\n\n**Example Usage:**\n\n\t:::java\n\tCHECK_DIGIT_TYPE.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default check digit type configured on device.\n* **NO** - A check digit is not used.\n* **USS** - Select to check the integrity of all Interleaved 2 of 5 symbols to verify the data complies with either the Uniform Symbology Specification (USS) check digit algorithm.\n* **OPCC** - Select to check the integrity of all Interleaved 2 of 5 symbols to verify the data complies with either the Optical Product Code Council (OPCC) check digit algorithm.\n\n###CODE_ID_TYPE\nA Code ID character identifies the code type of a scanned bar code. This is useful when the reader is decoding more than one code type. Select a code ID character to insert between the prefix and the decoded symbol.\n\n**Example Usage:**\n\n\t:::java\n\tCODE_ID_TYPE.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default prefix configured on device.\n* **NONE** - No prefix.\n* **AIM** - A standards based three character prefix.\n* **SYMBOL** - A Symbol defined single character prefix.\n\n###COUPON_REPORT\nSupported Coupon modes\n\n**Example Usage:**\n\n\t:::java\n\tCOUPON_REPORT.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default coupon reports mode configured on device.\n* **OLD** - Scanner will read only the old coupon format.\n* **NEW** - Scanner will read only the new GS1 DataBar coupon format.\n* **BOTH** - Scanner will read both old coupon format as well as the new GS1 DataBar coupon format.\n\n###DEVICETYPES\nList of supported scanner device types.\n\n**Example Usage:**\n\n\t:::java\n\tDEVICETYPES.INTERNAL_LASER1;\n\n\n**Values:**\n\n* **AUTO** - Default scanner device configured on device.\n* **INTERNAL_LASER1** - Internal laser.\n* **INTERNAL_CAMERA1** - Internal camera.\n* **INTERNAL_IMAGER1** - Internal imager.\n\n###ENABLED_STATE\nEnable states.\n\n**Example Usage:**\n\n\t:::java\n\tENABLED_STATE.FALSE;\n\n\n**Values:**\n\n* **DEFAULT** - Default enable state configured on device.\n* **FALSE** - Disabled.\n* **TRUE** - Enabled.\n\n###ILLUMINATION_MODE\nTurns camera illumination on and off. This option is only available when camera is selected in the Barcode input Scanner selection option.\n\n**Example Usage:**\n\n\t:::java\n\tILLUMINATION_MODE.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default illumination configured on device.\n* **OFF** - External illumination is always is off.\n* **ON** - External illumination is always on.\n\n###INTENT_DELIVERY\nAllows configuration of the Intent Output Plug-in for the profile. The Intent Output Plug-in allows the captured data to be sent to an application in the form of an implicit Intent.\n\n**Example Usage:**\n\n\t:::java\n\tINTENT_DELIVERY.SEND_VIA_STARTACTIVITY;\n\n\n**Values:**\n\n* **DEFAULT** - Default intent delivery type configured on the device.\n* **SEND_VIA_STARTACTIVITY** - Send output via StartActivity.\n* **SEND_VIA_STARTSERVICE** - Send output via startService.\n* **BROADCAST_INTENT** - Send output via Broadcast intent.\n\n###INVERSE_1D_MODE\nThis parameter allows the user to select decoding on inverse 1D bar codes.\n\n**Example Usage:**\n\n\t:::java\n\tINVERSE_1D_MODE.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default inverse 1D mode configured on device.\n* **DISABLED** - Disables decoding of inverse 1D symbologies.\n* **ENABLED** - Enables decoding of only inverse 1D symbologies.\n* **AUTO** - Allows decoding of both positive as well as inverse 1D symbologies.\n\n###ISBT128_CONTACT_MODE\nOption for concatenating pairs of ISBT128 code types.\n\n**Example Usage:**\n\n\t:::java\n\tISBT128_CONTACT_MODE.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default ISBT128 concatenation configured on device.\n* **NEVER** - Will ignore the barcode pair and only output decode data for only one of the barcodes.\n* **ALWAYS** - Will not decode if both the barcodes are not present or if one of them cannot be decoded. There must be two ISBT codes in order to decode and perform concatenation.\n* **AUTO** - Decodes and concatenates pairs of ISBT codes immediately. If only a single ISBT symbol is present, the device must decode the symbol the number of times set via DataWedge Configuration 4 - 1 1 Redundancy - Code128 before transmitting its data to confirm that there is no additional ISBT symbol.\n\n###LCD_MODE\nEnable or disable LCD mode (for Blockbuster imager devices only). LCD mode enhances the ability of the imager to read bar codes from LCD displays such as cellphones.\n\n**Example Usage:**\n\n\t:::java\n\tLCD_MODE.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default LCD mode configured on device.\n* **DISABLED** - Disables LCD mode.\n* **ENABLED** - Enables LCD mode.\n\n###LINEAR_SECURITY_LEVEL\nSets the number of times a bar code is read to confirm an accurate decode.\n\n**Example Usage:**\n\n\t:::java\n\tLINEAR_SECURITY_LEVEL.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default linear security level configured on device.\n* **SHORT_OR_CODABAR** - Two times read redundancy if short bar code or Codabar.\n* **ALL_TWICE** - Two times read redundancy for all bar codes (default).\n* **LONG_AND_SHORT** - Two times read redundancy for long bar codes, three times for short bar codes.\n* **ALL_THRICE** - Three times read redundancy for all bar codes.\n\n###PICK_LIST\nAllows the imager to decode only the bar code that is directly under the cross-hair/reticle (+) part of the pattern. This feature is useful in applications where multiple bar codes may appear in the field of view during a decode session and only one of them is tar geted for decode.\n\n**Example Usage:**\n\n\t:::java\n\tPICK_LIST.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default pick list configured on device.\n* **DISABLED** - Disables Picklist mode. Any bar code within the field of view can be decoded.\n* **ENABLED** - Enables the Picklist mode so that only the bar code that is directly under the cross-hair (reticle) is decoded. This is useful when used in conjunction with the static and dynamic reticle viewfinder modes. (Scan Module Only).\n* **CENTERED** - Enables the Picklist mode so that only the bar code in the center of the image is decoded. This is most useful when used in conjunction with the static and dynamic reticle viewfinder modes. Note: This mode is only valid for decoder modules that supports a viewfinder. If one tries to set this for a unsupported decoder then the device would issue an error. (Camera scanner only)\n\n###PREAMBLE\nControls the preamble applied to the bar code Preamble characters are part of the UPC symbol consisting of Country Code and System Character. Select the appropriate option to match the host system.\n\n**Example Usage:**\n\n\t:::java\n\tPREAMBLE.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default preamble configured on device.\n* **NONE** - No preamble.\n* **SYS_CHAR** - System character preamble.\n* **COUNTRY_AND_SYS_CHAR** - Both country and system code preamble.\n\n###SECURITY_LEVEL\nThe scanner offers four levels of decode security for UPC/EAN bar codes. Select higher security levels for lower quality bar codes. There is an inverse relationship between security and decode speed, so be sure to choose only that level of security necessary for the application.\n\n**Example Usage:**\n\n\t:::java\n\tCHECK_DIGIT_TYPE.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default security level configured on device.\n* **LEVEL_0** - This setting allows the scanner to operate fastest, while providing sufficient security in decoding \"in-spec\" UPC/EAN bar codes (default).\n* **LEVEL_1** - As bar code quality levels diminish, certain characters become prone to misdecodes before others (i.e., 1, 2, 7, 8). If the scanner is misdecoding poorly printed bar codes, and the misdecodes are limited to these characters, select this security level.\n* **LEVEL_2** - If the scanner is misdecoding poorly printed bar codes, and the misdecodes are not limited to characters 1, 2, 7, and 8, select this security level.\n* **LEVEL_3** - If the scanner is still misdecoding, select this security level. Be advised, selecting this option is an extreme measure against misdecoding severely out of spec bar codes. Selecting this level of security can significantly impair the decoding ability of the scanner. If this level of security is necessary, try to improve the quality of the bar codes.\n\n###SUPPLEMENTAL_MODE\nSupplemental modes.\n\n**Example Usage:**\n\n\t:::java\n\tSUPPLEMENTAL_MODE.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default supplemental mode configured on device.\n* **NO** - The scanner is presented with a UPC/EAN plus supplemental symbol, the scanner decodes UPC/EAN and ignores the supplemental characters.\n* **ALWAYS** - The scanner only decodes UPC/EAN symbols with supplemental characters, and ignores symbols without supplementals.\n* **AUTO** - The scanner decodes UPC/EAN symbols with supplemental characters immediately . If the symbol does not have a supplemental, the scanner must decode the bar code the number of times set via UPC/EAN Supplemental Redundancy before transmitting its data to confirm that there is no supplemental.\n* **SMART** - Enables smart supplementals. In this mode the decoder returns the decoded value of the main block right away if it does not belong to one of the following supplemental types: 378, 379, 977, 978, 979, 414, 419, 434 or 439. If the bar code starts with one of the prefixes it searches the image more aggressively for a supplemental. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n* **S_378_379** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 378 or 379. Disables reading of supplementals for any other UPC/EAN bar code not starting with 378 or 379. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n* **S_978_979** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 978 or 979. Disables reading of supplementals for another UPC/EAN bar code not starting with 978 or 979. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n* **S_414_419_434_439** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 414, 419, 434 or 439. Disables reading of supplementals for another UPC/EAN bar code 4 - 16 not starting with 414, 419, 434 or 439. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n* **S_977** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 977. Disables reading of supplementals for another UPC/EAN barcode not starting with 977. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\n###UCC_LINK_MODE\nDescribes the UCC link mode state.\n\n**Example Usage:**\n\n\t:::java\n\tUCC_LINK_MODE.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default UCC link mode configured on device.\n* **LINK_FLAG_IGNORED** - 1D component is transmitted regardless of whether a 2D component is detected.\n* **ALWAYS_LINKED** - 1D and the 2D components are transmitted. If 2D is not present, the 1D component is not transmitted.\n* **AUTO_DISCRIMINATE** - the digital scanner determines if there is a 2D portion, then transmits the 1D component, as well as the 2D portion if present (default). (default).\n\n###VERIFY_CHECK_DIGIT\nCheck the integrity of all Code 11 symbols to verify that the data complies with the specified check digit algorithm. This selects the check digit mechanism for the decoded Code 11 bar code.\n\n**Example Usage:**\n\n\t:::java\n\tVERIFY_CHECK_DIGIT.DEFAULT;\n\n\n**Values:**\n\n* **DEFAULT** - Default verify check digit scheme configured on device.\n* **NO** - Do not verify check digit.\n* **ONE** - Bar code contains one check digit.\n* **TWO** - Bar code contains two check digits.\n\n###VIEWFINDER_MODE\nConfigures the Viewfinder modes supported for camera scanning.\n\n**Example Usage:**\n\n\t:::java\n\tVIEWFINDER_MODE.ENABLED;\n\n\n**Values:**\n\n* **DEFAULT** - Default view finder mode configured on the device.\n* **DISABLED** - Viewfinder disabled. Viewfinder is not displayed during aiming or scanning.\n* **ENABLED** - Viewfinder enabled. Displays the images captured by the camera on the screen.\n* **STATIC_RECTICLE** - Viewfinder enabled with locate reticle. Displays the viewfinder as well as draws a red reticle in the center of the screen which helps with tracking the barcode.\n"},{"key":"api-ProfileManager","name":"ProfileManager","md":"#ProfileManager\nThis class handles all the profile related functions.\n\n**Example Usage:**\n\n\t:::java\n\t@Override\n\tpublic void onOpened(EMDKManager emdkmanager)\n\t{\n\tProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);\n\t}\n\n**Version:**\n\n2.0\n\n##Public Methods\n\n###processProfile(String profileName, ProfileManager.PROFILE_FLAG profileFlag, Document extraData)\nProcesses the given profile based on the data provided and the flag and return status of the action.\n\n**Example Usage:**\n\n\t:::java\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument extraData;\n\textraData = db.newDocument();\n\tprofileManager.processProfile(\"Profile1\", PROFILE_FLAG.GET, extraData);\n\n**Parameters:**\n\n* **profileName** - Name of the profile. ex: 'Profile1'.\n\t* You can also specify just part of the profile when a fully qualified name of the following format is given: `[profileName][featureType][name in profile parameter]` to just edit part of the profile. For example, if my profile is called 'Profile1' and the name in profile parameter is 'myName'. Passing 'profileName' as 'Profile1/ActivitySelection/myName' will just process this part of the profile.\n\t* Valid `[featureType]`: ActivitySelection, Barcode, MSR, Intent, Keystroke, IP.\n\n* **profileFlag** - [ProfileManager.PROFILE_FLAG](#api-ProfileManager?PROFILE_FLAG) If the profileFlag is set to SET, and if the given profile is not available in the EMDKConfig.xml, it will look for valid profile in extraData argument and if present, the profile will be added to the internal XML volatile repository and also applied to the device. If the profile is present in the EMDKConfig.xml, it will be applied to the device. If profileFlag is set to GET and if the profile is present in the internal repository, it will be returned in extraData.\n\n* **extraData** - This can be used to provide data for processing action. This parameter is only supported for DataCapture profile features.\n\n**Returns:**\n\ncom.symbol.emdk.EMDKResults - [EMDKResults](#api-EMDKResults) object.\n\n###processProfile(String profileName, ProfileManager.PROFILE_FLAG profileFlag, java.lang.String[] extraData)\nProcesses the given profile based on the data provided and the flag and return status of the action.\n\n**Example Usage:**\n\n\t:::java\n\tprofileManager.processProfile(\"Profile1\", PROFILE_FLAG.GET, new String[]{\"\"});\n\n**Parameters:**\n\n* **profileName** - Name of the profile. ex: 'Profile1'\n\t* You can also specify just part of the profile when a fully qualified name of the following format is given: `[profileName][featureType][name in profile parameter]` to just edit part of the profile. For example, if my profile is called 'Profile1' and the name in profile parameter is 'myName'. Passing 'profileName' as 'Profile1/ActivitySelection/myName' will just process this part of the profile.\n\t* Valid `[featureType]`:\tActivitySelection, Barcode, MSR, Intent, Keystroke, IP, Clock, PowerMgr, PersistMgr, CertMgr, AppMgr, AccessMgr, Wi-Fi, GprsMgr\n\n* **profileFlag** - [ProfileManager.PROFILE_FLAG](#api-ProfileManager?PROFILE_FLAG) If the profileFlag is set to SET, and if the given profile is not available in the EMDKConfig.xml, it will look for valid profile in extraData argument and if present, the profile will be added to the internal XML volatile repository and also applied to the device. If the profile is present in the EMDKConfig.xml, it will be applied to the device. If profileFlag is set to GET and if the profile is present in the internal repository, it will be returned in extraData.\n\n* **extraData** - This can be used to provide data for processing action. \n\n**Returns:**\n\ncom.symbol.emdk.EMDKResults - [EMDKResults](#api-EMDKResults) object.\n\n###processProfile(String profileName, ProfileManager.PROFILE_FLAG profileFlag, ProfileConfig extraData)\nProcesses the given profile based on the data provided and the flag and return status of the action.\n\n**Example Usage:**\n\n\t:::java\n\t//Create the ProfileConfig object\n\tProfileConfig profileConfigObj = new ProfileConfig();\n\t//Get the ProfileConfig from the profile XML\n\tEMDKResults results = mProfileManager.processProfile(profileName, ProfileManager.PROFILE_FLAG.GET, profileConfigObj);\n\t//Set the code128\n\tprofileConfigObj.dataCapture.barcode.decoders.code128 = ENABLED_STATE.TRUE;\n\t//call processPrfoile with profile name, SET flag and config data to update the profile\n\tEMDKResults results = mProfileManager.processProfile(profileName, ProfileManager.PROFILE_FLAG.SET, profileConfigObj);\n\n**Parameters:**\n\n* **profileName** - Name of the profile. ex: 'Profile1'\n\t* You can also specify just part of the profile when a fully qualified name of the following format is given: `[profileName][featureType][name in profile parameter]` to just edit part of the profile. For example, if my profile is called 'Profile1' and the name in profile parameter is 'myName'. Passing 'profileName' as 'Profile1/ActivitySelection/myName' will just process this part of the profile.\n\t* Valid `[featureType]`:\tActivitySelection, Barcode, MSR, Intent, Keystroke, IP\n\n* **profileFlag** - [ProfileManager.PROFILE_FLAG](#api-ProfileManager?PROFILE_FLAG) If the profileFlag is set to SET, and if the given profile is not available in the EMDKConfig.xml, it will look for valid profile in extraData argument and if present, the profile will be added to the internal XML volatile repository and also applied to the device. If the profile is present in the EMDKConfig.xml, it will be applied to the device. If profileFlag is set to GET and if the profile is present in the internal repository, it will be returned in extraData.\n* **extraData** - [ProfileConfig](#api-ProfileConfig) This can be used to provide data for processing action. This parameter is only supported for DataCapture profile features.\n\n**Returns:**\n\ncom.symbol.emdk.EMDKResults - [EMDKResults](#api-EMDKResults) object.\n\n##Public Enums\n\n###ProfileManager.PROFILE_FLAG\nAll the possible actions for [ProfileManager.processProfile(String, PROFILE_FLAG, Document)](#api-ProfileManager?processProfile(String, PROFILE_FLAG, Document)) and [ProfileManager.processProfile(String, PROFILE_FLAG, String[])](#api-ProfileManager?processProfile(String, PROFILE_FLAG, String[]))is enumerated here.\n\n**Example Usage:**\n\n\t:::java\n\tPROFILE_FLAG.SET\n\n**Values:**\n\n* **SET** - Creates a profile with given XML data. If the profile is already created, this activates the profile if it is not bound to any activity.\n* **GET** - Retrieves a profile from the EMDK internal repository. \n\n"},{"key":"api-ScanDataCollection","name":"ScanDataCollection","md":"#ScanDataCollection\n\nThe ScanDataCollection object gives scanning result and the collection of [ScanData](#api-Collection-ScanData).\n\n**Example Usage:**\n\n\t:::java\n\tOverride:\n    public void onData(ScanDataCollection scanDataCollection)\n    { \n      if(scanDataCollection != null && scanDataCollection.getResult() == SCANNER_RESULTS.SUCCESS) { \n       ArrayList<ScanData> scanData = scanDataCollection.getScanData(); \n       for(ScanData data : scanData ) { \n        String barcodeDate = data.getData(); \n        LABEL_TYPE labelType = data.getLabelType(); \n        String timeStamp = scanData.getTimeStamp(); \n       } \n      }  \n    }\n\n**Version:**\n\n3.0\n\n##Public Methods\n###getFriendlyName()\nReturns the friendly name of scanner for which the data is returned.\n\n**Returns:**\n\njava.lang.String - Returns scanner index to the supported devices list.\n\n###getResult()\nThis method used to obtain the scanned result.\n\n**Example Usage:**\n\n\t:::java\n\tScannerResults results = scanDataCollection.getResult();\n\n**Returns:**\n\ncom.symbol.emdk.barcode.BarcodeManager.ScannerResults - EMDKResults object\n\n###getScanData()\nThis method is used to obtain the scanned data list.\n\n**Example Usage:**\n\n\t:::java\n\tArrayList<ScanData> scanDataList = scanDataCollection.getScanData();\n\n**Returns:**\n\njava.util.ArrayList&lt;[com.symbol.emdk.barcode.ScanDataCollection.ScanData](#api-Collection-ScanData)&gt; - Returns the collection of scan data.\n\n##Public Enums\n###ScanDataCollection.LabelType\nList of label types of the scanner data.\n\n**Example Usage:**\n\n\t:::java\n\tLABEL_TYPE.CODE39\n\n**Values:**\n\n**AUSPOSTAL** - The AUSTRALIAN POSTAL symbology.\n\n**AZTEC** - The AZTEC symbology\n\n**BOOKLAND** - The BOOKLAND EAN symbology.\n\n**CANPOSTAL** - The CANADIAN POSTAL symbology.\n\n**CHINESE_2OF5** - The CHINESE_2OF5 symbology.\n\n**CODABAR** - The CODABAR symbology.\n\n**CODE11** - The CODE-11 symbology.\n\n**CODE128** - The CODE-128 symbology.\n\n**CODE32** - The CODE-32 symbology.\n\n**CODE39** - The CODE-39 symbology.\n\n**CODE93** - The CODE-93 symbology.\n\n**COMPOSITE_AB** - The COMPOSITE AB symbology.\n\n**COMPOSITE_C** - The COMPOSITE C symbology.\n\n**COUPON** - The COUPON CODE symbology.\n\n**D2OF5** - The Discrete 2 of 5 symbology.\n\n**DATAMATRIX** - The DATAMATRIX symbology.\n\n**DUTCHPOSTAL** - The DUTCH POSTAL symbology.\n\n**DATABAR_COUPON** - The databar coupon symbology.\n\n**EAN128** - The EAN-128 symbology.\n\n**EAN13** - The EAN-13 symbology.\n\n**EAN8** - The EAN-8 symbology.\n\n**GS1_DATABAR** - The GS1_DATABAR symbology.\n\n**GS1_DATABAR_EXP** - The GS1_DATABAR_EXP symbology.\n\n**GS1_DATABAR_LIM** - The GS1_DATABAR_LIM symbology.\n\n**I2OF5** - The Interleaved 2 of 5 symbology.\n\n**IATA2OF5** - The IATA 2 of 5 symbology.\n\n**ISBT128** - The ISBT 128 symbology.\n\n**JAPPOSTAL** - The JAPANESE POSTAL symbology.\n\n**KOREAN_3OF5** - The KOREAN 3OF5 symbology.\n\n**MATRIX_2OF5** - The MATRIX 2OF5 symbology.\n\n**MAXICODE** - The MAXICODE symbology.\n\n**MICROPDF** - The MICRO PDF symbology.\n\n**MICROQR** - The MICRO QR symbology.\n\n**MSI** - The MSI symbology.\n\n**OCR** - The OCR symbology.\n\n**PDF417** - The PDF 417 symbology.\n\n**QRCODE** - The QRCODE symbology.\n\n**SIGNATURE** - The Signature symbology.\n\n**TLC39** - The TCIF Linked CODE 39 symbology.\n\n**TRIOPTIC39** - The TRIOPTIC 3 of 9 symbology.\n\n**UKPOSTAL** - The UK POSTAL symbology.\n\n**UPCA** - The UPC-A symbology.\n\n**UPCE0** - The UPC-E0 symbology.\n\n**UPCE1** - The UPC-E1 symbology.\n\n**US4STATE** - The US4STATE symbology.\n\n**US4STATE_FICS** - The US4STATE_FICS symbology\n\n**USPLANET** - The US PLANET symbology.\n\n**USPOSTNET** - The US POSTNET symbology.\n\n**WEBCODE** - The Scanlet WEBCODE symbology.\n\n**UNDEFINED** - The Symbology is unknown or not defined.\n\n\n"},{"key":"api-Scanner-DataListener","name":"Scanner.DataListener","md":"#Scanner.DataListener\n\nAn interface for notifying client applications when the scan data is available.  \n\n**Example Usage:**\n\n    :::java\n    public class MainActivity extends Activity implements DataListener\n     .. \n     .. \n     ..\n\n##Public Methods\n###onData(ScanDataCollection scanDataCollection)\nThis is the callback method upon data availability.\n\n**Parameters:**\n\n**scanDataCollection** - Collection of scan data.\n\n**Returns:**\n\nvoid\n"},{"key":"api-Scanner-StatusListener","name":"Scanner.StatusListener","md":"#Scanner.StatusListener\n\nAn interface for notifying client applications to notify scan events.  \n\n**Example Usage:**\n\n    :::java\n    public class MainActivity extends Activity implements StatusListener\n     .. \n     .. \n     ..\n\n##Public Methods\n###onStatus(StatusData statusData)\nThis is the callback method upon scan status event occurs.\n\n**Parameters:**\n\n**statusData** - StatusData object.\n\n**Returns:**\n\nvoid\n"},{"key":"api-Scanner","name":"Scanner","md":"#Scanner\n\nScanner class will represent and provides access to the physical scanner device.  \n\n**Example Usage:**\n\n\t:::java\n\tScanner scanner = barcodeManager.getDevice(DeviceIdentifer.DEFAULT); \n    scanner.enable(); \n    scanner.addDataListener(this); \n    scanner.read(); \n    scanner.cancelRead(); \n    scanner.disable();\n\n**Version:**\n\n3.0\n\n##Public Methods\n###addDataListener(Scanner.DataListener listener)\nThe client can register to get data notification via callbacks.\n\n**Parameters:**\n\n**listener** - The DataListener callabck object.\n\n**Returns:**\n\nvoid\n\n###addStatusListener(Scanner.StatusListener listener)\nThe client can register to get status notification via callbacks.\n\n**Parameters:**\n\n**listener**\n\n**Returns:**\n\nvoid\n\n###cancelRead()\nThis Cancels any pending asynchronous read() calls.\n\n**Example Usage:**\n\n\t:::java\n\tscanner.cancelRead();\n\n**Returns:**\n\nvoid\n\n**Throws:**\n\nScannerException The exception will thrown if error occurs during the cancelRead request.\n\n###disable()\nDisables the scanner hardware. Any pending scanned data will be lost. This method releases the scanner hardware resources for other application to use. You must call this as soon as you're done with the scanning.\n\n**Example Usage:**\n\n    :::java\n    scanner.disable();\n\n**Returns:**\n\nvoid\n\n**Throws:**\n\nScannerException The exception will thrown if the scanner disable fails.\n\n###enable()\nEnables the scanner hardware. This method does not make the scanner to scan or turn on the laser. If the same of scanner is enabled by other applications, this will throws ScannerExceptions. You must call disable() when you are done the scanning, otherwise it will remain locked and be unavailable to other applications. \n\n**Example Usage:**\n\n    :::java\n    scanner.enable();\n\n**Returns:**\n\nvoid\n\n**Throws:**\n\nScannerException The exception will thrown if the scanner enable fails.\n\n###getConfig()\nGets the current configuration settings for this scanner device. If modifications are made to the returned ScannerConfig object, the Scanner.setConfig(ScannerConfig) must be called to take effect. Scanner must be enabled before calling getConfig(). \n\n**Example Usage:**\n\n    :::java\n    scanner.enable(); \n    ScannerConfig config = scanner.getConfig();\n\n**Returns:**\n\ncom.symbol.emdk.barcode.ScannerConfig - scannerConfig The valid scanner configuration object will be returned on successful get.\n\n**Throws:**\n\nScannerException\n\n###getScannerInfo()\nReturns information about the scanner device. \n\n**Returns:**\n\ncom.symbol.emdk.barcode.ScannerInfo - Returns the ScannerInfo object.\n\n###isEnabled() \n\n**Returns:**\n\nboolean\n\n###isReleased()\nReturns scanner object state.\n\n**Returns:**\n\nboolean - boolean Object state.\n\n###isReadPending()\nAnother read() cannot be submitted while a read is pending.\n\n**Returns:**\n\nboolean - Returns true if a read is pending.\n\n###read()\nStarts an asynchronous Scan. The method will not turn on the scanner. It will, however, put the scanner in a state in which the scanner can be turned ON either by pressing a hardware trigger or can be turned ON automatically. This is determined by the Scanner.triggerType. The data notification must registered in order to scan and get the Scan Data. The read request can be cancelled by issuing a cancelRead.\n\nIf a read() is submitted while another read is pending, the method call will fail. It is recommended to  check whether a read is pending by calling isReadPending() before submitting a read(). A read() can also be submitted from within onData and onStatus events. If called within onStatus, it should be called only when IDLE status is received.  If called within onData, then checking for isReadPending() is recommended.\n\n**Example Usage:**\n\n    :::java\n    scanner.read();\n\nthrows ScannerException The exception will thrown if error occurs during the read request.\n\n**Returns:**\n\nvoid\n\n###removeDataListener(Scanner.DataListener listener)\nThe client can un-register to get data notification via callbacks.\n\n**Parameters:**\n\n**listener**\n\n**Returns:**\n\nvoid\n\n###removeStatusListener(Scanner.StatusListener listener)\nThe client can un-register to get status notification via callbacks.\n\n**Parameters:**\n\n**listener**\n\n**Returns:**\n\nvoid\n\n###setConfig(ScannerConfig scannerConfig)\nChanges the settings for this scanner device. The unsupported parameters will be ignored. This method skips the unsupported parameters and continues with setting the supported values.\n\n**Example Usage:**\n\n    :::java\n    ScannerConfig scannerConfig = scanner.getConfig();\n    scannerConfig.scanParams.decodeLEDTime = 10; \n    scanner.setConfig(scannerConfig);\n\n**Parameters:**\n\n**scannerConfig** - The Parameters to use for this scanner device.\n\n**Returns:**\n\nvoid\n\n**Throws:**\n\nScannerException Exception will be throw if any error occurs while setting the parameters.\n  \n##Public Fields\n###triggerType\nSpecifies the trigger type for the scanner. It is set to HARD by default.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[Scanner.TriggerType](#api-Scanner?Scanner.TriggerType)\n\n##Public Enums\n###Scanner.TriggerType\nList of supported trigger type\n\n**Values:**\n\n**HARD** - Hard trigger. When this mode is set, the user has to manually press the trigger on the device after issuing the read call.\n\n**SOFT_ONCE** - Soft trigger is used only once for a pending read or for the next issued read. When this mode is set, the scan beam will come up automatically without having to press the trigger on the device after issuing the read call.\n\n**SOFT_ALWAYS** - Soft trigger is used for all pending scans and for future reads issued. When this mode is set, the scan beam will come up automatically without having to press the trigger on the device.\n"},{"key":"api-ScannerConfig-DecoderParams-AustralianPostal","name":"ScannerConfig.DecoderParams.AustralianPostal","md":"#ScannerConfig.DecoderParams.AustralianPostal\n\nThe AustralianPostal class provides access to parameters that are available for the AustralianPostal decoder."},{"key":"api-ScannerConfig-DecoderParams-Aztec","name":"ScannerConfig.DecoderParams.Aztec","md":"#ScannerConfig.DecoderParams.Aztec\n\nThe Aztec class provides access to parameters that are available for the Aztec decoder."},{"key":"api-ScannerConfig-DecoderParams-BaseDecoder","name":"ScannerConfig.DecoderParams.BaseDecoder","md":"#ScannerConfig.DecoderParams.BaseDecoder\n\nThe BaseDecoder class is the parent decoder to all decoders and is inherited by all decoders.\n\n##Constructors\n###BaseDecoder()\n\n##Public Fields\n###enabled\nReturns whether or not the Decoder is currently enabled.\n\n**Type:**\n\nboolean\n"},{"key":"api-ScannerConfig-DecoderParams-CanadianPostal","name":"ScannerConfig.DecoderParams.CanadianPostal","md":"#ScannerConfig.DecoderParams.CanadianPostal\n\nThe CanadianPostal class provides access to parameters that are available for the CanadianPostal decoder.\n"},{"key":"api-ScannerConfig-DecoderParams-Chinese2of5","name":"ScannerConfig.DecoderParams.Chinese2of5","md":"#ScannerConfig.DecoderParams.Chinese2of5\n\nThe Chinese2of5 class provides access to parameters that are available for the Chinese2of5 decoder.\n"},{"key":"api-ScannerConfig-DecoderParams-CodaBar","name":"ScannerConfig.DecoderParams.CodaBar","md":"#ScannerConfig.DecoderParams.CodaBar\n\nThe CodaBar class provides access to parameters that are available for the CodaBar decoder.\n\n##Public Fields\n###clsiEditing\nEnable this parameter to strip the start and stop characters and insert a space after the first, fifth, and tenth characters of a 14-character Codabar symbol. Enable this feature if the host system requires this data format. \n\n**Example Usage:**\n\n    :::java\n    codabar.clsi_editing = true;\n\n**Type:**\n\nboolean\n\n###length1\nUse to set decode lengths. The supported range is 0 to 55. \n\n**Example Usage:**\n\n    :::java\n    codabar.length1 = 6;\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths. The supported range is 0 to 55.\n\n**Example Usage:**\n\n    :::java\n    codabar.length2 = 55;\n\n**Type:**\n\nint\n\n###notisEditing\nEnable this parameter to strip the start and stop characters from a decoded Codabar symbol. Enable this feature if the host system requires this data format.\n\n**Example Usage:**\n\n    :::java\n    codabar.notis_editing = true; \n\n**Type:**\n\nboolean\n\n###redundancy\nSets the reader to read the bar code twice before accepting data.\n\n**Example Usage:**\n\n    :::java\n    codabar.redundancy = true;\n\n**Type:**\n\nboolean\n"},{"key":"api-ScannerConfig-DecoderParams-Code11","name":"ScannerConfig.DecoderParams.Code11","md":"#ScannerConfig.DecoderParams.Code11\n\nThe Code11 class provides access to parameters that are available for the Code11 decoder.\n\n##Public Fields\n###length1\nUse to set decode length. The supported range is 0 to 55. \n\n**Example Usage:**\n\n    :::java\n    code11.length1 = 4;\n\n**Type:**\n\nint\n\n###length2\nUse to set decode length. The supported range is 0 to 55. \n\n**Example Usage:**\n\n    :::java\n    code11.length2 = 55;\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data.\n\n**Example Usage:**\n\n    :::java\n    code11.redundancy = true;\n\n**Type:**\n\nboolean\n\n###reportCheckDigit\nTransmit Code 11 data with or without the check digit.\n\n**Example Usage:**\n\n    :::java\n    code11.reportCheckDigit = false; \n\n**Type:**\n\nboolean\n\n###verifyCheckDigit\nCheck the integrity of all Code 11 symbols to verify that the data complies with the specified check digit algorithm. This selects the check digit mechanism for the decoded Code 11 bar code. Use enum [ScannerConfig.VerifyCheckDigit](#api-ScannerConfig?ScannerConfig.VerifyCheckDigit).\n\n**Example Usage:**\n\n    :::java\n    code11.verifyCheckDigit = VerifyCheckDigit.NO;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.VerifyCheckDigit](#api-ScannerConfig?ScannerConfig.VerifyCheckDigit)\n"},{"key":"api-ScannerConfig-DecoderParams-Code128","name":"ScannerConfig.DecoderParams.Code128","md":"#ScannerConfig.DecoderParams.Code128\n\nThe Code128 class provides access to parameters that are available for the Code128 decoder.\n\n##Public Fields\n###checkIsbtTable\nThe ISBT specification includes a table that lists several types of ISBT bar codes that are commonly used in pairs. If ISBT128 Concat Mode is set, enable Check ISBT T able to concatenate only those pairs found in this table. Other types of ISBT codes are not concatenated. \n\n**Example Usage:**\n\n    :::java\n    code128.checkIsbtTable = true;\n\n**Type:**\n\nboolean\n\n###enableEan128\nFlag to enable EAN128 subtype. \n\n**Example Usage:**\n\n    :::java\n    code128.enableEan128 = true;\n\n**Type:**\n\nboolean\n\n###enableIsbt128\nFlag to enable ISBT128.\n\n**Example Usage:**\n\n    :::java\n    code128.enableIsbt128 = true;\n\n**Type:**\n\nboolean\n\n###enablePlain\nFlag to enable other sub types besides GS1-128 and ISBT-128. \n\n**Example Usage:**\n\n    :::java\n    code128.enablePlain = false; \n\n**Type:**\n\nboolean\n\n###isbt128ConcatMode\nSelect an option for concatenating pairs of ISBT code types. Use enum [ScannerConfig.Isbt128ContactMode](#api-ScannerConfig?ScannerConfig.Isbt128ContactMode).\n\n**Example Usage:**\n\n    :::java\n    code128.isbt128ConcatMode = Isbt128ContactMode.NONE;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.Isbt128ContactMode](#api-ScannerConfig?ScannerConfig.Isbt128ContactMode)\n\n###length1\nUse to set decode lengths. The supported range is 0 to 55. \n\n**Example Usage:**\n\n    :::java\n    int length1 = code128.length1;\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths. The supported range is 0 to 55.  \n\n**Example Usage:**\n\n    :::java\n    int length2 = code128.length2;\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data.  \n\n**Example Usage:**\n\n    :::java\n    code128.redundancy = true;\n\n**Type:**\n\nboolean\n\n###securityLevel\nThe scanner of fers four levels of decode security for Code 128 bar codes. Select increasing levels of security for decreasing levels of bar code quality. There is an inverse relationship between security and scanner aggressiveness, so choose only that level of security necessary for any given application. Use enum [ScannerConfig.SecurityLevel](#api-ScannerConfig?ScannerConfig.SecurityLevel).  \n\n**Example Usage:**\n\n    :::java\n    code128.securityLevel = SecurityLevel.LEVEL_0;\n\n**Type:**\n\ncom.symbol.emdk.barcode.ScannerConfig.SecurityLevel"},{"key":"api-ScannerConfig-DecoderParams-Code39","name":"ScannerConfig.DecoderParams.Code39","md":"#ScannerConfig.DecoderParams.Code39\n\nThe Code39 class provides access to parameters that are available for the Code39 decoder.\n\n##Public Fields\n###convertToCode32\nCode 32 is a variant of Code 39 used by the Italian pharmaceutical industry. \n\n**Example Usage:**\n\n    :::java\n    code39.convertToCode32 = true;\n\n**Type:**\n\nboolean\n\n###fullAscii\nCode 39 Full ASCII is a variant of Code 39 that pairs characters to encode the full ASCII character set. \n\n**Example Usage:**\n\n    :::java\n    code39.fullAscii = true;\n\n**Type:**\n\nboolean\n\n###length1\nUse to set decode lengths. The valid range is 0 to 55.\n\n**Example Usage:**\n\n    :::java\n    code39.length1 = 0;\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths. The valid range is 0 to 55. \n\n**Example Usage:**\n\n    :::java\n    code39.length2 = 55; \n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data.\n\n**Example Usage:**\n\n    :::java\n    code39.redundancy = true;\n\n**Type:**\n\nboolean\n\n###reportCheckDigit\nTransmit Code 39 data with or without the check digit. \n\n**Example Usage:**\n\n    :::java\n    code39.reportCheckDigit = true;\n\n**Type:**\n\nboolean\n\n###reportCode32Prefix\nScan the appropriate bar code to enable or disable adding the prefix character \"A\" to all Code 32 bar codes.  \n\n**Example Usage:**\n\n    :::java\n    code39.reportCode32Prefix = true;\n\n**Type:**\n\nboolean\n\n###securityLevel\nOptions: Security level 0 , Security Level 1 , Security Level 2 and Security Level 3. Use enum [ScannerConfig.SecurityLevel](#api-ScannerConfig?ScannerConfig.SecurityLevel).  \n\n**Example Usage:**\n\n    :::java\n    code39.securityLevel = SecurityLevel.LEVEL_1;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.SecurityLevel](#api-ScannerConfig?ScannerConfig.SecurityLevel)\n\n###verifyCheckDigit\nEnable this feature to check the integrity of all Code 39 symbols to verify that the data complies with a specified check digit algorithm. The digital scanner decodes only those Code 39 symbols that include a modulo 43 check digit. Enable this feature only if the Code 39 symbols contain a modulo 43 check digit.  \n\n**Example Usage:**\n\n    :::java\n    code39.verifyCheckDigit = false;\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-Code93","name":"ScannerConfig.DecoderParams.Code93","md":"#ScannerConfig.DecoderParams.Code93\n\nThe Code93 class provides access to parameters that are available for the Code93 decoder.\n\n##Public Fields\n###length1\nUse to set decode lengths. The valid range is 0 to 55. \n\n**Example Usage:**\n\n    :::java\n    int length1 = 0;\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths. The valid range is 0 to 55. \n\n**Example Usage:**\n\n    :::java\n    code93.length2 = 55;\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data.\n\n**Example Usage:**\n\n    :::java\n    code93.redundancy = true;\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-CompositeAB","name":"ScannerConfig.DecoderParams.CompositeAB","md":"#ScannerConfig.DecoderParams.CompositeAB\n\nThe CompositeAB class provides access to parameters that are available for the CompositeAB decoder.\n\n##Public Fields\n###uccLinkMode\nGets and Sets UCC Link Mode using [ScannerConfig.UccLinkMode](#api-ScannerConfig?ScannerConfig.UccLinkMode) enum; \n\n**Example Usage:**\n\n    :::java\n    compositeAB.uccLinkMode = UccLinkMode.ALWAYS_LINKED;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.UccLinkMode](#api-ScannerConfig?ScannerConfig.UccLinkMode)"},{"key":"api-ScannerConfig-DecoderParams-CompositeC","name":"ScannerConfig.DecoderParams.CompositeC","md":"#ScannerConfig.DecoderParams.CompositeC\n\nThe CompositeC class provides access to parameters that are available for the CompositeC decoder."},{"key":"api-ScannerConfig-DecoderParams-D2of5","name":"ScannerConfig.DecoderParams.D2of5","md":"#ScannerConfig.DecoderParams.D2of5\n\nThe D2OF5 class provides access to parameters that are available for the D2OF5 decoder.\n\n##Public Fields\n###length1\nUsed to set decode lengths. The valid range is 0 to 55.\n\n**Example Usage:**\n\n    :::java\n    d2of5.length1 = 0;\n\n**Type:**\n\nint\n\n###length2\nUsed to set decode lengths. The valid range is 0 to 55.\n\n**Example Usage:**\n\n    :::java\n    d2of5.length2 = 14;\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data.\n\n**Example Usage:**\n\n    :::java\n    d2of5.redundancy = true;\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-DataMatrix","name":"ScannerConfig.DecoderParams.DataMatrix","md":"#ScannerConfig.DecoderParams.DataMatrix\n\nThe DataMatrix class provides access to parameters that are available for the DataMatrix decoder."},{"key":"api-ScannerConfig-DecoderParams-DutchPostal","name":"ScannerConfig.DecoderParams.DutchPostal","md":"#ScannerConfig.DecoderParams.DutchPostal\n\nThe DutchPostal class provides access to parameters that are available for the DutchPostal decoder."},{"key":"api-ScannerConfig-DecoderParams-Ean13","name":"ScannerConfig.DecoderParams.Ean13","md":"#ScannerConfig.DecoderParams.Ean13\n\nThe Ean13 class provides access to parameters that are available for the Ean13 decoder."},{"key":"api-ScannerConfig-DecoderParams-Ean8","name":"ScannerConfig.DecoderParams.Ean8","md":"#ScannerConfig.DecoderParams.Ean8\n\nThe Ean8 class provides access to parameters that are available for the Ean8 decoder."},{"key":"api-ScannerConfig-DecoderParams-Gs1Databar","name":"ScannerConfig.DecoderParams.Gs1Databar","md":"#ScannerConfig.DecoderParams.Gs1Databar\n\nThe Gs1Databar class provides access to parameters that are available for the GS1 Databar decoder."},{"key":"api-ScannerConfig-DecoderParams-Gs1DatabarExp","name":"ScannerConfig.DecoderParams.Gs1DatabarExp","md":"#ScannerConfig.DecoderParams.Gs1DatabarExp\n\nThe Gs1DatabarExp class provides access to parameters that are available for the GS1 Databar Exp decoder."},{"key":"api-ScannerConfig-DecoderParams-Gs1DatabarLim","name":"ScannerConfig.DecoderParams.Gs1DatabarLim","md":"#ScannerConfig.DecoderParams.Gs1DatabarLim\n\nThe Gs1DatabarLim class provides access to parameters that are available for the GS1 Databar Lim decoder."},{"key":"api-ScannerConfig-DecoderParams-I2of5","name":"ScannerConfig.DecoderParams.I2of5","md":"#ScannerConfig.DecoderParams.I2of5\n\nThe I2of5 class provides access to parameters that are available for the I2of5 decoder.\n\n##Public Fields\n###convertToEan13\nConvert 14-character Interleaved 2 of 5 bar codes to EAN-13, and transmit as EAN-13. The Interleaved 2 of 5 bar code must be enabled and must have a leading zero and a valid EAN-13 check digit.\n\n**Example Usage:**\n\n    :::java\n    i2of5.convertToEan13 = true;\n\n**Type:**\n\nboolean\n\n###length1\nUse to set decode lengths. The valid range is 0 to 55.\n\n**Example Usage:**\n\n    :::java\n    i2of5.length1 = 14;\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths. The valid range is 0 to 55.\n\n**Example Usage:**\n\n    :::java\n    i2of5.length2 = 10;\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data.\n\n**Example Usage:**\n\n    :::java\n    i2of5.redundancy = true;\n\n**Type:**\n\nboolean\n\n###reportCheckDigit\nTransmit Interleaved 2 of 5 data with or without the check digit.\n\n**Example Usage:**\n\n    :::java\n    i2of5.reportCheckDigit = true;\n\n**Type:**\n\nboolean\n\n###securityLevel\nSpecifies security level Use enum [ScannerConfig.SecurityLevel](#api-ScannerConfig?ScannerConfig.SecurityLevel).\n\n**Example Usage:**\n\n    :::java\n    i2of5.securityLevel = SecurityLevel.LEVEL_1;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.SecurityLevel](#api-ScannerConfig?ScannerConfig.SecurityLevel)\n\n###verifyCheckDigit\nThe check digit type to verify. Use enum [ScannerConfig.CheckDigitType](#api-ScannerConfig?ScannerConfig.CheckDigitType).\n\n**Example Usage:**\n\n    :::java\n    i2of5.verifyCheckDigit = CHECK_DIGIT_TYPE.NO;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.CheckDigitType](#api-ScannerConfig?ScannerConfig.CheckDigitType)"},{"key":"api-ScannerConfig-DecoderParams-JapanesePostal","name":"ScannerConfig.DecoderParams.JapanesePostal","md":"#ScannerConfig.DecoderParams.JapanesePostal\n\nThe JapanesePostal class provides access to parameters that are available for the JapanesePostal decoder."},{"key":"api-ScannerConfig-DecoderParams-Korean3of5","name":"ScannerConfig.DecoderParams.Korean3of5","md":"#ScannerConfig.DecoderParams.Korean3of5\n\nThe Korean3of5 class provides access to parameters that are available for the Korean3of5 decoder."},{"key":"api-ScannerConfig-DecoderParams-Matrix2of5","name":"ScannerConfig.DecoderParams.Matrix2of5","md":"#ScannerConfig.DecoderParams.Matrix2of5\n\nThe Matrix2of5 class provides access to parameters that are available for the Matrix2of5 decoder.\n\n##Public Fields\n###length1\nUsed to set decode lengths. The valid range is 0 to 55.\n\n**Example Usage:**\n\n    :::java\n    matrix2of5.length1 = 10;\n\n**Type:**\n\nint\n\n###length2\nUsed to set decode lengths. The valid range is 0 to 55.\n\n**Example Usage:**\n\n    :::java\n    matrix2of5.length2 = 0;\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data.\n\n**Example Usage:**\n\n    :::java\n    matrix2of5.redundancy = false;\n\n**Type:**\n\nboolean\n\n###reportCheckDigit\nTransmit Matrix 2 of 5 data with or without the check digit.\n\n**Example Usage:**\n\n    :::java\n    matrix2of5.reportCheckDigit = true;\n\n**Type:**\n\nboolean\n\n###verifyCheckDigit\nEnable this feature to check the integrity of all Matrix 2 of 5 symbols to verify that the data complies with a specified check digit algorithm.\n\n**Example Usage:**\n\n    :::java\n    matrix2of5.verifyCheckDigit = true;\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-MaxiCode","name":"ScannerConfig.DecoderParams.MaxiCode","md":"#ScannerConfig.DecoderParams.MaxiCode\n\nThe MaxiCode class provides access to parameters that are available for the MaxiCode decoder."},{"key":"api-ScannerConfig-DecoderParams-MicroPdf","name":"ScannerConfig.DecoderParams.MicroPdf","md":"#ScannerConfig.DecoderParams.MicroPdf\n\nThe MicroPdf class provides access to parameters that are available for the MicroPdf decoder."},{"key":"api-ScannerConfig-DecoderParams-MicroQr","name":"ScannerConfig.DecoderParams.MicroQr","md":"#ScannerConfig.DecoderParams.MicroQr\n\nThe MicroQr class provides access to parameters that are available for the MicroQr decoder."},{"key":"api-ScannerConfig-DecoderParams-Msi","name":"ScannerConfig.DecoderParams.Msi","md":"#ScannerConfig.DecoderParams.Msi\n\nThe Msi class provides access to parameters that are available for the Msi decoder.\n\n##Public Fields\n###checkDigitScheme\nTwo algorithms are possible for the verification of the second MSI check digit. Select the algorithm used to encode the check digit. Use enum [ScannerConfig.CheckDigitScheme](#api-ScannerConfig?ScannerConfig.CheckDigitScheme).\n\n**Example Usage:**\n\n    :::java\n    msi.check_digit_scheme = CheckDigitScheme.MOD_10_10;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.CheckDigitScheme](#api-ScannerConfig?ScannerConfig.CheckDigitScheme)\n\n###checkDigits\nWith MSI symbols, one check digit is mandatory and always verified by the reader. The second check digit is optional. Use enum [ScannerConfig.CheckDigit](#api-ScannerConfig?ScannerConfig.CheckDigit).\n\n**Example Usage:**\n\n    :::java\n    msi.checkDigits = CheckDigit.ONE;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.CheckDigit](#api-ScannerConfig?ScannerConfig.CheckDigit)\n\n###length1\nUse to set decode lengths. The range is 0 to 55.\n\n**Example Usage:**\n\n    :::java\n    msi.length1 = 4;\n\n**Type:**\n\nint\n\n###length2\nUse to set decode lengths. The range is 0 to 55.\n\n**Example Usage:**\n\n    :::java\n    msi.length2 = 55;\n\n**Type:**\n\nint\n\n###redundancy\nSets the reader to read the bar code twice before accepting data.\n\n**Example Usage:**\n\n    :::java\n    msi.redundancy = true;\n\n**Type:**\n\nboolean\n\n###reportCheckDigit\nTransmit MSI data with or without the check digit.\n\n**Example Usage:**\n\n    :::java\n    msi.reportCheckDigit = false;\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-Pdf417","name":"ScannerConfig.DecoderParams.Pdf417","md":"#ScannerConfig.DecoderParams.Pdf417\n\nThe Pdf417 class provides access to parameters that are available for the Pdf417 decoder."},{"key":"api-ScannerConfig-DecoderParams-QrCode","name":"ScannerConfig.DecoderParams.QrCode","md":"#ScannerConfig.DecoderParams.QrCode\n\nThe QRCode class provides access to parameters that are available for the QRCode decoder."},{"key":"api-ScannerConfig-DecoderParams-Signature","name":"ScannerConfig.DecoderParams.Signature","md":"#ScannerConfig.DecoderParams.Signature\n\nThe Signature class provides access to parameters that are available for the Signature decoder."},{"key":"api-ScannerConfig-DecoderParams-Tlc39","name":"ScannerConfig.DecoderParams.Tlc39","md":"#ScannerConfig.DecoderParams.Tlc39\n\nThe Tlc39 class provides access to parameters that are available for the Tlc39 decoder."},{"key":"api-ScannerConfig-DecoderParams-TriOptic39","name":"ScannerConfig.DecoderParams.TriOptic39","md":"#ScannerConfig.DecoderParams.TriOptic39\n\nThe TriOptic39 class provides access to parameters that are available for the TriOptic39 decoder.\n\n##Public Fields\n###redundancy\nSets the reader to read the bar code twice before accepting data.\n\n**Example Usage:**\n\n    :::java\n    triOptic39.redundancy = true;\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-UkPostal","name":"ScannerConfig.DecoderParams.UkPostal","md":"#ScannerConfig.DecoderParams.UkPostal\n\nThe UkPostal class provides access to parameters that are available for the UkPostal decoder.\n\n##Public Fields\n###reportCheckDigit\nTransmit UK Postal data with or without the check digit.\n\n**Example Usage:**\n\n    :::java\n    ukPostal.reportCheckDigit = true;\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-Upca","name":"ScannerConfig.DecoderParams.Upca","md":"#ScannerConfig.DecoderParams.Upca\n\nThe Upca class provides access to parameters that are available for the Upca decoder.\n\n##Public Fields\n###preamble\nControls the preamble applied to the bar code.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.Preamble](#api-ScannerConfig?ScannerConfig.Preamble)\n\n###reportCheckDigit\nFlag to enable reporting the bar code check digit.\n\n**Type:**\n\nboolean\n"},{"key":"api-ScannerConfig-DecoderParams-Upce0","name":"ScannerConfig.DecoderParams.Upce0","md":"#ScannerConfig.DecoderParams.Upce0\n\nThe Upce0 class provides access to parameters that are available for the Upce0 decoder.\n\n##Public Fields\n###convertToUpca\nFlag to enable conversion from UPCE0 to UPCA bar code. If this flag is set, the bar code is converted to UPCA and UPCA parameters are used.\n\n**Type:**\n\nboolean\n\n###preamble\nControls the preamble applied to the bar code.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.Preamble](#api-ScannerConfig?ScannerConfig.Preamble)\n\n###reportCheckDigit\nFlag to enable reporting the bar code check digit.\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-Upce1","name":"ScannerConfig.DecoderParams.Upce1","md":"#ScannerConfig.DecoderParams.Upce1\n\nThe Upce1 class provides access to parameters that are available for the Upce1 decoder.\n\n##Public Fields\n###convertToUpca\nFlag to enable conversion from UPCE1 to UPCA bar code. If this flag is set, the bar code is converted to UPCA and UPCA parameters are used.\n\n**Type:**\n\nboolean\n\n###preamble\nControls the preamble applied to the bar code.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.Preamble](#api-ScannerConfig?ScannerConfig.Preamble)\n\n###reportCheckDigit\nFlag to enable reporting the bar code check digit.\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-UpcEanParams","name":"ScannerConfig.DecoderParams.UpcEanParams","md":"#ScannerConfig.DecoderParams.UpcEanParams\n\nThe UPCEAN class provides access to parameters that are available for the UPC/EAN decoder.\n\n**Example Usage:**\n\n    :::java\n    config.upcEanParams.booklandCode = true;\n\n**Version:**\n\n3.0\n\n##Public Fields\n###booklandCode\nFlag to enable Bookland code decoding.\n\n**Example Usage:**\n\n    :::java\n    upcEan.booklandCode = true;\n\n**Type:**\n\nboolean\n\n###booklandFormat\nSpecifies the bookland format to use. Use enum [ScannerConfig.BooklandFormat](#api-ScannerConfig?ScannerConfig.BooklandFormat).\n\n**Example Usage:**\n\n    :::java\n    upcEan.booklandFormat = BooklandFormat.ISBN_10;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.BooklandFormat](#api-ScannerConfig?ScannerConfig.BooklandFormat)\n\n###convertDataBarToUpcEan\nIf this is set it converts DataBar bar codes to UPC/EAN format. For this setting to work UPC/EAN symbologies must be enabled. A check in the checkbox indicates that the option is enabled.\n\n**Example Usage:**\n\n    :::java\n    upcEan.convertDataBarToUPCEAN = true;\n\n**Type:**\n\nboolean\n\n###couponCode\nEnables Coupon code decoding. Note that in order to successfully decode Coupon codes, all of the correct decoders must be enabled.\n\n**Example Usage:**\n\n    :::java\n    upcEan.couponCode = true;\n\n**Type:**\n\nboolean\n\n###couponReport\nUsed to differentiate between old coupon (UPC/EAN and Code128) and new GS1 DataBar Coupons. NOTE: There is an Interim GS1 DataBar Coupon (UPC A and the GS1 DataBar), which is meant for smooth transition of adaption from old coupon format to new coupon format. If an interim coupon is presented to the scanner, it will read old or new portion of it, depending on the report mode setting. Use enum [ScannerConfig.CouponReport](#api-ScannerConfig?ScannerConfig.CouponReport).\n\n**Example Usage:**\n\n    :::java\n    upcEan.couponReport = CouponReport.OLD;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.CouponReport](#api-ScannerConfig?ScannerConfig.CouponReport)\n\n###eanZeroExtend\nEan zero extend\n\n**Type:**\n\nboolean\n\n###linearDecode\nFlag to enable linear decode.\n\n**Example Usage:**\n\n    :::java\n    upcEan.linearDecode = true;\n\n**Type:**\n\nboolean\n\n###randomWeightCheckDigit\nFlag to enable random weight check digit verification.\n\n**Example Usage:**\n\n    :::java\n    upcEan.randomWeightCheckDigit = true;\n\n**Type:**\n\nboolean\n\n###securityLevel\nThe scanner of fers four levels of decode security for UPC/EAN bar codes. Select higher security levels for lower quality bar codes. There is an inverse relationship between security and decode speed, so be sure to choose only that level of security necessary for the application. Use enum [ScannerConfig.SecurityLevel](#api-ScannerConfig?ScannerConfig.SecurityLevel).\n\n**Example Usage:**\n\n    :::java\n    upcEan.securityLevel = SecurityLevel.LEVEL_0;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.SecurityLevel](#api-ScannerConfig?ScannerConfig.SecurityLevel)\n\n###supplemental2\nFlag to enable length 2 supplementals.\n\n**Example Usage:**\n\n    :::java\n    upcEan.supplemental2 = false;\n\n**Type:**\n\nboolean\n\n###supplemental5\nFlag to enable length 5 supplementals.\n\n**Example Usage:**\n\n    :::java\n    upcEan.supplemental5 = false;\n\n**Type:**\n\nboolean\n\n###supplementalMode\nThe supplemental mode. Use enum [ScannerConfig.SupplementalMode](#api-ScannerConfig?ScannerConfig.SupplementalMode).\n\n**Example Usage:**\n\n    :::java\n    upcEan.supplementalMode = SupplementalMode.S_378_379;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.SupplementalMode](#api-ScannerConfig?ScannerConfig.SupplementalMode)\n\n###supplementalRetries\nRetry count for auto-discriminating for supplementals. Possible values are 2 to 20 inclusive. Note that this flag is only considered if Supplemental Mode - UPC EAN is set to one of the following values: Supplementals Auto, Supplementals Smart, Supplementals 378-379 , Supplementals 978-979, Supplementals 977 or Supplementals 414-419-434-439 (2 to 20, default 10).\n\n**Example Usage:**\n\n    :::java\n    upcEan.supplementalRetries = 10;\n\n**Type:**\n\nint"},{"key":"api-ScannerConfig-DecoderParams-Us4State","name":"ScannerConfig.DecoderParams.Us4State","md":"#ScannerConfig.DecoderParams.Us4State\n\nThe US4State class provides access to parameters that are available for the US4State decoder."},{"key":"api-ScannerConfig-DecoderParams-Us4StateFics","name":"ScannerConfig.DecoderParams.Us4StateFics","md":"#ScannerConfig.DecoderParams.Us4StateFics\n\nThe Us4StateFics class provides access to parameters that are available for the Us4StateFics decoder."},{"key":"api-ScannerConfig-DecoderParams-UsPlanet","name":"ScannerConfig.DecoderParams.UsPlanet","md":"#ScannerConfig.DecoderParams.UsPlanet\n\nThe UsPlanet class provides access to parameters that are available for the UsPlanet decoder.\n\n##Public Fields\n###reportCheckDigit\nFlag to enable reporting the bar code check digit.\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-UsPostNet","name":"ScannerConfig.DecoderParams.UsPostNet","md":"#ScannerConfig.DecoderParams.UsPostNet\n\nThe UsPostNet class provides access to parameters that are available for the UsPostNet decoder.\n\n##Public Fields\n###reportCheckDigit\nFlag to enable reporting the bar code check digit.\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams-WebCode","name":"ScannerConfig.DecoderParams.WebCode","md":"#ScannerConfig.DecoderParams.WebCode\n\nThe WebCode class provides access to parameters that are available for the WebCode decoder.\n\n##Public Fields\n###subType\nWebcode sub type enabled\n\n**Type:**\n\nboolean"},{"key":"api-ScannerConfig-DecoderParams","name":"ScannerConfig.DecoderParams","md":"#ScannerConfig.DecoderParams\n\nThe DecoderParams class contains decoder parameters that are used by multiple decoder symbologies. The property provides access to such decoder parameters as Enabled and IsSupported, among others. \n\n> NOTE: When calling enable() after disable(), all the latest configuration parameter values (Config.DecoderParams, Config.ScannerParams, Config.ReaderParams and Config.InterfaceParams) will be set automatically. \n\n##Public Fields\n###australianPostal\nThe AustralianPostal class provides access to parameters that are available for the AustralianPostal decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.AustralianPostal](#api-ScannerConfig-DecoderParams-AustralianPostal)\n\n###aztec\nThe AZTEC class provides access to parameters that are available for the AZTEC decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Aztec](#api-ScannerConfig-DecoderParams-Aztec)\n\n###canadianPostal\nThe CanadianPostal class provides access to parameters that are available for the CanadianPostal decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.CanadianPostal](#api-ScannerConfig-DecoderParams-CanadianPostal)\n\n###chinese2of5\n\nThe Chinese_2of5 class provides access to parameters that are available for the Chinese2of5 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Chinese2of5](#api-ScannerConfig-DecoderParams-Chinese2of5)\n\n###codaBar\nThe CodaBar class provides access to parameters that are available for the CodaBar decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.CodaBar](#api-ScannerConfig-DecoderParams-CodaBar)\n\n###code11\nThe Code11 class provides access to parameters that are available for the Code11 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Code11](#api-ScannerConfig-DecoderParams-Code11)\n\n###code128\nThe Code128 class provides access to parameters that are available for the Code128 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Code128](#api-ScannerConfig-DecoderParams-Code128)\n\n###code39\nThe Code39 class provides access to parameters that are available for the Code39 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Code39](#api-ScannerConfig-DecoderParams-Code39)\n\n###code93\nThe Code93 class provides access to parameters that are available for the Code93 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Code93](#api-ScannerConfig-DecoderParams-Code93)\n\n###compositeAB\nThe Composite_AB class provides access to parameters that are available for the CompositeAB decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.CompositeAB](#api-ScannerConfig-DecoderParams-CompositeAB)\n\n###compositeC\nThe Composite_C class provides access to parameters that are available for the CompositeC decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.CompositeC](#api-ScannerConfig-DecoderParams-CompositeC)\n\n###d2of5\nThe D2OF5 class provides access to parameters that are available for the D2OF5 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.D2of5](#api-ScannerConfig-DecoderParams-D2of5)\n\n###dataMatrix\nThe DataMatrix class provides access to parameters that are available for the DataMatrix decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.DataMatrix](#api-ScannerConfig-DecoderParams-DataMatrix)\n\n\n###dutchPostal\nThe DutchPostal class provides access to parameters that are available for the DutchPostal decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.DutchPostal](#api-ScannerConfig-DecoderParams-DutchPostal)\n\n###ean13\nThe EAN13 class provides access to parameters that are available for the EAN13 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Ean13](#api-ScannerConfig-DecoderParams-Ean13)\n\n###ean8\nThe EAN8 class provides access to parameters that are available for the EAN8 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Ean8](#api-ScannerConfig-DecoderParams-Ean8)\n\n###gs1Databar\nThe GS1Databar class provides access to parameters that are available for the GS1 Databar decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Gs1Databar](#api-ScannerConfig-DecoderParams-Gs1Databar)\n###gs1DatabarExp\nThe GS1DatabarExp class provides access to parameters that are available for the GS1 Databar Exp decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Gs1DatabarExp](#api-ScannerConfig-DecoderParams-Gs1DatabarExp)\n\n###gs1DatabarLim\nThe GS1DatabarLim class provides access to parameters that are available for the GS1 Databar Lim decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Gs1DatabarLim](#api-ScannerConfig-DecoderParams-Gs1DatabarLim)\n\n###i2of5\nThe I2OF5 class provides access to parameters that are available for the I2OF5 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.I2of5](#api-ScannerConfig-DecoderParams-I2of5)\n\n###japanesePostal\nThe JapanesePostal class provides access to parameters that are available for the JapanesePostal decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.JapanesePostal](#api-ScannerConfig-DecoderParams-JapanesePostal)\n\n###korean3of5\nThe Korean_3of5 class provides access to parameters that are available for the Korean3of5 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Korean3of5](#api-ScannerConfig-DecoderParams-Korean3of5)\n\n###matrix2of5\nThe Matrix_2of5 class provides access to parameters that are available for the Matrix2of5 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Matrix2of5](#api-ScannerConfig-DecoderParams-Matrix2of5)\n\n###maxiCode\nThe MaxiCode class provides access to parameters that are available for the MaxiCode decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.MaxiCode](#api-ScannerConfig-DecoderParams-MaxiCode)\n\n###microPDF\nThe MicroPDF class provides access to parameters that are available for the MicroPDF decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.MicroPdf](#api-ScannerConfig-DecoderParams-MicroPdf)\n\n###microQR\nThe MicroQR class provides access to parameters that are available for the MicroQR decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.MicroQr](#api-ScannerConfig-DecoderParams-MicroQr)\n\n###msi\nThe MSI class provides access to parameters that are available for the MSI decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Msi](#api-ScannerConfig-DecoderParams-Msi)\n\n###pdf417\nThe PDF417 class provides access to parameters that are available for the PDF417 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Pdf417](#api-ScannerConfig-DecoderParams-Pdf417)\n\n###qrCode\nThe QRCode class provides access to parameters that are available for the QRCode decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.QrCode](#api-ScannerConfig-DecoderParams-QrCode)\n\n###signature\nThe Signature class provides access to parameters that are available for the Signature decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Signature](#api-ScannerConfig-DecoderParams-Signature)\n\n###tlc39\nThe TLC39 class provides access to parameters that are available for the TLC39 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Tlc39](#api-ScannerConfig-DecoderParams-Tlc39)\n\n###triOptic39\nThe TriOptic39 class provides access to parameters that are available for the TriOptic39 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.TriOptic39](#api-ScannerConfig-DecoderParams-TriOptic39)\n\n###ukPostal\nThe UKPostal class provides access to parameters that are available for the UKPostal decoder.\n\n**Type:**\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.UkPostal](#api-ScannerConfig-DecoderParams-UkPostal)\n\n###upcEanParams\nThe UPCEAN class provides access to parameters that are available for the UPC/EAN decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.UpcEanParams](#api-ScannerConfig-DecoderParams-UpcEanParams)\n\n###upca\nThe UPCA class provides access to parameters that are available for the UPCA decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Upca](#api-ScannerConfig-DecoderParams-Upca)\n\n###upce0\nThe UPCE0 class provides access to parameters that are available for the UPCE0 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Upce0](#api-ScannerConfig-DecoderParams-Upce0)\n\n###upce1\nThe UPCE1 class provides access to parameters that are available for the UPCE1 decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Upce1](#api-ScannerConfig-DecoderParams-Upce1)\n\n###us4State\nThe US4State class provides access to parameters that are available for the US4State decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Us4State](#api-ScannerConfig-DecoderParams-Us4State)\n\n###us4StateFics\nThe US4State_FICS class provides access to parameters that are available for the US4StateFics decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.Us4StateFics](#api-ScannerConfig-DecoderParams-Us4StateFics)\n\n###usPlanet\nThe USPlanet class provides access to parameters that are available for the USPlanet decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.UsPlanet](#api-ScannerConfig-DecoderParams-UsPlanet)\n\n###usPostNet\nThe USPostNet class provides access to parameters that are available for the USPostNet decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.UsPostNet](#api-ScannerConfig-DecoderParams-UsPostNet)\n\n###webCode\nThe webCode class provides access to parameters that are available for the webCode decoder.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams.WebCode](#api-ScannerConfig-DecoderParams-WebCode)\n\n"},{"key":"api-ScannerConfig-ReaderParams-ReaderSpecific-CameraSpecific","name":"ScannerConfig.ReaderParams.ReaderSpecific.CameraSpecific","md":"#ScannerConfig.ReaderParams.ReaderSpecific.CameraSpecific\n\nCameraSpecific class provides access to the camera scanner specific parameters.\n\n##Public Fields\n###illuminationMode\nTurns camera illumination on and off. This option is only available when camera is selected in the Barcode input Scanner selection option. Use enum [ScannerConfig.IlluminationMode](#api-ScannerConfig?ScannerConfig.IlluminationMode).\n\n**Example Usage:**\n\n    :::java\n    readerParams.cameraSpecific.illuminationMode = IlluminationMode.ON;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.IlluminationMode](#api-ScannerConfig?ScannerConfig.IlluminationMode)\n\n###inverse1DMode\nThis parameter allows the user to select decoding on inverse 1D bar codes. Use enum [ScannerConfig.Inverse1DMode](#api-ScannerConfig?ScannerConfig.Inverse1DMode).\n\n**Example Usage:**\n\n    :::java\n    readerParams.cameraSpecific.inverse_1d_mode = Inverse1DMode.AUTO;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.Inverse1DMode](#api-ScannerConfig?ScannerConfig.Inverse1DMode)\n\n###viewfinderMode\nConfigures the Viewfinder modes supported for camera scanning. Use enum [ScannerConfig.ViewFinderMode](#api-ScannerConfig?ScannerConfig.ViewFinderMode).\n\n**Example Usage:**\n\n    :::java\n    readerParams.cameraSpecific.viewfinder_mode = ViewFinderMode.DISABLED;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.ViewFinderMode](#api-ScannerConfig?ScannerConfig.ViewFinderMode)"},{"key":"api-ScannerConfig-ReaderParams-ReaderSpecific-ImagerSpecific","name":"ScannerConfig.ReaderParams.ReaderSpecific.ImagerSpecific","md":"#ScannerConfig.ReaderParams.ReaderSpecific.ImagerSpecific\n\nImagerSpecific provides access to the imager specific parameters.\n\n##Public Fields\n###illuminationBrightness\nIllumination Brightness of the Imager. The valid range is 1 to 10.\n\n**Example Usage:**\n\n    :::java\n    imagerSpecific.illuminationBrightness = 2;\n\n**Type:**\n\nint\n\n###inverse1DMode\nThis parameter allows the user to select decoding on inverse 1D bar codes. Use enum [ScannerConfig.Inverse1DMode](#api-ScannerConfig?ScannerConfig.Inverse1DMode).\n\n**Example Usage:**\n\n    :::java\n    imagerSpecific.inverse1DMode = Inverse1DMode.AUTO;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.Inverse1DMode](#api-ScannerConfig?ScannerConfig.Inverse1DMode)\n\n###lcdMode\nEnables or disables LCD mode. LCD mode enhances the ability of the imager to read bar codes from LCD displays such as cellphones (imager only). Use enum [ScannerConfig.LcdMode](#api-ScannerConfig?ScannerConfig.LcdMode).\n\n**Example Usage:**\n\n    :::java\n    imagerSpecific.lcdMode = LcdMode.DISABLED;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.LcdMode](#api-ScannerConfig?ScannerConfig.LcdMode)\n\n###pickList\nAllows the imager to decode only the bar code that is directly under the cross-hair/reticle (+) part of the pattern. This feature is useful in applications where multiple bar codes may appear in the field of view during a decode session and only one of them is targeted for decode. Use enum [ScannerConfig.PickList](#api-ScannerConfig?ScannerConfig.PickList).\n\n**Example Usage:**\n\n    :::java\n    imagerSpecific.picklist = PickList.DISABLED;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.PickList](#api-ScannerConfig?ScannerConfig.PickList)"},{"key":"api-ScannerConfig-ReaderParams-ReaderSpecific-LaserSpecific","name":"ScannerConfig.ReaderParams.ReaderSpecific.LaserSpecific","md":"#ScannerConfig.ReaderParams.ReaderSpecific.LaserSpecific\n\nLaserSpecific class provides access to the laser scanner specific parameters.\n\n##Public Fields\n###beamTimer\nSets the maximum amount of time that the reader remains on (0 - 60,000 ms in increments of 100 ms). A value of 0 sets the reader to stay on indefinitely. Use enum [ScannerConfig.IlluminationMode](#api-ScannerConfig?ScannerConfig.IlluminationMode).\n\n**Example Usage:**\n\n    :::java\n    readerParams.beamTimer = 1500;\n\n**Type:**\n\nint\n\n###linearSecurityLevel\nSets the number of times a bar code is read to confirm an accurate decode. Use enum [ScannerConfig.LinearSecurityLevel](#api-ScannerConfig?ScannerConfig.LinearSecurityLevel).\n\n**Example Usage:**\n\n    :::java\n    readerParams.linearSecurityLevel = LinearSecurityLevel.ALL_THRICE;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.LinearSecurityLevel](#api-ScannerConfig?ScannerConfig.LinearSecurityLevel)\n\n###inverse1DMode\nThis parameter allows the user to select decoding on inverse 1D bar codes. Use enum [ScannerConfig.Inverse1DMode](#api-ScannerConfig?ScannerConfig.Inverse1DMode).\n\n**Example Usage:**\n\n    :::java\n    readerParams.cameraSpecific.inverse_1d_mode = Inverse1DMode.AUTO;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.Inverse1DMode](#api-ScannerConfig?ScannerConfig.Inverse1DMode)\n\n###powerMode\nSet scanner power mode. Use enum [ScannerConfig.PowerMode](#api-ScannerConfig?ScannerConfig.PowerMode).\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.PowerMode](#api-ScannerConfig?ScannerConfig.PowerMode)"},{"key":"api-ScannerConfig-ReaderParams-ReaderSpecific","name":"ScannerConfig.ReaderParams.ReaderSpecific","md":"#ScannerConfig.ReaderParams.ReaderSpecific\n\nReaderSpecific class provides access to the reader specific parameters.\n\n##Constructors\n###ReaderSpecific()\n\n##Public Fields\n###cameraSpecific\nProvide access to set the imager specific settings if the scanner device is camera.\n\n**Example Usage:**\n\n    :::java\n    if (scanner.getScannerInfo().getDeviceType() == DeviceType.IMAGER)\n    {\n    readerParams.readerSpecific.cameraSpecific.illuminationMode = IlluminationMode.ON;\n    }\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.ReaderParams.ReaderSpecific.CameraSpecific](#api-ScannerConfig-ReaderParams-ReaderSpecific-CameraSpecific)\n\n###imagerSpecific\nProvide access to set the imager specific settings if the scanner device is imager.\n\n**Example Usage:**\n\n    :::java\n    if (scanner.getScannerInfo().getDeviceType() == DeviceType.IMAGER) \n    {\n     readerParams.readerSpecific.imagerSpecific.picklist = PickList.DISABLED;\n    }\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.ReaderParams.ReaderSpecific.ImagerSpecific](#api-ScannerConfig-ReaderParams-ReaderSpecific-ImagerSpecific)\n\n###laserSpecific\nProvide access to set the laser specific settings if the scanner device is laser.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.ReaderParams.ReaderSpecific.LaserSpecific](#api-ScannerConfig-ReaderParams-ReaderSpecific-LaserSpecific)"},{"key":"api-ScannerConfig-ReaderParams","name":"ScannerConfig.ReaderParams","md":"#ScannerConfig.ReaderParams\n\nThe ReaderParams class holds the parameters for a scanner. Reader parameters are global to all reads on all open handles on the same scanner. \n\n> NOTE: When calling enable() after disable(), all the latest configuration parameter values. (Config.DecoderParams, Config.ScannerParams, Config.ReaderParams) will be set automatically.\n\n##Public Fields\n###readerSpecific\nReaderSpecificParams provides access to the reader specific parameters.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.ReaderParams.ReaderSpecific](#api-ScannerConfig-ReaderParams-ReaderSpecific)"},{"key":"api-ScannerConfig-ScanParams","name":"ScannerConfig.ScanParams","md":"#ScannerConfig.ScanParams\n\nThe ScanParams class provides access to scanning parameters that are available for all decoders. \n\n> NOTE: When calling enable() after disable(), all the latest configuration parameter values (Config.DecoderParams, Config.ScannerParams, Config.ReaderParams and Config.InterfaceParams) will be set automatically.\n\n##Public Fields\n###audioStreamType\nThe audio stream type refers to type of streaming on which the scan beep should be played. The decodeAudioFeedbackUri specified must be available for the audio streaming type specified.\n\n**Example Usage:**\n\n    :::java\n    scanParams.audioStreamType = AudioStreamType.RINGER;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.AudioStreamType](#api-ScannerConfig?ScannerConfig.AudioStreamType)\n\n###codeIdType\nA Code ID character identifies the code type of a scanned bar code. This is useful when the reader is decoding more than one code type. Select a code ID character to insert between the prefix and the decoded symbol. Use enum [ScannerConfig.CodeIdType](#api-ScannerConfig?ScannerConfig.CodeIdType).\n\n**Example Usage:**\n\n    :::java\n    scanParams.codeIdType = CODE_ID_TYPE.NONE;\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.CodeIdType](#api-ScannerConfig?ScannerConfig.CodeIdType)\n\n###decodeAudioFeedbackUri\nSelect an audio tone to sound upon a good decode. The valid audio files from the RingTone manager can be used for audio feedback.\n\n**Example Usage:**\n\n    :::java\n    scanParams.decodeAudioFeedbackURI = \"system/media/audio/notifications/decode-short.wav\";\n    scanParams.decodeAudioFeedbackUri = \"sdcard/sample-audio.wav\";\n    scanParams.decodeAudioFeedbackUri = \"sdcard/sample-audio.ogg\";\n\tscanParams.decodeAudioFeedbackUri = \"/sdcard/sample-audio.wav\";\n\n> Note: To achieve no feedback (silent) upon a good decode, specify an empty string as below:\n\n\tscanParams.decodeAudioFeedbackURI = \"\";\n\n**Type:**\n\njava.lang.String\n\n###decodeHapticFeedback\nEnable the device to vibrate upon a good decode.\n\n**Example Usage:**\n\n    :::java\n    scanParams.decodeHapticFeedback = true;\n\n**Type:**\n\nboolean\n\n###decodeLEDFeedback\nDecoding LED Notification.\n\n**Example Usage:**\n\n    :::java\n    scanParams.decodeLEDFeedback = true;\n\n**Type:**\n\nboolean\n\n###decodeLEDTime\nDecode LED ON duration upon successful decode in milliseconds. This value can be from 0ms to 1000ms with a step of 25ms.\n\n**Example Usage:**\n\n    :::java\n    scanParams.decodeLEDTime = 75;\n\n**Type:**\n\nint"},{"key":"api-ScannerConfig","name":"ScannerConfig","md":"#ScannerConfig\n\nThe ScannerConfig class provides access to scanner configuration settings.  \n\n**Example Usage:**\n\n    :::java\n    ScannerConfig scannerConfig = scanner.getConfig(scannerConfig);\n    scannerConfig.scanParams.decodeHapticFeedback = true;\n    scannerConfig.decoderParams.codabar.length1 = 6;\n    scanner.setConfig(scannerConfig);\n\n**Version:**\n\n3.0\n\n##Public Methods\n###isParamSupported(String param)\nThis method helps to check scanner config parameters supported Returns true if specified parameter is supported. The field name should be specify complete access path till the field in the string format. The scanner config object name can be any name, but following field names should exactly match the fields defined by scanner config class.\n\n**Example Usage:**\n\n    :::java\n    ScannerConfig config1 = scanner.getConfig(scannerConfig);\n    if ( config1.isParamSupported(\"config1.scanParams.decodeHapticFeedback\") ) \n    { \n      config1.scanParams.decodeHapticFeedback = true; \n    } \n    if ( config1.isParamSupported(\"config1.decoderParams.codabar.enabled\") ) \n    { \n    config1.decoderParams.codabar.enabled = true; \n    } \n    scanner.setConfig(config1);\n\n**Parameters:**\n\n**param**\n\n**Returns:**\n\nboolean\n\n###resetToDefault(Scanner scanner)\nResets the scanner parameters to defaults values for the specified scanner. The unsupported parameters left as it is.\n\n**Parameters:**\n\n**scanner**\n\n**Returns:**\n\nvoid\n\n**Throws:**\n\nScannerException\n\n##Public Fields\n###decoderParams\nThe DecoderParams class contains decoder parameters that are used by multiple decoder symbologies. The property provides access to such decoder parameters as Enabled and isSupported, among others. \n\n> NOTE: When calling enable() after disable(), all the latest configuration parameter values (Config.DecoderParams, Config.ScannerParams, Config.ReaderParams) will be set automatically.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.DecoderParams](#api-ScannerConfig-DecoderParams)\n\n###readerParams\nThe ReaderParams class holds the parameters for a scanner. Reader parameters are global to all reads on all open handles on the same scanner. \n\n> NOTE: When calling enable() after disable(), all the latest configuration parameter values (Config.DecoderParams, Config.ScannerParams, Config.ReaderParams) will be set automatically.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.ReaderParams](#api-ScannerConfig-ReaderParams)\n\n###scanParams\nThe ScanParams property provides access to scanning parameters that are available for all decoders. \n\n> NOTE: When calling enable() after disable(), all the latest configuration parameter values (Config.DecoderParams, Config.ScannerParams, Config.ReaderParamss) will be set automatically.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.ScanParams](#api-ScannerConfig-ScanParams)\n\n###skipOnUnsupported\nThis flag to tells whether to skip the unsupported parameter/values and continue or stop setting the configuration. Its set to UNSUPPORTED_PARAM by default which skips the unsupported params and continues.\n\n**Type:**\n\ncom.symbol.emdk.barcode.[ScannerConfig.SkipOnUnSupported](#api-ScannerConfig?ScannerConfig.SkipOnUnSupported)\n\n##Public Enums\n###ScannerConfig.AudioStreamType\nVolume slider type for decode audio feedback.\n\n**Values:**\n\n**RINGER** - Ringer and Notifications.\n\n**MEDIA** - Music and Media.\n\n**ALARAMS** - Alarms.\n\n###ScannerConfig.BooklandFormat\nLists the Bookland formats\n\n**Example Usage:**\n\n    :::java\n    BooklandFormat.ISBN_10;\n\n**Values:**\n\n**ISBN_10** - 978 reported in 10 digit mode\n\n**ISBN_13** - 978/979 transmitted as EAN13 as per 2007 ISBN-13 protocol\n\n###ScannerConfig.CheckDigit\nThe number of check digits to be verified. With MSI symbols, one check digit is mandatory and always verified by the reader. The second check digit is optional.\n\n**Example Usage:** \n\n    :::java\n    CheckDigit.ONE;\n\n**Values:**\n\n**ONE** - Verify one check digit.\n\n**TWO** - Verify two check digits.\n\n###ScannerConfig.CheckDigitScheme\nTwo algorithms are possible for the verification of the second MSI check digit. Select the algorithm used to encode the check digit.\n\n**Example Usage:** \n\n    :::java\n    CheckDigitScheme.MOD_11_10;\n\n**Values:**\n\n**MOD_11_10** - First check digit is MOD 11 and second check digit is MOD 10.\n\n**MOD_10_10** - Both check digits are MOD 10.\n\n###ScannerConfig.CheckDigitType\nVerify data integrity.\n\n**Example Usage:** \n\n    :::java\n    CheckDigitType.NO;\n\n**Values:**\n\n**NO** - A check digit is not used.\n\n**USS** - Select to check the integrity of all Interleaved 2 of 5 symbols to verify the data complies with either the Uniform Symbology Specification (USS) check digit algorithm.\n\n**OPCC** - Select to check the integrity of all Interleaved 2 of 5 symbols to verify the data complies with either the Optical Product Code Council (OPCC) check digit algorithm.\n\n###ScannerConfig.CodeIdType\nA Code ID character identifies the code type of a scanned bar code. This is useful when the reader is decoding more than one code type. Select a code ID character to insert between the prefix and the decoded symbol.\n\n**Example Usage:**\n\n    :::java\n    CodeIdType.NONE;\n\n**Values:**\n\n**NONE** - No prefix.\n\n**AIM** - A standards based three character prefix.\n\n**SYMBOL** - A Symbol defined single character prefix.\n\n###ScannerConfig.CouponReport\nSupported Coupon modes\n\n**Example Usage:**\n\n    :::java\n    CouponReport.OLD; \n\n**Values:**\n\n**OLD** - Scanner will read only the old coupon format\n\n**NEW** - Scanner will read only the new GS1 DataBar coupon format\n\n**BOTH** - Scanner will read both old coupon format as well as the new GS1 DataBar coupon format.\n\n###ScannerConfig.IlluminationMode\nEnable/disable illumination depending on ambient light conditions. This option is only available when camera is selected in the Barcode input Scanner selection option.\n\n**Example Usage:**\n\n    :::java\n    IlluminationMode.OFF; \n\n**Values:**\n\n**OFF (\"off\")** - Illumination turned off during scanning.\n\n**ON (\"torch\")** - Illumination turned on during scanning.\n\n###ScannerConfig.Inverse1DMode\nThis parameter allows the user to select decoding on inverse 1D bar codes.\n\n**Example Usage:**\n\n    :::java\n    Inverse1DMode.DISABLED; \n\n**Values:**\n\n**DISABLED** - Disables decoding of inverse 1D symbologies.\n\n**ENABLED** - Enables decoding of only inverse 1D symbologies.\n\n**AUTO** - Allows decoding of both positive as well as inverse 1D symbologies.\n\n###ScannerConfig.Isbt128ContactMode\nOption for concatenating pairs of ISBT128 code types.\n\n**Example Usage:**\n\n    :::java\n    Isbt128ContactMode.NEVER;\n\n**Values:**\n\n**NEVER** - Will ignore the barcode pair and only output decode data for only one of the barcodes.\n\n**ALWAYS** - Will not decode if both the barcodes are not present or if one of them cannot be decoded. There must be two ISBT codes in order to decode and perform concatenation.\n\n**AUTO** - Decodes and concatenates pairs of ISBT codes immediately. If only a single ISBT symbol is present, the device must decode the symbol the number of times set via DataWedge Configuration 4 - 1 1 Redundancy - Code128 before transmitting its data to confirm that there is no additional ISBT symbol.\n\n###ScannerConfig.LcdMode\nEnable or disable LCD mode (for Blockbuster imager devices only). LCD mode enhances the ability of the imager to read bar codes from LCD displays such as cellphones.\n\n**Example Usage:**\n\n    :::java\n    LCDMode.DISABLED;\n\n**Values:**\n\n**DISABLED** - Disables LCD mode\n\n**ENABLED** - Enables LCD mode.\n\n###ScannerConfig.LinearSecurityLevel\nSets the number of times a bar code is read to confirm an accurate decode.\n\n**Example Usage:**\n\n    :::java\n    LinearSecurityLevel.SHORT_OR_CODABAR;\n\n**Values:**\n\n**SHORT_OR_CODABAR** - Two times read redundancy if short bar code or Codabar.\n\n**ALL_TWICE** - Two times read redundancy for all bar codes (default).\n\n**LONG_AND_SHORT** - Two times read redundancy for long bar codes, three times for short bar codes.\n\n**ALL_THRICE** - Three times read redundancy for all bar codes.\n\n###ScannerConfig.PickList\nAllows the imager to decode only the bar code that is directly under the cross-hair/reticle (+) part of the pattern. This feature is useful in applications where multiple bar codes may appear in the field of view during a decode session and only one of them is tar geted for decode.\n\n**Example Usage:**\n\n    :::java\n    PickList.DISABLED;\n\n**Values:**\n\n**DISABLED** - Disables Picklist mode. Any bar code within the field of view can be decoded.\n\n**ENABLED** - Enables the Picklist mode so that only the bar code that is directly under the cross-hair (reticle) is decoded. This is useful when used in conjunction with the static and dynamic reticle viewfinder modes. (Scan Module Only)\n\n###ScannerConfig.Preamble\nControls the preamble applied to the bar code Preamble characters are part of the UPC symbol consisting of Country Code and System Character. Select the appropriate option to match the host system.\n\n**Example Usage:**\n\n    :::java\n    Preamble.NONE;\n\n**Values:**\n\n**NONE** - No preamble\n\n**SYS_CHAR** - System character preamble\n\n**COUNTRY_AND_SYS_CHAR** - Both country and system code preamble\n\n###ScannerConfig.SecurityLevel\nThe scanner offers four levels of decode security for UPC/EAN bar codes. Select higher security levels for lower quality bar codes. There is an inverse relationship between security and decode speed, so be sure to choose only that level of security necessary for the application.\n\n**Example Usage:**\n\n    :::java\n    SecurityLevel.LEVEL_0;\n\n**Values:**\n\n**LEVEL_0** - This setting allows the scanner to operate fastest, while providing.\n\n**LEVEL_1** - As bar code quality levels diminish, certain characters become prone to misdecodes before others (i.e., 1, 2, 7, 8). If the scanner is misdecoding poorly printed bar codes, and the misdecodes are limited to these characters, select this security level.\n\n**LEVEL_2** - If the scanner is misdecoding poorly printed bar codes, and the misdecodes are not limited to characters 1, 2, 7, and 8, select this security level.\n\n**LEVEL_3** - If the scanner is still misdecoding, select this security level. Be advised, selecting this option is an extreme measure against misdecoding severely out of spec bar codes. Selecting this level of security can significantly impair the decoding ability of the scanner. If this level of security is necessary, try to improve the quality of the bar codes\n\n###ScannerConfig.SkipOnUnSupported\n\n**Values:**\n\n**NONE** - Throws exception on any unsupported parameters or values.\n\n**UNSUPPORTED_PARAM** - Skips the only unsupported paramter and continues with next.\n\n**UNSUPPORTED_VALUE** - Skips the only unsupported values and continues with next.\n\n**ALL** - Skips both unsupported paramters and values and continues with next.\n\n###ScannerConfig.SupplementalMode\nSupplemental modes\n\n**Example Usage:**\n\n    :::java\n    SupplementalMode.NO;\n\n**Values:**\n\n**NO** - The scanner is presented with a UPC/EAN plus supplemental symbol, the scanner decodes UPC/EAN and ignores the supplemental characters.\n\n**ALWAYS** - The scanner only decodes UPC/EAN symbols with supplemental characters, and ignores symbols without supplementals.\n\n**AUTO** - The scanner decodes UPC/EAN symbols with supplemental characters immediately . If the symbol does not have a supplemental, the scanner must decode the bar code the number of times set via UPC/EAN Supplemental Redundancy before transmitting its data to confirm that there is no supplemental.\n\n**SMART** - Enables smart supplementals. In this mode the decoder returns the decoded value of the main block right away if it does not belong to one of the following supplemental types: 378, 379, 977, 978, 979, 414, 419, 434 or 439. If the bar code starts with one of the prefixes it searches the image more aggressively for a supplemental. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\n**S_378_379** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 378 or 379. Disables reading of supplementals for any other UPC/EAN bar code not starting with 378 or 379. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\n**S_978_979** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 978 or 979. Disables reading of supplementals for another UPC/EAN bar code not starting with 978 or 979. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\n**S_414_419_434_439** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 414, 419, 434 or 439. Disables reading of supplementals for another UPC/EAN bar code 4 - 16 not starting with 414, 419, 434 or 439. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\n**S_977** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 977. Disables reading of supplementals for another UPC/EAN barcode not starting with 977. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\n###ScannerConfig.UccLinkMode\nDescribes the UCC link mode state.\n\n**Example Usage:**\n\n    :::java\n    UCCLinkMode.LINK_FLAG_IGNORED;\n\n**Values:**\n\n**LINK_FLAG_IGNORED** - 1D component is transmitted regardless of whether a 2D component is detected.\n\n**ALWAYS_LINKED** - 1D and the 2D components are transmitted. If 2D is not present, the 1D component is not transmitted.\n\n**AUTO_DISCRIMINATE** - the digital scanner determines if there is a 2D portion, then transmits the 1D component, as well as the 2D portion if present (default). (default).\n\n###ScannerConfig.VerifyCheckDigit\nCheck the integrity of all Code 11 symbols to verify that the data complies with the specified check digit algorithm. This selects the check digit mechanism for the decoded Code 11 bar code.\n\n**Example Usage:**\n\n    :::java\n    VerifyCheckDigit.NO;\n\n**Values:**\n\n**NO** - Do not verify check digit.\n\n**ONE** - Bar code contains one check digit.\n\n**TWO** - Bar code contains two check digits.\n\n###ScannerConfig.ViewFinderMode\nConfigures the Viewfinder modes supported for camera scanning. \n\n**Example Usage:**\n\n    :::java\n    ViewFinderMode.ENABLED;\n\n**Values:**\n\n**ENABLED** - Viewfinder enabled. Displays the images captured by the camera on the screen.\n\n**STATIC_RECTICLE** - Viewfinder enabled with locate reticle. Displays the viewfinder as well as draws a red reticle in the center of the screen which helps with tracking the barcode.\n\n###ScannerConfig.PowerMode\nSet laser scanner power mode. \n\n**Values:**\n\n**LOW** - Lowest power, but slowest performance.\n\n**OPTIMIZED** - Power level adjusts with scanning usage.\n\n**HIGH** - High power, and excellent performance.\n\n**ALWAYS_ON** - Highest power, fastest performance.\n\n"},{"key":"api-ScannerException","name":"ScannerException","md":"#ScannerException\n\nThe methods of barcode scanning object throws ScannerException when an error occurs. The error could be due to:\n\n1. Client using the API incorrectly OR\n2. because an unexpected error occurred\n\n##Public Methods\n###getResult()\nReturns the ScannerResults enum value.\n\n**Returns:**\n\ncom.symbol.emdk.barcode.BarcodeManager.ScannerResults"},{"key":"api-ScannerInfo","name":"ScannerInfo","md":"#ScannerInfo\nScannerInfo provides information of the scanner device.\n\n**Example Usage:**\n\n    :::java\n    scannerInfo.getFriendlyName();\n\n**Version:**\n\n3.0\n\n##Public Methods\n###getConnectionType()\nReturns the scanner connection type to mobile computer Note: The connection type information is not available on Scanner Framework 1.18.P03 on TC55 REV A device.\n\n**Example Usage:**\n\n    :::java\n    ConnectionType deviceType = scannerInfo.getConnectionType();\n\n**Returns:**\n\ncom.symbol.emdk.barcode.ScannerInfo.ConnectionType - Returns the ConnectionType\n\n###getDecoderType()\nReturns the barcode scanning type supported by scanner. Note: The decoder type information is not available on Scanner Framework 1.18.P03 on TC55 REV A device.\n\n**Example Usage:**\n\n    :::java\n    DecoderType decoderType = scannerInfo.getScannerInfo().getDecoderType();\n\n**Returns:**\n\ncom.symbol.emdk.barcode.ScannerInfo.DecoderType - Returns the DECODER_TYPE\n\n###getDeviceType()\nReturns the scanner device type.\n\n**Example Usage:**\n\n    :::java\n    DeviceType deviceType = scannerInfo.getDeviceType();\n\n**Returns:**\n\ncom.symbol.emdk.barcode.ScannerInfo.DeviceType - Returns the DeviceType\n\n###getFriendlyName()\nReturns the friendly name of the Device.\n\n**Example Usage:**\n\n    :::java\n    String name = scannerInfo.getFriendlyName();\n\n**Returns:**\n\njava.lang.String - Returns the friendly name\n\n###getModelNumber()\nReturns the scanner device model number. This information will be available only after the scanner is enabled. Note: The model number is supported on the Scanner Framework version 3.0.11 or later.\n\n**Example Usage:**\n\n    :::java\n    String model = scannerInfo.getModelNumber();\n\n**Returns:**\n\njava.lang.String - Returns the model string\n\n###isConnected()\n\n**Returns:**\n\nboolean\n\n###isDefaultScanner()\nReturns true if it is a default scanner else false.\n\n**Returns:**\n\nboolean\n\n##Public Enums\n###ScannerInfo.ConnectionType\nList of supported scanner connection types.\n\n**Example Usage:**\n\n    :::java\n    ConnectionType.INTERNAL;\n\n**Values:**\n\n**INTERNAL** - The scanner device connected internally within the mobile device.\n\n**BLUETOOTH_SSI** - The scanner device connected via Bluetooth to the mobile device.\n\n**SERIAL_SSI** - The scanner device connected via serial SSI to the mobile device.\n\n**USB** - The scanner device connected via USB to the mobile device.\n\n**UNDEFINED** - Connection type is not defined.\n\n###ScannerInfo.DecoderType\nThis lists all the barcode types supported by scanners.\n\n**Example Usage:**\n\n    :::java\n    DecoderType.ONE_DIMENSIONAL\n\n**Values:**\n\n**ONE_DIMENSIONAL** - Barcode scanning is 1-D only.\n\n**TWO_DIMENSIONAL** - Barcode scanning is 2-D. This supports both 1-D and 2-D barcode scanning.\n\n**UNDEFINED** - Decoder type not defined.\n\n###ScannerInfo.DeviceType\nList of supported scanner device types.\n\n**Example Usage:**\n\n    :::java\n    DeviceType.LASER;\n\n**Values:**\n\n**CAMERA** - The Scanner device class is camera.\n\n**IMAGER** - The scanner device class is imager.\n\n**LASER** - The scanner device class is laser.\n\n**UNDEFINED** - The scanner device class is not defined."},{"key":"api-StatusData","name":"StatusData","md":"#StatusData\nStatusData class provides access to scanner status.\n\n**Example Usage:**\n\n    :::java\n    statusData.getState();\n\n**Version:**\n\n3.0\n\n##Public Methods\n###getFriendlyName()\nReturns the friendly name of scanner for which the status data is returned.\n\n**Returns:**\n\njava.lang.String - Returns scanner index to the supported devices list.\n\n###getState()\nReturns the scan event state.\n\n**Returns:**\n\ncom.symbol.emdk.barcode.StatusData.ScannerState\n\n##Public Enums\n###StatusData.ScannerStates\nDefines the different states of the barcode scanner.\n\n**Values:**\n\n**IDLE** - Scanner is enabled but no reads are pending.\n\n**WAITING** - Scanner has issued reads request and is waiting for trigger event. \n\n**SCANNING** - Scanner beam is on and it is acquiring data.\n\n**DISABLED** - Scanner is not enabled.\n"},{"key":"api-VersionManager","name":"VersionManager","md":"#VersionManager\nVersion information can be captured from this class.\n\n**Example Usage:**\n\n\t:::java\n\t@Override\n\tpublic void onOpened(EMDKManager emdkmanager)\n\t{\n\tVersionManager versionManager = (VersionManager)emdkmanager.getInstance(FEATURE_TYPE.VERSION);\n\t}\n\n**Version:**\n\n2.0\n\n##Public Methods\n\n###getVersion(VersionManager.VERSION_TYPE versionKey)\n\nGets the version of the specified [VersionManager.VERSION_TYPE](#api-VersionManager?VERSION_TYPE)\n\n**Example Usage:**\n\n\t:::java\n\tversionManager.getVersion(VERSION_TYPE.EMDK)\n\n**Parameters:**\n\n**versionKey** - [VersionManager.VERSION_TYPE](#api-VersionManager?VERSION_TYPE)\n\n**Returns:**\n\njava.lang.String - Version number\n\n##Public Enums\n\n###VERSION_TYPE\nAll the version keys for [VersionManager.getVersion(VersionManager.VERSION_TYPE)](#api-VersionManager?getVersion(VersionManager.VERSION_TYPE)) are enumerated here.\n\n**Example Usage:**\n\n\t:::java\n\tVERSION_TYPE.EMDK\n\n**Values:**\n\n* **EMDK(\"EMDK\")** - EMDK version\n\n* **MX(\"MX\")** - MX framework version\n\n* **BARCODE(\"BARCODE\")** - Barcode Scanner Framework version.\n"},{"key":"guide-about","name":" About EMDK For Android","md":"# About EMDK For Android\n\n## Overview\nThe EMDK for Android provides developers with a comprehensive set of tools to easily create powerful line of business applications for enterprise mobile computing devices and is designed for use with Google's Android SDK and Android Development Tools (ADT). The EMDK for Android includes class libraries, sample applications with source code, as well as all of the associated documentation to help your applications take full advantage of what our devices have to offer.\n\nIt also includes an exclusive Profile Manager Technology within the Eclipse IDE, providing a GUI based development tool. This allows you to write fewer lines of code resulting in reduced development time, effort and errors.\n\n## Requirements\nThe following software must be installed prior to using the EMDK for Android.\n\n* Microsoft Windows 7 (32-bit and 64-bit)  or Microsoft&copy; Windows 8 (32-bit and 64-bit) or Microsoft&copy; Windows 8.1 (32-bit and 64-bit)\n* Java Development Kit (JDK) v7u45 or higher\n* Android Developer Tools (ADT) v22.3.0-887826 or higher\n\n## Devices Supported\nAlthough EMDK for Android has been designed to work with all Symbol mobile computers running Android, the following devices have been used for validation:\n\n* MC32 - OS Update image v00002 or higher (JellyBean)\n* MC40 - OS Update image v02.08.0520 or higher (JellyBean)\n* MC67 - OS Update image v01.28.14 or higher (JellyBean)\n* TC55 - OS Update image v01.74.00 or higher (JellyBean)\n\n## What's New\n\n* Native [Java Barcode Scanning APIs](#guide-reference-EMDKList)\n* New [EMDK Profiles](#guide-profiles-usingwizard) features:\n\t* [Settings Manager](#guide-profiles-refSettingsManager) - turn on/off ability to invoke Enterprise Reset in settings UI\n\t* [Touch Manager](#guide-profiles-refTouchManager) - set the device's touch mode\n\t* [UI Manager](#guide-profiles-refUIManager) - configure clipboard behavior\n\t* [USB Manager](#guide-profiles-refUSBManager) - manage USB configurations behavior\n\t* [Wireless Manager](#guide-profiles-refWirelessManager) - enable or disable Bluetooth\n* Updated [EMDK Profiles](#guide-profiles-usingwizard) features:\n\t* [Access Manager](#guide-profiles-refAccessManager) - new Whitelist features\n\t* [App Manager](#guide-profiles-refAppManager) - new Dynamic Protected List ability\n\t* [Clock](#guide-profiles-refClockManager) - new NTP server synchronization\n* New Tutorials\n\t* [Barcode Scanning API (Basic)](#guide-tutorial-tutBasicScanningAPI)\n\t* [Barcode Scanning API (Advanced)](#guide-tutorial-tutAdvancedScanningAPI)\n\t* [Invoke Enterprise Reset in Settings UI](#guide-tutorial-tutMxSettingsManager)\n\t* [Specify Touch Mode using Mx Touch Manager](#guide-tutorial-tutMxTouchManager)\n\t* [Configure Clipboard using Mx UI Manager](#guide-tutorial-tutMxUIManager)\n\t* [Manage USB Configurations](#guide-tutorial-tutMxUSBManager)\n\t* [Configure Bluetooth using Mx Wireless Manager](#guide-tutorial-tutMxWirelessManager)\n\n## Components\n\n### Profile Manager\nThe EMDK's exclusive [Profile Manager](#guide-profiles-usingwizard) Technology is an additional advantage for developers giving you a GUI based development tool built on our open framework. This allows you to write fewer lines of code resulting in reduced development time, effort and errors. This innovative feature not only gives you easy access to critical functions such as bar code scanning and transaction processing via a magnetic stripe reader (MSR) but also functionality not available in Google's Android SDK.   \n### EMDK Device Runtimes\nIn order for your application to use the EMDK For Android, you will need to install the EMDK Device Runtime on each device. This runtime is included with the EMDK For Android installation. Check the [Programmers Guide](#guide-tutorial-tutdatacaptureprofile) for instructions. In the future the EMDK Services will be included with the default operating system for the device.\n\n### Samples & Programmer's Guide\nThere are sample projects that are included as part of the EMDK For Android installation. You can import the project into Eclipse and run on your device. Look at the [Sample Guide](#guide-sample-sampledatacaptureprofile) for more details on using these samples. You can also reference the [Programmers Guide](#guide-tutorial-tutdatacaptureprofile) for a complete walk-through of building your first EMDK For Android application.\n\n### Java APIs\nThe EMDK for Android offers access to the device's Barcode capabilities through [traditional native Java Barcode APIs](#guide-reference-EMDKList). Be sure to look at the [Barcode Scanning API tutorial.](#guide-tutorial-tutBasicScanningAPI)\n\n### Intent APIs\nThe EMDK for Android will continue to support the [DataCapture](#guide-reference-refdatacaptureintent) and [Battery Intent](#guide-reference-refbatteryintent) APIs that were previously available on individual device types. \n\n<a name=\"faqs\"></a>\n\n## Frequently Asked Questions\n**Q: Where can I download a copy of the EMDK for Android?**\n\nA: The EMDK for Android can be downloaded from Support Portal [here](https://portal.motorolasolutions.com/Support/US-EN/Mobile+Networks+RFID+and+BarCode+Scanners/Mobile+Computers/Developer+Kits+and+Software+Tools/Mobile%20Computer%20Software%20and%20Developer%20Tools_US-EN)\n\n**Q: Is there a cost for the EMDK for Android?**\n\nA: No, EMDK for Android is available for free and can be downloaded from Support Portal [here](https://portal.motorolasolutions.com/Support/US-EN/Mobile+Networks+RFID+and+BarCode+Scanners/Mobile+Computers/Developer+Kits+and+Software+Tools/Mobile%20Computer%20Software%20and%20Developer%20Tools_US-EN)\n\n**Q: Which device does the EMDK for Android support and which operating systems?**\n\nA: The EMDK for Android supports the following Jelly Bean devices only:\n\n* MC32\n* MC40\n* MC67\n* TC55\n\n**Q: Which desktop operating systems are supported by the EMDK for Android support?**\n\nA: The EMDK for Android  is supported on Windows 7, Windows 8 and Windows 8.1.\n\n**Q: Can the EMDK for Android be installed on Windows XP?**\n\nA: No, the EMDK for Android does not support Windows XP and there are no current plans to support this operating system.\n\n**Q: Can the EMDK for Android be installed on a MAC?**\n\nA: No, the EMDK for Android does not support MAC OS. MAC support will be considered in a future release of the EMDK for Android. However you can use virtualization solutions such as VMware fusion to run one of the supported Windows operating systems on a MAC.\n\n**Q: Can the EMDK for Android be used with Android Studio?**\n\nA: No, the EMDK for Android does not support Android Studio. Support for Android Studio will be made available in a future release of the EMDK for Android.\n\n**Q: What documentation is available for EMDK for Android and where can I obtain it?**\n\nA: Besides this self contained set of documentation, additional and/or updated documentation for the EMDK can be found on the LaunchPad here:\n\n* [EMDK Landing page](https://developer.motorolasolutions.com/community/android/emdk) \n* [Tutorials](https://developer.motorolasolutions.com/community/android/emdk/tutorials) \n* [Samples](https://developer.motorolasolutions.com/community/android/emdk/samples) \n* [API Reference](https://developer.motorolasolutions.com/community/android/emdk/reference) \n* [Profile Manager](https://developer.motorolasolutions.com/community/android/emdk/profiles)\n\n**Q: Will my app run across the entire MSI android portfolio?**\n\nA: EMDK for Android is designed to be compatible with all Symbol devices, Android OS and BSPs. However, the compatibility of your application will depend on not just the EMDK architecture, but also on Google's SDK. See above for what versions were validated.\n\n**Q: Can the EMDK for Android be used as a staging tool?**\n\nA: The EMDK for Android is targeted for developers and the development of applications. Customers may develop an application which configures aspects of a device however the EMDK is not a staging tool.\n\n**Q: I understand the EMDK for Android offers a feature called Profile Manager, what is this?**\n\nA: The Profile Manager is provided as an Eclipse plug-in that offers developers a GUI development tool. The tool creates a \"profile\" which is comprised of \"profile features\" defined by the developer for value-add capabilities such as Barcode Scanning & MSR as well as device configuration features like Clock, Power, Certificates and Application Access. These features can then be invoked and modified within the applications through the Profile Manager API.\n\n**Q: What are the benefits of the Profile Manager GUI and API?**\n\nA: The Profile Manager GUI and APIs allow you to, quickly and easily leverage device value-add features. The user interface makes it easy for developers to pick and choose the features they need, eliminating the need to code these options. With the Profile Manager API, developers can invoke and modify features as needed within their application. This gives you the fine level of control you need while reducing development time, effort and errors.\n\n**Q: Does the EMDK for Android offer APIs for direct control of device value adds?**\n\nA: Yes, the since version 3.0 of EMDK for Android, traditional Java APIs have been made available to provide Barcode scanning abilities. Other device value adds may be provided using this mechanism in the future.\n\n**Q: I understand that the EMDK for Android supports Intents; what is an Intent?**\n\nA: An Intent is a standard Android inter-application messaging mechanism. For more information please see Google's documentation on Android Intent; http://developer.android.com/reference/android/content/Intent.html\n\n**Q: How does Mobility Extensions (MX) relate to the EMDK for Android?**\n\nA: The EMDK for Android provides developers with a programmatic interface to the MX value-add features on our devices. Future releases of the EMDK for Android will offer additional features as we continue to expand MX capabilities.\n\n**Q: I have started developed of my application with the EMDK for Android, what are the features of the EMDK and what are my alternatives?**\n\nA: The EMDK for Android is designed to expose MX value-add features and provides developers with a GUI tool to help reduce the development effort. Many of the device specific features such as Barcode scanning and MSR will be provided as part of the EMDK for Android. However standard Android APIs from Google such as Audio and Keyboard will not.\n \nThe intent of the EMDK is to provide developers with commonly required programmatic features for Line of Business applications. The EMDK for Android is meant to be used alongside the Google Android SDK to provide developers a comprehensive set of features without having to have a signed application. Below is a list of key features and there availability within the EMDK for Android and Google's Android SDK. This is meant to be used as a reference guide to provide clarity on when to use the EMDK versus the Android SDK. \n\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>Feature</th>\n\t\t<th>EMDK for Android</th>\n\t\t<th>Google Android SDK</th>\n\t</tr>\n\t<tr>\n\t\t<td>Barcode / Scanning</td>\n\t\t<td> Data Capture Intent <br/>Barcode Profile<br/>Barcode API</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Image Capture</td>\n\t\t<td></td>\n\t\t<td>android.hardware.camera</td>\n\t</tr>\n\t<tr>\n\t\t<td>MagStripe Reader</td>\n\t\t<td>Data Capture Intent<br/>MSR Profile</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Wi-Fi Settings</td>\n\t\t<td>Wi-Fi Profile</td>\n\t\t<td>android.net.wifi.WifiManager <br/>android.net.wifi.p2p.WifiP2pManager</td>\n\t</tr>\n\t<tr>\n\t\t<td>Fusion Settings</td>\n\t\t<td>Wi-Fi Profile</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Battery Mgt (Symbol.ResCoord)</td>\n\t\t<td>Battery Intent</td>\n\t\t<td>android.os.BatteryManager</td>\n\t</tr>\n\t<tr>\n\t\t<td>Keyboard (Symbol.Keyboard)</td>\n\t\t<td></td>\n\t\t<td>android.inputmethodservice.Keyboard.Key</td>\n\t</tr>\n\t<tr>\n\t\t<td>Battery Management</td>\n\t\t<td>Battery Intent</td>\n\t\t<td>android.os.BatteryManager</td>\n\t</tr>\n\t<tr>\n\t\t<td>GPRS (APN) Settings</td>\n\t\t<td>GPRS Profile</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>File management</td>\n\t\t<td>Application Mgr Profile</td>\n\t\t<td>java.io.File</td>\n\t</tr>\n\t<tr>\n\t\t<td>Silent APK Install</td>\n\t\t<td>Application Mgr Profile</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Application White Listing</td>\n\t\t<td>Access Mgr Profile</td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Display Attributes</td>\n\t\t<td>Touch Profile Manager</td>\n\t\t<td>android.view.Display</td>\n\t</tr>\n\t<tr>\n\t\t<td>Audio Settings</td>\n\t\t<td></td>\n\t\t<td>android.media.AudioManager</td>\n\t</tr>\n\t<tr>\n\t\t<td>Sensor (Symbol.Sensor)</td>\n\t\t<td></td>\n\t\t<td>android.hardware.SensorManager</td>\n\t</tr>\n\t<tr>\n\t\t<td>Bluetooth Settings</td>\n\t\t<td>Wireless Profile Manager</td>\n\t\t<td>android.BluetoothAdapter</td>\n\t</tr>\n\t<tr>\n\t\t<td>SQL Database Management</td>\n\t\t<td></td>\n\t\t<td>android.database.sqlite</td>\n\t</tr>\n\t<tr>\n\t\t<td>NFC</td>\n\t\t<td></td>\n\t\t<td>android.nfc</td>\n\t</tr>\n\t<tr>\n\t\t<td>Notifications</td>\n\t\t<td></td>\n\t\t<td>android.service.notification</td>\n\t</tr>\n\t<tr>\n\t\t<td>Printing</td>\n\t\t<td></td>\n\t\t<td>android.print</td>\n\t</tr>\n\t<tr>\n\t\t<td>XML Serialization</td>\n\t\t<td></td>\n\t\t<td>org.xmlpull.v1.XmlSerializer <br/> org.xml.sax</td>\n\t</tr>\n\t<tr>\n\t\t<td>Interop Services</td>\n\t\t<td></td>\n\t\t<td>Java Native Interface</td>\n\t</tr>\n\t<tr>\n\t\t<td>Threading</td>\n\t\t<td></td>\n\t\t<td>java.lang.Thread</td>\n\t</tr>\n\t<tr>\n\t\t<td>Encryption</td>\n\t\t<td></td>\n\t\t<td>javax.crypto</td>\n\t</tr>\n\t<tr>\n\t\t<td>Message Queue</td>\n\t\t<td></td>\n\t\t<td>android.os.MessageQueue</td>\n\t</tr>\n\t<tr>\n\t\t<td>Network Communications</td>\n\t\t<td></td>\n\t\t<td>java.net.Socket</td>\n\t</tr>\n</table>\n\n\n\n\n\n\n"},{"key":"guide-abouthelp","name":"About EMDK For Android Help","md":"#About EMDK For Android Help\n\n##Overview\n\nWelcome to the EMDK for Android Technical Documentation. This help system allows you to browse the EMDK For Android documentation on your local computer and features many tools for navigating and searching through the content. The documentation for the latest version is also published to [Launchpad](https://developer.motorolasolutions.com/community/android/emdk) and may contain additional or updated content.\n\n##Help Features\n\n###Table of Contents:\n\nThe menu on the left hand side of the page can be used to navigate through the varies documents contained inside this help application.  \n\n![img](images/about/toc1.png)\n\nThe documents are broken in to categories that can be drilled down to.\n\n![img](images/about/toc3.png)\n\nThe menu icon will allow you to collapse and expand the \"Table of Contents\".\n\n![img](images/about/toc2.png)\n \n###Search:\n\nAt the top of the page you will see a search box. \n\n![img](images/about/s1.png)\n\nThis box will search all documents in the system and highlight selected terms in the current document. You can switch between relevant documents buy selecting the document in \"Search Results\". You can minimize the \"Search Results\" by clicking on the \"-\" icon. You can bring the \"Search Results back by click on the search bar. \n\n![img](images/about/s2.png)\n\nAt the bottom right hand side of the page you will see next and previous buttons that will allow you to move through the selected items. \n\n![img](images/about/s3.png)\n\nAfter searching, if you browse to another page the search terms will automatically be used to bring you to the first found entry. Clearing the search results field will prevent this behavior.\n\n###In This Document:\n\nIn This document is a list of the main sections in the current document. When Selecting a link the document the document will scroll to the selected section, and show any sub sections. \n\n![img](images/about/itd1.png)\n\n###Versions:\n\nOn the top of the page you will see a branch icon. This icon allows you to select which version of the documentation you would like to use. The version corresponds with the version of the EMDK For Android being used. \n\n![img](images/about/v1.png)\n\n \n###Image Viewer:\n\nWhen click on an image the image will open up at 100% in an in page pop up. If the image is bigger then your screen you will be able to scroll the image inside the pop up. If you click on the image in the pop up it will open in a new tab. Clicking the [X] in the pop up or clicking outside the pop up will close it.\n\n![img](images/about/lb1.png)\n\n### External Links\n\nWhen clicking on a link that is an external website, the url will be opened in a new tab of your browser.\n\n##Supported Web Browsers\n\n* Firefox 29 or newer\n* Google Chrome 35 or newer \n* Internet Explore 9 or newer"},{"key":"guide-eula","name":" End User License Agreement : EMDK For Android","md":"# End User License Agreement : EMDK For Android\n\nMOTOROLA SOLUTIONS, INC. END USER LICENSE AGREEMENT\nBY INSTALLING AND/OR USING THIS PRODUCT, YOU ACKNOWLEDGE THAT YOU HAVE READ THIS AGREEMENT, UNDERSTAND IT AND AGREE TO BE BOUND ITS TERMS. IF YOU DO NOT AGREE TO THE TERMS OF THIS AGREEMENT, MOTOROLA SOLUTIONS IS NOT WILLING TO LICENSE THE PRODUCT TO YOU, AND YOU MUST NOT USE OR INSTALL THIS PRODUCT.\nGrant of License. Motorola Solutions grants you ('Licensee' or 'you') a personal, nonexclusive, nontransferable, nonassignable, no cost license to use the software and documentation ('Product(s)') subject to the terms and conditions of this Agreement. You shall use the Products only for your internal business purposes, exclusively to support Motorola Solutions devices. Any use of the Products outside of the conditions set forth herein is strictly prohibited and will be deemed a breach of this Agreement resulting in immediate termination of your License. In the event of a breach of this Agreement, Motorola Solutions will be entitled to all available remedies at law or in equity (including immediate injunctive relief and repossession of all Products unless Licensee is a Federal agency of the United States Government).\nYou shall not distribute, sublicense, rent, loan, lease, export, re-export, resell, ship or divert or cause to be exported, re-exported, resold, shipped or diverted, directly or indirectly, the Products under this Agreement. You shall not, and shall not permit others to: (i) modify, translate, decompile, bootleg, reverse engineer, disassemble, or extract the inner workings of the Products, (ii) copy the look-and-feel or functionality of the Products; (iii) remove any proprietary notices, marks, labels, or logos from the Products; (iv) rent or transfer all or some of the Products to any other party without Motorola Solutions' prior written consent; or (v) utilize any computer software or hardware which is designed to defeat any copy protection device, should the Products be equipped with such a protection device. Title to all copies of Products will not pass to Licensee at any time and remains vested exclusively in Motorola Solutions. All intellectual property developed, originated, or prepared by Motorola Solutions in connection with the Products remain vested exclusively in Motorola Solutions, and this Agreement does not grant to Licensee any intellectual property rights.\nPortions of the Products are protected by United States patent and copyright laws, international treaty provisions, and other applicable laws. Therefore, you must treat the Products like any other copyrighted material (e.g., a book or musical recording) except that you may make one copy of the Product solely for back-up purposes. Unauthorized duplication of the Products constitutes copyright infringement, and in the United States is punishable in federal court by fine and imprisonment.\nDisclaimer. MOTOROLA SOLUTIONS MAKES, AND YOU RECEIVE, NO WARRANTIES OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY, OR IN ANY COMMUNICATION WITH YOU. MOTOROLA SOLUTIONS SPECIFICALLY DISCLAIMS ANY WARRANTY INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILTY, NONINFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. THE PRODUCTS ARE PROVIDED \"AS IS.\" MOTOROLA SOLUTIONS DOES NOT WARRANT THAT THE PRODUCTS WILL MEET YOUR REQUIREMENTS, OR THAT THE OPERATION OF THE PRODUCTS WILL BE UNINTERRUPTED OR ERROR FREE, OR THAT DEFECTS IN THE PRODUCTS WILL BE CORRECTED. MOTOROLA SOLUTIONS MAKES NO WARRANTY WITH RESPECT TO THE CORRECTNESS, ACCURACY, OR RELIABILITY OF THE PRODUCTS. Some jurisdictions do not allow the exclusion of implied warranties, so the above exclusion may not apply to you. Limitation of Liability. THE TOTAL LIABILITY OF MOTOROLA SOLUTIONS UNDER THIS AGREEMENT FOR DAMAGES SHALL NOT EXCEED THE FAIR MARKET VALUE OF THE PRODUCTS LICENSED UNDER THIS AGREEMENT. IN NO EVENT WILL MOTOROLA SOLUTIONS BE LIABLE IN ANY WAY FOR INCIDENTAL, CONSEQUENTIAL, INDIRECT, SPECIAL OR PUNITIVE DAMAGES OF ANY NATURE, INCLUDING WITHOUT LIMITATION, LOST BUSINESS PROFITS, OR LIABILITY OR INJURY TO THIRD PERSONS, WHETHER FORESEEABLE OR NOT, REGARDLESS OF WHETHER MOTOROLA SOLUTIONS HAS BEEN ADVISED OF THE POSSIBLITY OF SUCH DAMAGES. Some jurisdictions do not permit limitations of liability for incidental or consequential damages, so the above exclusions may not apply to you. This Limitation of Liability provision survives the termination of this Agreement and applies notwithstanding any contrary provision in this Agreement. Licensee must bring any action under this Agreement within one (1) year after the cause of action arises.\nMaintenance. Unless provided for in a separate agreement, Motorola Solutions shall not be responsible for maintenance or field service of the Products. High Risk Activities. The Products are not fault-tolerant and are not designed, manufactured or intended for use or resale as on-line control software in hazardous environments requiring fail-safe performance, such as in the operation of nuclear facilities, aircraft navigation or communication systems, air traffic control, direct life support machines, or weapons systems, in which the failure of the Products could lead directly to death, personal injury, or severe physical or environmental damage ('High Risk Activities'). Motorola Solutions and its suppliers specifically disclaim any express or implied warranty of fitness for High Risk Activities, and if you elect to use the Products in any High Risk Activities, you agree to indemnify, defend, and hold Motorola Solutions harmless from and against any and all costs, damages, and losses related to that use.\nU.S. Government. If you are acquiring the Products on behalf of any unit or agency of the U.S. Government, the following shall apply. Use, duplication, or disclosure of the Products is subject to the restrictions set forth in subparagraphs (c) (1) and (2) of the Commercial Computer Software - Restricted Rights clause at FAR 52.227-19 (JUNE 1987), if applicable, unless being provided to the Department of Defense. If being provided to the Department of Defense, use, duplication, or disclosure of the Products is subject to the restricted rights set forth in subparagraph (c) (1) (ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013 (OCT 1988), if applicable. Products may or may not include a Restricted Rights notice, or other notice referring specifically to the terms and conditions of this Agreement. The terms and conditions of this Agreement shall each continue to apply, but only to the extent that such terms and conditions are not inconsistent with the rights provided to you under the aforementioned provisions of the FAR and DFARS, as applicable to the particular procuring agency and procurement transaction.\nGoverning Law. This Agreement shall be governed by the laws of the United States of America to the extent that they apply and otherwise by the laws of the State of New York without regard to its conflict of laws provisions.\nCompliance with Laws. Licensee will comply with all applicable laws and regulations, including export laws and regulations of the United States. Licensee will not, without the prior authorization of Motorola Solutions and the appropriate governmental authority of the United States, in any form export or re-export, sell or resell, ship or reship, or divert, through direct or indirect means, any item or technical data or direct or indirect products sold or otherwise furnished to any person within any territory for which the United States Government or any of its agencies at the time of the action, requires an export license or other governmental approval. Violation of this provision will be a material breach of this Agreement, permitting immediate termination by Motorola Solutions.\nThird Party Software. The Products may contain one or more items of Third-Party Software. The terms of this Agreement govern your use of any Third-Party Software UNLESS A SEPARATE THIRD-PARTY SOFTWARE LICENSE IS INCLUDED, IN WHICH CASE YOUR USE OF THE THIRD-PARTY SOFTWARE WILL THEN BE GOVERNED BY THE SEPARATE THIRD-PARTY LICENSE. Open Source Software. The Products may contain one or more items of Open Source Software. Open Source Software is software covered by a publicly available license governed solely under Copyright law, whereas the complete terms and obligations of such license attach to a licensee solely through the act of copying, using and/or distribution of the licensed software, such obligations often include one or more of attribution obligations, distribution obligations, copyleft obligations, and intellectual property encumbrances. The use of any Open Source Software is subject to the terms and conditions of this Agreement as well as the terms and conditions of the corresponding license of each Open Source Software package. If there is a conflict between the terms and conditions of this Agreement and the terms and conditions of the Open Source Software license, the applicable Open Source Software license will take precedence. Copies of the licenses for the included Open Source Software, if any, as well as their attributions, acknowledgements, and software information details, are provided in the electronic copy of this Agreement, which is available in the Legal Notices or README file associated with the Product. Motorola Solutions is required to reproduce the software licenses, acknowledgments and copyright notices as provided by the authors and owners, thus, all such information is provided in its native language form, without modification or translation.\nDepending on the license terms of the specific Open Source Software, source code may not be provided. Please reference and review the entire Open Source Software information to identify which Open Source Software packages have source code provided or available. For instructions on how to obtain a copy of any source code made publicly available by Motorola Solutions related to Open Source Software distributed by Motorola Solutions, you may send your request (including the Motorola Solutions Product name and version, along with the Open Source Software specifics) in writing to: Motorola Solutions, Inc., Open Source Software Management, 1301 E. Algonquin Road, Schaumburg, IL 60196 USA.\n\n\nMOTOROLA, MOTO, MOTOROLA SOLUTIONS and the Stylized M Logo are trademarks or registered trademarks of Motorola Trademark Holdings, LLC and are used under license. SYMBOL is a trademark owned by Symbol Technologies, Inc., which is a wholly owned subsidiary of Motorola Solutions, Inc. All other trademarks are the property of their respective owners. &copy; 2011-2013 Motorola Solutions, Inc. All Rights Reserved.\n\n## Download \n<a class='btn btn-primary' href='https://s3.amazonaws.com/emdk/EMDK-A-030004.exe'>I Agree to EULA - Download the Software</a>\n"},{"key":"guide-profiles-profileactivity","name":" Activity Selection Profile Feature Reference","md":"# Activity Selection Profile Feature Reference\n\n## Overview\n\nWhen creating a profile for [Barcode](#guide-profiles-profilebarcode) or [MSR](#guide-profiles-profilemsr) data capture you can configure an Activity Selector to automate the process of activating and deactivating the profile. This allows for automated profile management of complex applications. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n##Activity Selector\n\n* Applications - List of applications this profile may be active during. \n\t* Applications names are the formal package definition of the application. For example \"com.symbol.profiledatacapturesample1\". \n* Activities -  List of activities within the selected application that a profile should be active for. \n\t*  For Example \"MainActivity\"."},{"key":"guide-profiles-profilebarcode","name":" Barcode Profile Feature Reference","md":"# Barcode Profile Feature Reference\n\n## Overview\nIn order to get Barcode data in your application, you must create a profile with two profile features selected:\n\n* Barcode\n* [Keystroke](#guide-profiles-profilekeystroke),[Intent](#guide-profiles-profileintent),[IP](#guide-profiles-profileIP) (Output)\n\nThe `Barcode` feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera. It also contains detailed parameters for scanner behavior as well as individual barcode symbology parameters.\n\nThe `Intent`, `Keystroke` or `IP` feature in the Profile Manager is used to define how the output from the Barcode scanner should be handled\n\n* Intent - The Intent feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application using the Android Intent mechanism. To use this, you should be familiar with how to register to receive intents in your application as well as handling the data that is passed in. You will have the ability to configure how the intent is sent to your application in the profile itself.\n\n* Keystroke - The Keystroke feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application by emulating keystrokes. You will have the option to control how the data is sent as well as if it should have any prefix or suffix automatically added using basic data formatting.\n\n* IP - IP Output allows DataWedge to send captured data to a host computer via a network connection. Captured data can be sent over an IP network to a specified IP address and port using either TCP or UDP transport protocols.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Enabled\nEnables or disables this feature. Default is enabled.\n\n## Scanner Selection\nConfigures which scanning device to use for data capture.\n\n* Auto - Automatically determines the best scanning device. If a Scan Module or Scan/MSR Module is installed on the MC40, then the 2D imager is selected. Otherwise the camera is selected.\n* Camera Scanner - Scanning is performed with the rear-facing camera.\n* 2D Imager - Scanning is performed using the installed Scan or Scan/MSR module.\n\n## Decoders\nConfigures which bar code decoders are enabled or disabled. For best performance disable all unnecessary decoders. By default the most commonly used decoders are enabled (shown below with an asterisk). The supported decoders are:\n\n* Australian Postal \n* Canadian Postal\n* Chinese 2 of 5 \n* Codabar*\n* Code 11\n* Code 39*\n* Code 93 \n* Code 128* \n* Composite AB\n* Composite C \n* Datamatrix* \n* Discrete 2 of 5 \n* Dutch Postal MSI\n* EAN-8*\n* EAN-13*\n* GS1 DataBar* \n* GS1 DataBar Expanded*\n* GS1 DataBar Limited \n* Japanese Postal \n* Korean 3 of 5\n* Interleaved 2 of 5\n* Matrix 2 of 5 \n* Maxicode*\n* MicroPDF\n* MicroQR Aztec*\n* PDF417*\n* QR Code* \n* TLC 39\n* Trioptic 39\n* UK Postal\n* UPC-A*\n* UPC-E0* \n* UPC-E1\n* US4state FICS \n* USPostnet \n* USPlanet\n* Webcode\n\n## UPCA\n* Report Check Digit - The check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option. \n* Preamble - Preamble characters are part of the UPC symbol consisting of Country Code and System Character. There are three options for transmitting a UPCA preamble:\n\t* Preamble None - Transmit no preamble.\n\t* Preamble Sys Char - Transmit System Character only (default).\n\t* Preamble Country and Sys Char - Transmit System Character and Country Code (\"0\" for USA). Select the appropriate option to match the host system.\n\n## UPCE0\n* Report Check Digit - The check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option. \n* Preamble - Preamble characters are part of the UPC symbol consisting of Country Code and System Character. There are three options for transmitting a UPCE0 preamble:\n\t* Preamble Sys Char - Transmit System Character only.\n\t* Preamble Country and Sys Char - Transmit System Character and Country Code (\"0\" for USA).\n\t* Preamble None - Transmit no preamble (default). Select the appropriate option to match the host system.\n* Convert UPCE0 To UPCA - Enable to convert UPCE0 (zero suppressed) decoded data to UPC-A format before transmission. After conversion, the data follows UPC-A format and is affected by UPC-A programming selections. Disable to transmit UPCE0 decoded data as UPCE0 data, without conversion (default - disabled).\n\n## Code128\n* Length1 - Use to set decode lengths (default - 0).\n* Length2 - Use to set decode lengths (default - 55).\n* Redundancy - Sets the reader to read the bar code twice before accepting data. \n* Enable Plain Code 128 - Flag to enable other 128 sub types (besides GS1-128 and ISBT-128).\n* Enable GS1-128 - Set the GS1 128 subtype. \n* Enable ISBT128 - Set the ISBT128 subtype. \n* ISBT128 Concatenation Mode - Select an option for concatenating pairs of ISBT code types:\n\t* Concat Mode Never - Do not concatenate pairs of ISBT codes encountered (default).\n\t* Concat Mode Always - There must be two ISBT codes in order to decode and perform concatenation. Does not decode single ISBT symbols.\n\t* Concat Mode Auto - Decodes and concatenates pairs of ISBT codes immediately. If only a single ISBT symbol is present, the device must decode the symbol the number of times set via Redundancy - Code128 before transmitting its data to confirm that there is no additional ISBT symbol.\n* Check ISBT Table - The ISBT specification includes a table that lists several types of ISBT bar codes that are commonly used in pairs. If ISBT128 Concat Mode is set, enable Check ISBT Table to concatenate only those pairs found in this table. Other types of ISBT codes are not concatenated. \n* Security Level - The scanner offers four levels of decode security for Code 128 bar codes. Select increasing levels of security for decreasing levels of bar code quality. There is an inverse relationship between security and scanner aggressiveness, so choose only that level of security necessary for any given application.\n\t* Security Level 0 - This setting allows the scanner to operate in its most aggressive state, while providing sufficient security in decoding most \"in-spec\" bar codes.\n\t* Security Level 1 - This setting eliminates most misdecodes.\n\t* Security Level 2 - Select this option if Security level 1 fails to eliminate misdecodes.\n\t* Security Level 3 - If Security Level 2 is selected and misdecodes still occur, select this security level. Be advised, selecting this option is an extreme measure against mis-decoding severely out of spec bar codes. Selecting this level of security significantly impairs the decoding ability of the scanner. If this level of security is needed, try to improve the quality of the bar codes.\n\n## Code39\n* Length1 - Use to set decode lengths. \n* Length2 - Use to set decode lengths 4.\n* Verify Check Digit - Enable this feature to check the integrity of all Code 39 symbols to verify that the data complies with a specified check digit algorithm. The digital scanner decodes only those Code 39 symbols that include a modulo 43 check digit. Enable this feature only if the Code 39 symbols contain a modulo 43 check digit (default - disabled).\n* Report Check Digit - Transmit Code 39 data with or without the check digit. \n* Full ASCII - Code 39 Full ASCII is a variant of Code 39 that pairs characters to encode the full ASCII character set. To enable or disable Code 39 Full ASCII,\n* Redundancy - Sets the reader to read the bar code twice before accepting data. \n* Convert Code39 To Code32 - Code 32 is a variant of Code 39 used by the Italian pharmaceutical industry. Scan the appropriate bar code below to enable or disable converting Code 39 to Code 32.\n* Report Code32 Prefix - Scan the appropriate bar code to enable or disable adding the prefix character \"A\" to all Code 32 bar codes.\n* Security Level - Options: Security level 0, Security Level 1, Security Level 2 and Security Level 3.\n\n## Interleaved 2of5\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data. \n* Check Digit\n\t* No Check Digit - A check digit is not used. \n\t* USS Check Digit - Select to check the integrity of all Interleaved 2 of 5 symbols to verify the data complies with either the Uniform Symbology Specification (USS) check digit algorithm.\n\t* OPCC Check Digit - Select to check the integrity of all Interleaved 2 of 5 symbols to verify the data complies with either the Optical Product Code Council (OPCC) check digit algorithm.\n* Report Check Digit - Transmit Interleaved 2 of 5 data with or without the check digit. \n* Convert ITF-14 To EAN13 - Convert 14-character Interleaved 2 of 5 bar codes to EAN-13, and transmit as EAN-13. The Interleaved 2 of 5 bar code must be enabled and must have a leading zero and a valid EAN-13 check digit. \n\n## Composite AB\n* UCC Link Mode\n\t* Link Flag ignored - 1D component is transmitted regardless of whether a 2D component is detected.\n\t* Always Linked - 1D and the 2D components are transmitted. If 2D is not present, the 1D component is not transmitted.\n\t* Auto Discriminate - the digital scanner determines if there is a 2D portion, then transmits the 1D component, as well as the 2D portion if present. (default).\n\n## UK Postal\n* Report Check Digit - Transmit UK Postal data with or without the check digit. \n\n## Codabar\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data. \n* CLSI Editing - Enable this parameter to strip the start and stop characters and insert a space after the first, fifth, and tenth characters of a 14-character Codabar symbol. Enable this feature if the host system requires this data format.\n* NOTIS Editing - Enable this parameter to strip the start and stop characters from a decoded Codabar symbol. Enable this feature if the host system requires this data format.\n* MSI\n* Length 1 - Use to set decode lengths.\n* Length 2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data. \n* Check Digit - With MSI symbols, one check digit is mandatory and always verified by the reader. The second check digit is optional.\n\t* One Check Digit - Verify one check digit.\n\t* Two Check Digits - Verify two check digits.\n* Check Digit Scheme - Two algorithms are possible for the verification of the second MSI check digit.\nSelect the algorithm used to encode the check digit.\n\t* Mod-11-10 - First check digit is MOD 11 and second check digit is MOD 10.\n\t* Mod-10-10 - Both check digits are MOD 10.\n* Report Check Digit - Transmit MSI data with or without the check digit. \n\n## Code93\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data. \n* Discrete 2 of 5\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data. \n\n## Code11\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data. \n* Verify Check Digit - Check the integrity of all Code 11 symbols to verify that the data complies with the specified check digit algorithm. This selects the check digit mechanism for the decoded Code 11 bar code.\n\t* No Check Digit - Do not verify check digit.\n\t* 1 Check Digit - Bar code contains one check digit.\n\t* 2 Check Digits - bar code contains two check digits.\n* Report Check DIgit - Transmit Code 11 data with or without the check digit. \n\n## Webcode\n* Webcode Subtype - Enables the decoding of the GT Webcode subtype. \n* Matrix 2 of 5\n* Length1 - Use to set decode lengths.\n* Length2 - Use to set decode lengths.\n* Redundancy - Sets the reader to read the bar code twice before accepting data. \n* Report Check Digit - Transmit Matrix 2 of 5 data with or without the check digit. \n* Verify Check Digit - Enable this feature to check the integrity of all Matrix 2 of 5 symbols to verify that the data complies with a specified check digit algorithm.\n\n## UPCE1\n* Report Check Digit - The check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option. \n* Preamble - Preamble characters are part of the UPC symbol consisting of Country Code and System Character. There are three options for transmitting a UPCE1 preamble:\n\t* Preamble Sys Char - Transmit System Character only.\n\t* Preamble Country and Sys Char - Transmit System Character and Country Code (\"0\" for USA).\n\t* Preamble None - Transmit no preamble (default). Select the appropriate option to match the host system.\n* Convert UPCE1 To UPCA - Enable this to convert UPCE1 decoded data to UPC-A format before transmission. After conversion, the data follows UPC-A format and is affected by UPC-A programming selections. Disable this to transmit UPCE1 decoded data as UPCE1 data, without conversion.\n\n## Decode Lengths\nThe allowable decode lengths are specified by options Length1 and Length2 as follows: \n\n* Variable length: Decode symbols containing any number of characters.\n\t* Set both Length1 and Length2 to 0.\n* Range: Decode a symbol with a specific length range (from a to b, including a and b).\n\t* Set Length1 to a and set Length2 to b.\n* Two Discrete Lengths: Decode only symbols containing either of two selected lengths.\n\t* Set either Length1 or Length2 to the specific lengths.\n* One Discrete Length: Decode only symbols containing a specific length.\n\t* Set both Length1 and Length2 to the specific length.\n\n## UPC EAN Params\nAllows the configuration of the parameters that apply to more than one UPC or EAN decoder.\n\n* Security Level - The scanner offers four levels of decode security for UPC/EAN bar codes. Select higher security levels for lower quality bar codes. There is an inverse relationship between security and decode speed, so be sure to choose only that level of security necessary for the application.\n\t* Level 0 - This default setting allows the scanner to operate fastest, while providing sufficient security in decoding \"in-spec\" UPC/EAN bar codes.\n\t* Level 1 - As bar code quality levels diminish, certain characters become prone to misdecodes before others (i.e., 1, 2, 7, 8). If the scanner is misdecoding poorly printed bar codes, and the misdecodes are limited to these characters, select this security level.\n\t* Level 2 - If the scanner is misdecoding poorly printed bar codes, and the misdecodes are not limited to characters 1, 2, 7, and 8, select this security level.\n\t* Level 3 - If the scanner is still misdecoding, select this security level. Be advised, selecting this option is an extreme measure against misdecoding severely out of spec bar codes. Selecting this level of security can significantly impair the decoding ability of the scanner. If this level of security is necessary, try to improve the quality of the bar codes.\n* Supplemental2 - Enables or disables this option. \n* Supplemental5 - Enables or disables this option. \n* Supplemental Mode\n\t* No Supplementals - the scanner is presented with a UPC/EAN plus supplemental symbol, the\n\tscanner decodes UPC/EAN and ignores the supplemental characters.\n\t* Supplemental Always - the scanner only decodes UPC/EAN symbols with supplemental characters, and ignores symbols without supplementals.\n\t* Supplements Auto - the scanner decodes UPC/EAN symbols with supplemental characters immediately. If the symbol does not have a supplemental, the scanner must decode the bar code the number of times set via UPC/EAN Supplemental Redundancy before transmitting its data to confirm that there is no supplemental.\n\t* Supplemental Smart - Enables smart supplementals. In this mode the decoder returns the decoded value of the main block right away if it does not belong to one of the following supplemental types: 378, 379, 977, 978, 979, 414, 419, 434 or 439. If the bar code starts with one of the prefixes it searches the image more aggressively for a supplemental. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\t* Supplemental 378-379 - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 378 or 379. Disables reading of supplementals for any other UPC/EAN bar code not starting with 378 or 379. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\t* Supplemental 978-979 - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 978 or 979. Disables reading of supplementals for another UPC/EAN bar code not starting with 978 or 979. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main barcode is returned.\n\t* Supplemental 414-419-434-439 - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 414, 419, 434 or 439. Disables reading of supplementals for another UPC/EAN bar code not starting with 414, 419, 434 or 439. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n\t* Supplemental 977 - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 977. Disables reading of supplementals for another UPC/EAN barcode not starting with 977. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.\n* Retry Count - Retry count for auto-discriminating for supplementals. Possible values are 2 to 20 inclusive. Note that this flag is only considered if Supplemental Mode - UPC EAN is set to one of the following values: Supplementals Auto, Supplementals Smart, Supplementals 378-379, Supplementals 978-979, Supplementals 977 or Supplementals 414-419-434-439 (2 to 20).\n* Bookland - Enable or disable this option. \n* Coupon - Enables Coupon code decoding. Note that in order to successfully decode Coupon codes, all\nof the correct decoders must be enabled. \n* Convert DataBar To UPC EAN - If this is set it converts DataBar bar codes to UPC/EAN format. For this setting to work UPC/EAN symbologies must be enabled. \n\n## Reader Params\nAllows the configuration of parameters specific to the selected bar code reader.\n\n* Beam Timer - Sets the maximum amount of time that the reader remains on (0 - 60,000 ms in increments of 100 ms). A value of 0 sets the reader to stay on indefinitely.\n* Linear Security Level - Sets the number of times a bar code is read to confirm an accurate decode.\n\t* Security Redundancy and Length - Two times read redundancy based on redundancy flags and\n\tcode length.\n\t* Security Short or Codabar - Two times read redundancy if short bar code or Codabar.\n\t* Security All Twice - Two times read redundancy for all bar codes.\n\t* Security Long and Short - Two times read redundancy for long bar codes, three times for short bar codes.\n\t* Security All Thrice - Three times read redundancy for all bar codes.\n* Picklist - Allows the imager to decode only the bar code that is directly under the cross-hair/reticle (+) part of the pattern. This feature is useful in applications where multiple bar codes may appear in the field of view during a decode session and only one of them is targeted for decode.\n\t* Disable - Disables Picklist mode. Any bar code within the field of view can be decoded.\n\t* Centered - Enables the Picklist mode so that only the bar code in the center of the image is decoded. This is most useful when used in conjunction with the static and dynamic reticle viewfinder modes. Note: This mode is only valid for decoder modules that supports a viewfinder. If one tries to set this for a unsupported decoder then the device would issue an error. (Camera scanner only).\n\t* Reticle - Enables the Picklist mode so that only the bar code that is directly under the cross-hair (reticle) is decoded. This is useful when used in conjunction with the static and dynamic reticle viewfinder modes. (Scan Module Only)\n* LCD Mode - Enables or disables LCD mode. LCD mode enhances the ability of the imager to read bar codes from LCD displays such as cellphones (Scan Module Only).\n\t* Disable - Disables the LCD mode. \n\t* Enable - Enables LCD mode.\n\n\tNOTE When using the LCD mode, a degradation in performance may be observed and the aiming crosshair may blink until the bar code is decoded.\n\n* Inverse 1D Mode - This parameter allows the user to select decoding on inverse 1D bar codes.\n\t* Disable - Disables decoding of inverse 1D bar codes.\n\t* Enable - Enables decoding of only inverse 1D bar codes.\n\t* Auto - Allows decoding of both positive and inverse 1D bar codes.\n* Viewfinder Mode - Configures the Viewfinder modes supported for camera scanning.\n\t* Viewfinder Enabled - Enables only the viewfinder.\n\t* Static Reticle - Enables the viewfinder and a red reticle in the center of the screen which helps selecting the bar code.\n\n## Scan Params\nAllows the configuration of Code Id and decode feedback options.\n\n* Code ID Type - A Code ID character identifies the code type of a scanned bar code. This is useful when the reader is decoding more than one code type. Select a code ID character to insert between the prefix and the decoded symbol.\n\t* Code ID Type None - No prefix (default).\n\t* Code ID Type Aim - A standards based three character prefix.\n\t* Code ID Type Symbol - A Symbol defined single character prefix.\n\t\n\tNOTE Not all ringtones are fully supported as decode tones. Ringtones of longer length may be truncated when used as a decode tone. The recommendation is to test the selected tone for operation before deployment to a customer site.\n\n* Decode Audio Feedback - Select an audio tone to sound upon a good decode.\n* Decode Haptic Feedback - Enable the MC40 to vibrate upon a good decode.\n\n## Output Data\nIn order for your application to receive the barcode data, you must specify one or more Output features. Please  refer to their reference documentation for more information.\n\n* [Intent](#guide-profiles-profileintent) \n* [Keystroke](#guide-profiles-profilekeystroke)\n* [IP](#guide-profiles-profileIP)\n"},{"key":"guide-profiles-profileintent","name":" Intent Profile Feature Reference","md":"# Intent Profile Feature Reference\n\n## Overview\nIn order to get Barcode or MSR data in your application, you must create a profile that has both an Input feature and an Output feature:\n\n* [Barcode](#guide-profiles-profilebarcode) / [MSR](#guide-profiles-profilemsr) (Input)\n* [Keystroke](#guide-profiles-profilekeystroke),[Intent](#guide-profiles-profileintent),[IP](#guide-profiles-profileIP) (Output)\n\nThe `Barcode` feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera. It also contains detailed parameters for scanner behavior as well as individual barcode symbology parameters.\n\nThe `Intent`, `Keystroke` or `IP` feature in the Profile Manager is used to define how the output from the Barcode scanner should be handled\n\n* Intent - The Intent feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application using the Android Intent mechanism. To use this, you should be familiar with how to register to receive intents in your application as well as handling the data that is passed in. You will have the ability to configure how the intent is sent to your application in the profile itself.\n\n* Keystroke - The Keystroke feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application by emulating keystrokes. You will have the option to control how the data is sent as well as if it should have any prefix or suffix automatically added using basic data formatting.\n\n* IP - IP Output allows DataWedge to send captured data to a host computer via a network connection. Captured data can be sent over an IP network to a specified IP address and port using either TCP or UDP transport protocols.\n\n## Android Intent Overview\nThe core components of an Android application (its activities, services, and broadcast receivers) are activated by intents. An intent is a bundle of information (an Intent object) describing a desired action - including the data to be acted upon, the category of component that should perform the action, and other pertinent instructions. Android locates an appropriate component to respond to the intent, launches a new instance of the component if one is needed, and passes it the Intent object.\n\nComponents advertise their capabilities, the kinds of intents they can respond to, through intent filters. Since the system must learn which intents a component can handle before it launches the component, intent filters are specified in the manifest as &lt;intent-filter&gt; elements. A component may have any number of filters, each one describing a different capability.\n\nFor example, if the application manifest contains the following:\n\n\t:::xml\n\t<intent-filter . . . >  \n  \t\t<action android:name=\"com.symbol.emdksample.RECVR\" />  \n  \t\t<category android:name=\"android.intent.category.DEFAULT\" />  \n\t</intent-filter>\n\nIn the Intent Feature Profile configuration, the Intent action must be: \n\n\t:::java\n\tcom.symbol.emdksample.RECVR\n\nand the Intent category must be: \n\n\t:::java\n\tandroid.intent.category.DEFAULT\n\n\n## EMDK Intent Output\nAllows configuration of the Intent Feature for the profile. The Intent Output Feature allows the captured data to be sent to an application in the form of an implicit Intent. Refer to the Android Developer web site for more information, http://developer.android.com.\n\n* Name - The name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n* Enabled - Enables or disables this feature. \n* Intent action - Enter the Intent Action name (required). The Intent Filter action must match this.\n* Intent category - Enter the Intent Category name (required). The Intent Filter category must match this.\n* Intent delivery - Select the method by which the intent is delivered:\n\t* Send via StartActivity\n\t* Send via startService\n\t* Broadcast intent\n\n## Basic Data Formatting\nAllows configuration of any data formatting. When disabled, any data is passed on without modification.\n\n* Enabled - Enables or disables Basic Data Formatting. \n* Prefix to data - Add characters to the beginning of the data when sent.\n* Suffix to data - Add characters to the end of the data when sent.\n* Send data - Set to transfer the captured data to the foreground application. Disabling this option prevents the actual data from being transmitted. However, the prefix and suffix strings, if present, are still transmitted even when this option is disabled (default - enabled).\n* Send as hex - Set to send the data in hexadecimal format. \n* Send TAB key - Set to append a tab character to the end of the processed data. \n* Send ENTER key - Set to append an Enter character to the end of the processed data. \n\n## EMDK Intent Return Parameters\nThe decode related data added to the Intent's bundle can be retrieved using the Intent.getStringtExtra() and Intent.getSerializableExtra() calls, using the following String tags:\n\n* `com.motorolasolutions.emdk.datawedge.label_type`: String contains the label type of the bar code.\n* `com.motorolasolutions.emdk.datawedge.data_string`:\nString contains the output data as a String. In the case of concatenated bar codes, the decode data is concatenated and sent out as a single string. In the case of MSR output, the data from the MSR tracks is concatenated and sent out as a single string.\n* `com.motorolasolutions.emdk.datawedge.decode_data`:\nDecode data is returned as a list of byte arrays. In most cases there will be one byte array per decode. For barcode symbologies that support concatenation e.g. Codabar, Code128, MicroPDF, etc., the decoded data is stored in multiple byte arrays (one byte array per bar code). Clients can get data in each byte array by passing an index.\n\nThe MSR related data added to the Intent's bundle can be retrieved using the Intent.getStringtExtra() and Intent.getSerializableExtra() calls, using the following String tags:\n\n* `com.motorolasolutions.emdk.datawedge.msr_data`:\nThe data from the MSR tracks is concatenated and sent out as a byte array. The Start/end sentinels and\ntrack separators are included as configured.\n* `com.motorolasolutions.emdk.datawedge.msr_track1`: MSR track 1 data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track2`: MSR track 2 data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track3`: MSR track 3 data is returned as a byte array.\n* `com.motorolasolutions.emdk.datawedge.msr_track1_status`: MSR track 1 decode status as an Integer where 0 indicates a successful decode.\n* `com.motorolasolutions.emdk.datawedge.msr_track2_status`: MSR track 2 decode status as an Integer where 0 indicates a successful decode.\n* `com.motorolasolutions.emdk.datawedge.msr_track3_status`: MSR track 3 decode status as an Integer where 0 indicates a successful decode.\n\nMost scanning applications might want the user to be able to decode data and for that decode data to be sent to the *current* activity but not necessarily displayed. If this is the case, then the activity needs to be marked as ΓÇÿsingleTopΓÇÖ in its AndroidManifest.xml file. If your activity is not defined as singleTop, then on every decode, the system will create another copy of your Activity and send the decode data to this second copy.\n"},{"key":"guide-profiles-profileIP","name":" IP Output Profile Feature Reference","md":"# IP Output Profile Feature Reference\n\n## Overview\nIn order to get Barcode or MSR data in your application, you must create a profile that has both an Input feature and an Output feature:\n\n* [Barcode](#guide-profiles-profilebarcode) / [MSR](#guide-profiles-profilemsr) (Input)\n* [Keystroke](#guide-profiles-profilekeystroke),[Intent](#guide-profiles-profileintent),[IP](#guide-profiles-profileIP) (Output)\n\nThe `Barcode` feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera. It also contains detailed parameters for scanner behavior as well as individual barcode symbology parameters.\n\nThe `Intent`, `Keystroke` or `IP` feature in the Profile Manager is used to define how the output from the Barcode scanner should be handled\n\n* Intent - The Intent feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application using the Android Intent mechanism. To use this, you should be familiar with how to register to receive intents in your application as well as handling the data that is passed in. You will have the ability to configure how the intent is sent to your application in the profile itself.\n\n* Keystroke - The Keystroke feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application by emulating keystrokes. You will have the option to control how the data is sent as well as if it should have any prefix or suffix automatically added using basic data formatting.\n\n* IP - IP Output allows DataWedge to send captured data to a host computer via a network connection. Captured data can be sent over an IP network to a specified IP address and port using either TCP or UDP transport protocols.\n\n## IP Output\nUse to configure the Keystroke Output Feature for the profile.\n\n* Name - The name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n* Enabled - Enables or disables this feature. \n* Remote Wedge - Enable or disable the Remote Wedge option (default - enabled). Remote Wedge is used with the IPWedge application.\n* Protocol - Select the protocol used by the remote application. Options: TCP (default) or UDP.\n* IP address - Enter the IP address used by the remote application (default - 0.0.0.0).\n* Port - Enter the port number used by the remote application (default - 58627).\n\n## Basic Data Formatting \nAllows the configuration of any data formatting. When disabled, any data is passed on without modification.\n\n* Enabled - Enables or disables Basic Data Formatting. \n* Prefix to data - Add characters to the beginning of the data when sent.\n* Suffix to data - Add characters to the end of the data when sent.\n* Send data - Set to transfer the captured data to the foreground application. Disabling this option prevents the actual data from being transmitted. However, the prefix and suffix strings, if present, are still transmitted even when this option is disabled (default - enabled).\n* Send as hex - Set to send the data in hexadecimal format. \n* Send TAB key - Set to append a tab character to the end of the processed data. \n* Send ENTER key - Set to append an Enter character to the end of the processed data. \n\n"},{"key":"guide-profiles-profilekeystroke","name":" KeyStroke Profile Feature Reference","md":"# KeyStroke Profile Feature Reference\n\n## Overview\nIn order to get Barcode or MSR data in your application, you must create a profile that has both an Input feature and an Output feature:\n\n* [Barcode](#guide-profiles-profilebarcode) / [MSR](#guide-profiles-profilemsr) (Input)\n* [Keystroke](#guide-profiles-profilekeystroke),[Intent](#guide-profiles-profileintent),[IP](#guide-profiles-profileIP) (Output)\n\nThe `Barcode` feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera. It also contains detailed parameters for scanner behavior as well as individual barcode symbology parameters.\n\nThe `Intent`, `Keystroke` or `IP` feature in the Profile Manager is used to define how the output from the Barcode scanner should be handled\n\n* Intent - The Intent feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application using the Android Intent mechanism. To use this, you should be familiar with how to register to receive intents in your application as well as handling the data that is passed in. You will have the ability to configure how the intent is sent to your application in the profile itself.\n\n* Keystroke - The Keystroke feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application by emulating keystrokes. You will have the option to control how the data is sent as well as if it should have any prefix or suffix automatically added using basic data formatting.\n\n* IP - IP Output allows DataWedge to send captured data to a host computer via a network connection. Captured data can be sent over an IP network to a specified IP address and port using either TCP or UDP transport protocols.\n\n\n## Keystroke Output\nUse to configure the Keystroke Output Feature for the profile.\n\n* Name - The name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n* Enabled - Enables or disables this feature. \n* Action key character - Enabled decoding a special characters embedded within a bar code or MSR data.\n\t* None - Action key character feature is disabled (default).\n\t* Tab - Tab character (\\t) in a bar code is processed.\n\t* Line feed - Line feed character (\\t) in a bar code is processed.\n\t* Carriage return - Carriage return character (\\t) in a bar code is processed.\n\n## Basic Data Formatting \nAllows the configuration of any data formatting. When disabled, any data is passed on without modification.\n\n* Enabled - Enables or disables Basic Data Formatting. \n* Prefix to data - Add characters to the beginning of the data when sent.\n* Suffix to data - Add characters to the end of the data when sent.\n* Send data - Set to transfer the captured data to the foreground application. Disabling this option prevents the actual data from being transmitted. However, the prefix and suffix strings, if present, are still transmitted even when this option is disabled (default - enabled).\n* Send as hex - Set to send the data in hexadecimal format. \n* Send TAB key - Set to append a tab character to the end of the processed data. \n* Send ENTER key - Set to append an Enter character to the end of the processed data. \n\n"},{"key":"guide-profiles-profilemsr","name":" MSR Profile Feature Reference","md":"# MSR Profile Feature Reference\n\n## Overview\nIn order to get MagStripe (MSR) data in your application, you must create a profile with two profile features selected:\n\n* MSR\n* [Keystroke](#guide-profiles-profilekeystroke),[Intent](#guide-profiles-profileintent),[IP](#guide-profiles-profileIP) (Output)\n\nThe `MSR` feature in the Profile Manager is responsible for reading data from the device's integrated mag-stripe reader (if one such exists).\n\nThe `Intent`, `Keystroke` or `IP` feature in the Profile Manager is used to define how the output from the Barcode scanner should be handled\n\n* Intent - The Intent feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application using the Android Intent mechanism. To use this, you should be familiar with how to register to receive intents in your application as well as handling the data that is passed in. You will have the ability to configure how the intent is sent to your application in the profile itself.\n\n* Keystroke - The Keystroke feature, in the Profile Manager, collects and sends data received from the Barcode scanner to your application by emulating keystrokes. You will have the option to control how the data is sent as well as if it should have any prefix or suffix automatically added using basic data formatting.\n\n* IP - IP Output allows DataWedge to send captured data to a host computer via a network connection. Captured data can be sent over an IP network to a specified IP address and port using either TCP or UDP transport protocols.\n\n## MSR Settings Reference\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Enabled\nEnables or disables this feature. Default is disabled.\n\n## Output Data\nIn order for your application to receive the barcode data, you must specify one or more Output features. Please  refer to their reference documentation for more information.\n\n* [Intent](#guide-profiles-profileintent) \n* [Keystroke](#guide-profiles-profilekeystroke)\n* [IP](#guide-profiles-profileIP)\n"},{"key":"guide-profiles-refAccessManager","name":" Access Manager Profile Feature Reference","md":"# Access Manager Profile Feature Reference\n\n## Overview\n\nThe Access Manager feature allows you to configure a set of applications that will be allowed to run and install on the device. When a profile with this feature is enabled, the device will only allow user installed applications on the Whitelist to be executed and/or installed (some applications that are part of the default operating system will still be available). To disable the Whitelist, you would select 'Single User Without Whitelist'.  \n\n>Note: It is important to include the executing EMDK application in the Whitelist otherwise your application will lose control of the Whitelist configuration and you will not be able to change the behavior.\n\n\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Operation Mode\n* Single User Without Whitelist - Setting this feature will disable all Whitelist features.\n* Single User With Whitelist - Setting this feature will enable the Whitelist feature based on the details provided. You can choose to add or delete packages from the current Whitelist\n\n##System Settings Access\n>Note: This setting is available when the operation mode is `Single User With Whitelist`\n1. Full Access - The device's System Settings Menu will not be reduced\n2. Reduced Access - The device's System Settings menu will be reduced to a pre-selected group of options (Display, Volume, About)\n\n## Delete Packages\nOptions for deleting packages from the Whitelist\n\n* Delete No Packages - Does not delete any packages\n* Delete All Packages - Deletes all packages \n* Delete Specified Package - Delete specified package\n\t* Delete Package Name: Name of package(s) separated by a comma ex: com.mycompany.mypackage \n\n## Add Packages\nOptions for adding packages to the Whitelist\n\n* Add No Packages - Does not add any packages\n* Add Specified Package - Add specified package\n\t* Add Package Name: Name of package(s) separated by a comma ex: com.mycompany.mypackage \n\n>Note: It is important to include the executing EMDK application in the Whitelist otherwise your application will lose control of the Whitelist configuration and you will not be able to change the behavior without an enterprise reset..\n\n## Allow Application To Submit XML\n>Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70 and will only be used when the Whitelist feature is enabled.\n\nYou can specify and restrict specific applications the ability to submit changes to the MX Framework.\n\n* Allow Package Names - Provide a comma separated list of package names that are allowed to submit XML to the MX framework.\n* Disallow Package Names - Provide a comma separated list of package names that are not allowed to submit XML to the MX framework.\n\n\n## Feature Compatibility\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\t\t<th>KitKat (Future)</th>\n\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"2\">Single User Without Whitelist</td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Allow Application To Submit XML</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td rowspan=\"8\">Single User with Whitelist</td>\n\t\t<td>Full Access</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Reduced Access</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Delete NO package</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Delete specified package(s)</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Delete ALL packages</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Add NO package</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Add specified package(s)</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Allow Application To Submit XML</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\n</table>\n"},{"key":"guide-profiles-refAppManager","name":" App Manager Profile Feature Reference","md":"# App Manager Profile Feature Reference\n\n## Overview\n\nThe App Manager feature allows you to install, upgrade, remove, enable, disable applications from the device. It also allows you to change the current application launcher, clear recent app list and much more. Lets have a look at all the features one by one:\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Install Application \nThis will install the specified application. The application must not exists on the device otherwise you will receive an error (Use the Upgrade parameter instead)\n\n* APK Path and Name: Must be the full path to the APK that will reside on the device. ex: '/storage/sdcard1/Herald.apk'\n\n## Uninstall Application \nThis will remove the specified application from the device.\n\n* Package Name: Provide the Android package name of the application ex: 'com.mycompany.mypackage'\n\n## Upgrade Application\nThis will upgrade/downgrade the specified application. The application must already exists on the device or you will receive an error (Use the Install parameter instead.\n\n* APK Path and Name: Must be the full path to the APK that will reside on the device. ex: '/storage/sdcard1/Herald.apk'\n\n## Default Launcher\nYou can provide a different application launcher to enable. The launcher application must reside on the device already.\n\n* Package Name: Provide the Android package name of the application ex: 'com.mycompany.mypackage'\n\n## Enable & Disable Application\nProvide a package name of the applications that you want to enable or disable. Disabling an application will disable the ability to launch the application.\n\n## Clear Recent Apps List\nIt will clear the list of recent apps that you opened. When you long press the menu button on symbol device, you will see a list of recently opened apps. After running your app using this feature, it will clear your device's recent app list including itself.  \n\n## Protected List\nYou can manage which applications are on the protected list. Applications on the protected list will not be force closed when the device is setup to run in multi-user mode and the current user logs off. Applications on the protected list are permitted to run across users.\n\n* Add Application - Specify the application's package name to add to the protected list.\n* Remove Application - Specify the application's package name to remove from the protected list.\n* Remove All - Removes all applications from the protected list\n\n## Enable & Disable App Info\nThe application info dialog shows detailed information about the application as well as allow you to perform actions like: Force Stop, Enable/Disable, Clear Data, Clear Cache. Specify the application's package name that you would like to enable or disable this feature for.\n\n> Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\n\n## Feature Compatibility\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\t\t<th>KitKat (Future)</th>\n\n\t</tr>\n\t<tr>\n\t\t<td>Install</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>UnInstall</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Upgrade</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Set Default Launcher</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Enable Application</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Disable Application</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Clear Recent Apps List</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Protected List</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Enable &amp; Disable App Info</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n</table>\n"},{"key":"guide-profiles-refCertManager","name":" Certificate Manager Profile Feature Reference","md":"# Certificate Manager Profile Feature Reference\n\n## Overview\n\nThe Cert Manager feature allows your application to install or uninstall certificates and initialize the Android key store. You can use digital certificates to identify your device for a variety of purposes, including VPN or Wi-Fi network access as well as authentication to servers by apps such as Email or Chrome. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Initialize Android Keystore\nWhen you initialize the Android keystore you create a new keystore replacing any previously existing one.  Before installing or uninstalling certificates, a keystore must exist. You can choose to perform this action as a separate EMDK profile or include the Certificate Manager feature multiple times in one profile.\n\n### Keystore Password\nKeystore Password is a password required to initialize the Android Keystore.\n\n## Install Certificate\n\n### Certificate Alias\n\n* Provide the name(alias) that will uniquely identify the certificate. The old certificate with same alias name will be replaced by the new certificate.\n* Dynamic - The name of the cert is dynamically generated (This is currently not supported)\n\n#### Alias Handling Issues\nDue to current limitations of the Certificate Manager Feature (in an EAP-TLS scenario), it is not possible to \"override\" the Alias that is assigned to a Client Certificate and Private Key when they are installed into the Android KeyStore\n\nThe only way to determine the actual Alias that is assigned to a Client Certificate and Private Key when they are installed into the Android KeyStore is to examine the Android KeyStore after installation to determine which Alias was used:\n\n1. The same Alias will ALWAYS be assigned to a given Client Certificate and Private Key, no matter when, or on which device, it is installed\n\n2. Whenever a different Client Certificate is used, a different Alias will generally be assigned to the Client Certificate and Private Key\n\n#### Manually Determining the Certificate Alias\nA device can be used to capture the alias being used for the certificate being installed. It is recommended that the key store be cleared before performing these steps (Settings->Security->Clear Credentials)\n\n1. Use Certificate Manager to install the certificate onto a device.\n2. Navigate to Settings->Wi-Fi->'+'' to add a network\n3. Scroll to security, tap and select 802.1x EAP\n4. Scroll to EAP method, tap and select TLS\n5. Scroll to client certificate, tap and note a drop down box with \"(unspecified)\" and the alias of the installed certificate. The alias listed can become the value to use as the certificate when using WiFiConfig to configure a profile that uses EAP-TLS.\n\n###Certificate Type  \nType of certificate to be installed:\n\n* CA Certificate (*.PEM)\n* Client Certificate (*.PEM)\n* Client Certificate and Private Key (*.PFX)\n* Client Certificate and Private Key (*.P12)\n* Client Certificate and Private Key (*.PKCS12)\n\n>Note: Be sure to initialize the keystore the first time when installing certificate types with private keys (.PFX,.P12,.PKCS12)\n\n### Certificate method\nReference certificate file - method used to install a certificate. A file must exists on the device that contains the certificate data.\n\n### Certificate File\nSpecify the path and name of the to the certificate file that resides on the device.\n\n### Private Key Password\nPassword required to decrypt the private key (*.PFX, *.P12, *.PKCS12).\n\n## Uninstall Certificate\n\n### Certificate Alias\nProvide the name(alias) that will uniquely identify the certificate. The key store or trusted CA store will be searched for a record with the same alias name. If the record is found, it removes the key store or trusted CA store. \n\n##Feature Compatibility\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\n\t</tr>\n\t<tr>\n\t\t<td>Initialize KeyStore</td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"9\">Install</td>\n\t\t<td>Certificate Alias</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Dynamic</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>CA Certificate (.PEM)</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Client Certificate (.PEM)</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Client Certificate with Private key(.PFX file)</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Client Certificate with Private key(.P12 file)</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Client Certificate with Private key(.PKCS12 file)</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Reference Certificate File</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Private Key Password</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"2\">Uninstall certificate</td>\n\t\t<td>Certificate Alias</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Dynamic</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n</table>\n"},{"key":"guide-profiles-refClockManager","name":" Clock Profile Feature Reference","md":"# Clock Profile Feature Reference\n\n## Overview\n\nClock allows for a programmatic way to set the date and time. To account for time zone nuances including daylight saving time, Clock expects the values for date and time to be entered as normalized values to UTC (GMT) time. In other words, the date and time set as parameters for Clock must be the UTC (GMT) equivalent of the local time being set.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## AutoTime\nUse an NTP server to automatically set the time, date and timezone. The NTP server will be synced at the specified interval.\n\n* NTP Server - the IP address of the NTP server\n* SyncInterval - time will be automatically synced at this interval\n\n## TimeZone \nProvide the TimeZone that the device should be set to. Note: The supported values for time zone are the same as Android supported values. For example, GMT-5 or Olson name such as America/New_York.\n\n## Date \nProvide the Date the device will be set to when the profile is enabled. It must have a length of 10 and must be in the format 'yyyy-MM-dd' (for example : 2014-12-31). It must be specified in UTC (Universal Time Coordinates) and not in LTC (Local Time Coordinates).\n\n## Time\nProvide the Time the device will be set to when the profile is enabled. It must have a length of 8 and must be in the format HH:mm:ss (for example : 23:59:59). It must be specified in UTC (Universal Time Coordinates) and not in LTC (Local Time Coordinates).\n\n## Usage Notes\n\n###Example #1\nWe want to set the clock with the following settings:\n\n* Set the date to 15-Jan-2010\n* Set the time to 2:15PM local time\n* Set the time zone to New York, New York, USA\n\n15-Jan is eastern standard time in New York and not daylight saving time meaning it is GMT-04:00. So the parameters to use for Clock would be:\n\n* TimeZone = New York, New York, USA\n* Date = 15-Jan-2010 (2010-01-15)\n* Time = 6:15PM (18:15:00)\n\n###Example #2\nWe want to set the clock with the following settings:\n\n* Set the date to 11-Jul-2014\n* Set the time to 2:55AM local time\n* Set the time zone to Bangalore, India\n\nThe time zone for Bangalore is GMT+05:30. So the parameters to use for Clock would be:\n\n* TimeZone Bangalore, India\n* Date = 10-Jul-2010 (2010-07-10)\n* Time = 9:25PM (21:25:00)\n\nNote the change of date as well as time. In this case, as the device converts this to local time, the date and time will both automatically be set properly when the offset is applied.\n\n## Feature Compatibility\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\n\t</tr>\n\t<tr>\n\t\t<td>AutoTime</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>NTP Server</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Sync Interval</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Date</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Time</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>TimeZone</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n</table>\n"},{"key":"guide-profiles-refGPRS","name":" GPRS Manager Profile Feature Reference","md":"# GPRS Manager Profile Feature Reference\n\n## Overview\n\nThe GPRS Profile feature allows you to add or remove APNs to your device. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n\n## APN Action\nThis setting allows you to manage the APN configuration on the device:\n\n* Add/replace APN\n* Remove existing named APN\n* Remove all existing APNs\n\n## GPRS Carrier \nOptions for GPRS carrier for the APN.\n\n* ATT\n* T-Mobile\n* Custom\n\n>Note: For ATT and T-Mobile option the user and password filed are required.\n\n## APN Name \nProvide the name that the APN should be set to. Used to identify the APN settings for deleting existing APN or adding/replacing. Must be unique on the device. \n\n## Replace if Exists \nThis check box provides the option to replace an existing APN.\n\n* Check Box is marked: Delete the APN for the device and set the new APN.\n* Check Box is not marked: Don't add new APN if already there is an APN with the same name.\n\n## Wait Time\nProvide the time (in seconds) to wait for connection to the APN to be established.\n\n## Make Default APN \nThis check box provides the option to set the new APN to be Preferred.\n\n## Access Point \nProvide the access point name that the APN should be set to (ex: internet3.voicestream.com).\n\n## User Name\nProvide the user name that the APN should be set to.\n\n## Password\nProvide the password that the APN should be set to.\n\n## Feature Compatibility\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"3\">APN Action</td>\n\t\t<td>Add/Replace</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Remove existing</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Remove all</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"8\">APN Settings</td>\n\t\t<td>Carrier</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>APN Name</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Replace</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Wait Time</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Make Default</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Access Point</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>User Name</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Password</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\n</table>\n\n\n"},{"key":"guide-profiles-refPersistanceManager","name":" Persistence Manager Profile Feature Reference","md":"# Persistence Manager Profile Feature Reference\n\n## Overview\n\nThe Persist Manager is used to create and remove persistent profile features. These features and their parameters will survive and be automatically applied after a 'Enterprise Reset'. \n\nThe following actions are supported:\n\n* Adding a new profile to be persisted\n* Removing a persisted profile\n\nThe following profile features will not be persisted:\n\n* DataCapture Manager\n\n\n>Note: In order for associated files to survive an 'Enterprise Reset' they must be placed in the Enterprise Folder on the device. A 'Factory Reset' will not persist any profiles features.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Make Current XML Persistent\nThis will make the specified Profile features persistent. The combination of Name, Version and Order will be used to 'identify' the profile set to be persisted. The same combination must be used when trying to remove the features from being persisted.\n\n* Persist as Name - This name is used to identify the profile features that will be persisted, so that you can reference it for removal from the persist list.\n\t* Generic/Absolute - can be used to further clarify the name/scenario\n\t* Staging-Specific/Relative - can be used to further clarify the name/scenario\n* Persist as Version - Provide the version of the profile features that will be persisted, so that you can reference it for removal from the persist list.\n* Persist as Order - Provide the optional order in which the profile features with the specified name will be persisted.\n* Persist if Error - Specifies whether the profile features will be persisted if any errors occur.\n\n\n## Remove Persistent XML\nThis will remove the specified profile features from being persistent. The combination of the Name, Version and Order features must match a previously persisted profile with those same features.\n\n* Persist as Name - This name is used to identify the persisted profile setting to remove\n\t* Generic/Absolute \n\t* Staging-Specific/Relative \n* Persist as Version - The version of the persisted profile setting to be removed\n* Persist as Order - The optional order of the persisted profile setting to be removed\n\n## Enable the specified persistent profile\nIt will enable the persistent profile that you specify with the help of supply details about a specific persist action to be performed.\n\n## Disable the specified persistent profile\nIt will disable the specified persistent profile with the help of supply details about a specific persist action to be performed.\n\n## Usage Notes\n###Using PersistsManager on TC55 after performing a FactoryReset\nThe following issue is limited to the TC55 only: \n \nDuring the installation on the TC55, the EMDK Device Runtime package creates the \"enterprise/usr/persist/\" folder required for the PersistManager feature to function.  If a factory reset is done after installing the EMDK Device Runtime, this folder will get deleted and the PersistManager will no longer work. \n \nThis problem can be fixed by reinstalling the EMDK Device Runtime Package on the TC55.\n\n## Feature Compatibility\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\n\t</tr>\n\t<tr>\n\t\t<td>Make current XML persistent</td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td>Remove persistent XML</td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable the specified persistent profile</td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable the specified persistent profile</td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\t\n\t<tr>\n\t\t<td rowspan=\"2\">Persists Name type</td>\n\t\t<td>Staging specific/Relative</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Generic/Absolute</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n</table>\n\n"},{"key":"guide-profiles-refPowerManager","name":" Power Manager Profile Feature Reference","md":"# Power Manager Profile Feature Reference\n\n## Overview\n\nThis feature allows you to put the device into Sleep mode, re-power or perform an OS Update. The action will be performed when the profile is enabled.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter sets when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Do Nothing\nWill not perform any action\n\n## Sleep Mode\nWill put the device into Sleep mode.\n\n## Reboot\nWill reboot or repower the device.\n\n## Enterprise Reset\nWill perform an Enterprise Reset.\n\n> Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\n\n## Factory Reset\nWill perform a Factory Reset.\n\n> Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\n\n## Full Device Wipe\nWill perform a full device wipe.\n\n> Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\n\n## OS Update\nWill intiate an OS Update using the provided OS Update Zip File\n\n* OS Update Zip File - The full path to the OS Update Zip File that resides on the device\n\n> Note: The OS Update file should already exist on the device. When using this feature on the TC55 the update package must be placed on the external SD card. Any attempt to use the internal SD card for this purpose will fail.\n\n## Feature Compatibility\n\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\t\t<th>KitKat (Future)</th>\n\n\t</tr>\n\t<tr>\n\t\t<td>Do Nothing</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Sleep</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Reboot</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enterprise Reset</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Factory Reset</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Full Device Wipe</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>OsUpdate</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n</table>\n\n\n"},{"key":"guide-profiles-refSettingsManager","name":" Settings Manager Profile Feature Reference","md":"# Settings Manager Profile Feature Reference\n>Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\n\n## Overview\n\nSettings Manager Profile feature allows you to manage settings UI configuration by providing the ability to invoke Enterprise Reset in Settings UI of your device.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n\n## Ability to invoke Enterprise Reset in Settings UI\nSpecify whether ability to invoke Enterprise Reset in Settings UI will be allowed on your device.\n\n* Do not change\n* Enable\n* Disable\n\n## Feature Compatibility\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\t\t<th>KitKat (Future)</th>\n\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"3\">Ability to invoke Enterprise Reset in Settings UI</td>\n\t\t<td>Do not change</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n</table>\n\n\n"},{"key":"guide-profiles-refTouchManager","name":" Touch Manager Profile Feature Reference","md":"# Touch Manager Profile Feature Reference\n\n## Overview\n\nTouch Manager Profile feature allows you set the Touch Mode on your device in order to interact with User Interface.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n\n## TouchAction\nSpecify Touch Mode to interact with User Interface on the device.\n\n* Do not change - Keep the existing Touch Mode settings.\n* Stylus and Finger - Set the Touch Mode to Stylus and Finger.\n* Glove and Finger - Set the Touch Mode to Glove and Finger.\n\n## Feature Compatibility\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"3\">TouchAction</td>\n\t\t<td>Do not change</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Stylus and Finger</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Glove and Finger</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n</table>\n\n\n"},{"key":"guide-profiles-refUIManager","name":" UI Manager Profile Feature Reference","md":"# UI Manager Profile Feature Reference\n>Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\n\n## Overview\n\nThe UI Manager Profile feature allows you to manage UI configurations using its UI Manager parameters. \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n\n## Clipboard\nSpecify whether the use of clipboard will be allowed.\n\n* Do not change\n* Enable\n* Disable\n\n## Clear Clipboard?\nThis check box provides an option whether to clear clipboard.\n\n* Check Box is marked: Clear the clipboard.\n* Check Box is not marked: Don't clear the clipboard.\n\n## Feature Compatibility\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\t\t<th>KitKat (Future)</th>\n\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"3\">Clipboard</td>\n\t\t<td>Do not change</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n    <tr>\n\t\t<td rowspan=\"2\">Clear Clipboard?</td>\n\t\t<td>Checked</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Unchecked</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n</table>\n\n\n"},{"key":"guide-profiles-refUSBManager","name":" USB Manager Profile Feature Reference","md":"# USB Manager Profile Feature Reference\n\n## Overview\n\nThe USB Manager Profile feature allows you to manage USB configurations of your device.  \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n\n## USB Module Usage\nSpecify whether the use of USB module will be allowed.\n\n* Do not change\n* Enable\n* Disable\n\n## USB External Storage Usage\n>Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\nSpecify whether the use of USB external storage will be allowed.\n\n* Do not change\n* Enable\n* Disable\n\n## USB ADB Usage\nSpecify whether the use of ADB Mode will be allowed.\n\n* Do not change\n* Enable\n* Disable\n\n## Access device storage from PC via USB\n>Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\n\nSpecify whether all methods to access device storage from PC via USB (e.g. UMS, MTP, PTP) will be allowed\n\n* Do not change - Configure methods individually (Ex. UMS, MPT, PTP) to access device storage from PC via USB.\n* Enable\n* Disable\n\n## Access device storage from PC via USB UMS\n>Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\n\nSpecify whether access device storage from PC via USB UMS will be allowed.\n\n* Do not change\n* Enable\n* Disable\n\n## Access device storage from PC via USB MTP\n>Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\n\nSpecify whether access device storage from PC via USB MTP will be allowed.\n\n* Do not change\n* Enable\n* Disable\n\n## Access device storage from PC via USB PTP\n>Note: This feature will be supported on devices that are running KitKat versions of Android like the TC70.\n\nSpecify whether access device storage from PC via USB PTP will be allowed.\n\n* Do not change\n* Enable\n* Disable\n\n## Feature Compatibility\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\t\t<th>KitKat (Future)</th>\n\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"3\">USB Module Usage</td>\n\t\t<td>Do not change</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n    <tr>\n\t\t<td rowspan=\"3\">USB External Storage Usage</td>\n\t\t<td>Do not change</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n    <tr>\n\t\t<td rowspan=\"3\">USB ADB Usage</td>\n\t\t<td>Do not change</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n    <tr>\n\t\t<td rowspan=\"3\">Access device storage from PC via USB</td>\n\t\t<td>Do not change</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n        <tr>\n\t\t<td rowspan=\"3\">Access device storage from PC via USB UMS</td>\n\t\t<td>Do not change</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n    <tr>\n\t\t<td rowspan=\"3\">Access device storage from PC via USB MTP</td>\n\t\t<td>Do not change</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n    <tr>\n\t\t<td rowspan=\"3\">Access device storage from PC via USB PTP</td>\n\t\t<td>Do not change</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable</td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td></td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n</table>\n\n\n"},{"key":"guide-profiles-refWiFiManager","name":" Wi-Fi Profile Feature Reference","md":"# Wi-Fi Profile Feature Reference\n\n## Overview\n\nThe Wi-Fi Profile feature allows you to manage your devices Wi-Fi settings as well as manage the network profiles to be used for connecting and remembering networks.\n\n>Note: In order for settings to be applied, Wi-Fi must be enabled. If you do not specify WiFi Enable in the profile you will get an error when attempting to apply other settings if the device's Wi-Fi is not already enabled.\n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n## Wi-Fi Enable\nEnable Disable Wi-Fi Radio.\n\n>Note: In order for other settings to be applied, Wi-Fi must be enabled. If you do not specify WiFi Enable in the profile you will get an error when attempting to apply other settings if the device's Wi-Fi is not already enabled.\n\n* Do not change - will use whatever the device is currently configured as.\n* Enable - enabled the Wi-Fi radio\n* Disable - disabled the Wi-Fi radio\n\n## Country Selection Auto/Manual\nBy leaving this option unchecked, the country may be determined by the router or access point setting. To manually select the country, you should select the checkbox. When doing this a country drop-down will appear.\n\n## Country\nCountry to use for Wi-Fi regulatory setting. 802.11d will not be enabled if you select 'U.S.A' in the Country drop-down. When you choose 'AUTO' in the drop-down, 802.11d will be enabled. \n\n## RF Band\nSpecifies the 802.11 band(s) to use.\n\n* Unchanged - will use whatever the device is currently configured as.\n* 2.4GHZ - enable 2.4GHz band\n* 5.0GHZ - enable 5.0GHz band\n* Auto - enable both bands and connect automatically to either.\n\n## Wi-Fi Channel\n* 2.4GHz Channels - enable the specified channels in the 2.4GHz band. \n\t* String containing a set of valid channels. Comma separated and may contain a range specified with a dash '-'. Example: 1,7-10\n* 5.0GHz Channels - enable the specified channels in the 5.0GHz band.\n\t* String containing a set of valid channels. Comma separated and may contain a range specified with a dash '-'. Example: 36-60\n\n## Sleep Policy\nSpecifies the state of the Wi-Fi radio when the device suspends.\t\n\n* Do not change - will use whatever the device is currently configured as.\n* Always Sleep - Power down the Wi-Fi radio.\n* Never Sleep When Plugged - Leave Wi-Fi radio powered while it is connected to A/C power and power down the Wi-Fi radio while it is on battery.\n* Never Sleep - Leave Wi-Fi radio powered.\n\n## Network Notification\nSpecifies whether or not to notify the user when a open network comes in range.\n\n* Do not change - will use whatever the device is currently configured as.\n* Use network notification - Notify the user when a network comes in range.\n* Do not use network notification - Don't notify the user when a network comes in range.\n\n## Network Action\nUsed to manage the network profiles on the device.\n\n* Add a New Network - will add a new profile with the provided profile settings.\n* Remove an Existing Network - will remove the a network profile based on the SSID.\n* Connect to an Existing Network - will initiate a connection to the network based on the SSID.\n* Disconnect from an Existing Network - will disconnect from a network based on the SSID.\n* Enable an Existing Network - will enable a network profile based on the SSID.\n* Disable an Existing Network - will disable a network profile based on the SSID.\n* Disable All Existing Networks - will disable all network profiles.\n* Remove All Existing Networks - will remove all network profiles.\n\n## Wi-Fi Profiles\nParameters used for adding a network. SSID is used to identify the network profile to be acted on when choosing an '... an Existing Network' network action above.\n\n* SSID - the SSID name of the network\n* Security Mode \n\t* Open - Open network\n\t* Personal - PSK or WEP\n\t* Enterprise - 802.1x EAP profiles\n* WPA Mode:  WPA mode used by the network. Ex: WPA, WPA2, WPA/WPA2, WEP\n>Note: WEP is not supported with a Enterprise Security Mode. It is only supported using Personal Security Mode.\n\n* Authentication Mode: Authentication mode used by the network. used with Enterprise Security Mode. Ex: EAP-TLS, EAP-FAST-GTC, EAP-FAST-MSCHAPV2, EAP-TTLS-PAP, EAP-TTLS-MSCHAP, EAP-TTLS-MSCHAPV2, LEAP, PEAP-MSCHAPV2, PEAP-GTC\n* DHCP: When selected DHCP will be used. When not selected, Static IP address is used and IP address settings should be provided ex: Static IP Address, Gateway IP Address, Subnet Mask, DNS Server IP Address\n* Proxy: When selected, a Proxy is used for network connections. Proxy settings should be supplied. Ex: Proxy Host Name, Port, Bypass Proxy\n\n## Encryption Details\n* Encryption Type: Type of encryption used by the network. The values in this drop-down will change based on the WPA Mode selected. Ex: TKIP, AES-CCMP, AES-CCMP/TKIP, WEP-40, WEP-104\n* Key Type: Passphrase or Hex Key\n* Protect Key: Enables encryption of the Key\n* Web Key Index: Only `wep[0]` is a valid option\n\n## Authentication Details\nSpecific authentication settings when Enterprise Mode and specific Authentication modes are selected.\n\n* Identity - the name that should be used to join the network.\n* Server Certificate - the name of the certificate alias that should be used to verify the server (Optional).\n* Client Certificate - the name of the certificate alias that should be used to join the network (Mandatory).\n* Anonymous Identity - the anonymous identity to be used to join the network.\n* Password - the password to be used to connect to the network.\n* Protect Password - when selected will encrypt the password.\n\n### EAP-TLS and Certificate Alias \nDue to current limitations of the Certificate Manager Feature (in an EAP-TLS scenario), it is not possible to \"override\" the Alias that is assigned to a Client Certificate and Private Key when they are installed into the Android KeyStore\n\nThe only way to determine the actual Alias that is assigned to a Client Certificate and Private Key when they are installed into the Android KeyStore is to examine the Android KeyStore after installation to determine which Alias was used:\n\n1. The same Alias will ALWAYS be assigned to a given Client Certificate and Private Key, no matter when, or on which device, it is installed\n\n2. Whenever a different Client Certificate is used, a different Alias will generally be assigned to the Client Certificate and Private Key\n\n#### Manually Determining the Certificate Alias\nA device can be used to capture the alias being used for the certificate being installed. It is recommended that the key store be cleared before performing these steps (Settings->Security->Clear Credentials)\n\n1. Use Certificate Manager to install the certificate onto a device.\n2. Navigate to Settings->Wi-Fi->'+'' to add a network\n3. Scroll to security, tap and select 802.1x EAP\n4. Scroll to EAP method, tap and select TLS\n5. Scroll to client certificate, tap and note a drop down box with \"(unspecified)\" and the alias of the installed certificate. The alias listed can become the value to use as the certificate when using WiFiConfig to configure a profile that uses EAP-TLS.\n\n## Advanced Options\n\n>Note: The following steps must be followed in order to use the Advanced Options under the WiFi feature:\n>\n>* PMKID must be enabled in order to enable PreAuth (PreAuth =1 and PMKID =1)\n>* FT must be enabled in order to enable FTRIC (FT=1 and FTRIC =1)\n>* OKC must be disabled (OKC =0 and PMKID =1) in order to use PMKID caching\n>\n> Important Note: The default \"Fast Power Savings\" value must be used for the \"Power Save\" parameter under the Advanced Options. Using the \"Do Not Change\" value will result in failure.\n\n* AutoTimeConfig- Enable AutoTimeConfig feature. Updates device timestamp based on based on Symbol IE in 802.11 beacon. This is a Symbol specific feature.\n* HFSR - Hyper Fast Secure Roam (HFSR) is a Symbol's fast roam algorithm. \n* CCKM - This is to enable / disable CCX roam algorithm (CCKM).\n* FT - This is to enable / disable Fast Transition roam algorithm (802.11r).\n* FTRIC - This is to enable / disable Fast Transition Resource Request (802.11r).\n* OKC- This is to enable / disable Opportunistic Key Caching (OKC).\n* PMKID - This is to enable / disable PMKID Caching. We need to disable OKC and enable PMKID for PMKID caching to work.\n* PreAuth- This is to enable / disable 802.1x Pre-Authentication.\n* PowerSave - This option is to configure different Power Save Modes of Radio.\n\t* Do not change - will use whatever the device is currently configured as.\n\t* Always Active: This will keep the radio in active\n\t* Fast Power Savings: This will keep the radio in Auto Power Save.\n\t* Maximum Power Savings: This will keep the radio in Auto Power Save.\n* Advanced Logging - Start or Stop advanced Wi-Fi logging.\n* FIPS - We can use this option to enable disable FIPS data in motion supported in WLAN. WLAN FIPS 140-2, level 1 compliance.\n* Enable Restricted Settings UI - When enabled the Wi-Fi settings will be in Read-Only mode.\n\n## Feature Compatibility\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\n\t</tr>\n\t<tr>\n\t\t<td>Regulatory</td>\n\t\t<td>Country Selection</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"2\">Radio</td>\n\t\t<td>Band Selection</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Wi-Fi Channels</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td rowspan='4'>System Settings</td>\n\t\t<td>Sleep Policy</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Network Notification</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Wi-Fi Enable</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Network Action</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"4\">Wi-Fi Profiles</td>\n\t\t<td>SSID</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Security Mode</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>DHCP</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Proxy</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t\n\t<tr>\n\t\t<td rowspan=\"5\">WPA Mode</td>\n\t\t<td>Open</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>WPA PSK</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>WPA2 PSK</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>WPA/WPA2 PSK</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Static WEP</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"9\">Authentication Mode</td>\n\t\t<td>EAP-TLS</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>EAP-FAST-GTC</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>EAP-FAST-MSCHAPV2</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>EAP-TTLS-PAP</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>EAP-TTLS-MSCHAP</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>EAP-TTLS-MSCHAPV2</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>LEAP</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>PEAP-MSCHAPV2</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>PEAP-GTC</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\n\t<tr>\n\t\t<td rowspan=\"2\">Encryption Details</td>\n\t\t<td>Encryption Type</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Passphrase - Hex key</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\n\t<tr>\n\t\t<td rowspan=\"5\">Authentication Details</td>\n\t\t<td>Identity</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Password</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Anonymous Identity</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Server Certificate</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Client Certificate</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"12\">Advanced Options</td>\n\t\t<td>AutoTimeConfig</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Hyper Fast Secure Roam</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>CCKM</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Fast Transition Roam Algorithm</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Fast Transition Resource Request</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Opportunistic Key Caching</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>PMKID Caching</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Pre-Authentication</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>PowerSave</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Advanced Logging</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>FIPS</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\t<tr>\n\t\t<td>Restricted Settings UI</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td></td>\n\t\t<td></td>\n\t</tr>\n\n</table>\n\n\n"},{"key":"guide-profiles-refWirelessManager","name":" Wireless Manager Profile Feature Reference","md":"# Wireless Manager Profile Feature Reference\n\n## Overview\n\nThe Wireless Manager Profile feature allows you to configure wireless configurations on your device. (Ex. Configure device's Bluetooth)  \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n\n## Bluetooth\nThis setting allows you to configure Bluetooth on your device.\n\n* **Do not change** - Keep existing Bluetooth settings\n* **Enable** - Turn Bluetooth ON.\n* **Disable** - Turn Bluetooth OFF. \n\n## Feature Compatibility\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"3\">Bluetooth</td>\n\t\t<td>Do not change</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Enable</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Disable</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n</table>\n\n\n"},{"key":"guide-profiles-refXMLManager","name":" XML Manager Profile Feature Reference","md":"# XML Manager Profile Feature Reference\n\n## Overview\n\nThe XML Manager Profile feature allows you to specify various XML processing modes to be used.  \n\n## Name\nThe name field is used by the EMDK to identify this particular feature parameter set when you want to manage just part of the profile programmatically using the EMDK [ProfileManager](#api-ProfileManager) API. This can be useful if you have multiple types of the same feature and want to update only one of them without having to update the whole profile. See [EMDK Profiles Overview](#guide-profiles-usingwizard) for more information.\n\n\n## XML Processing Mode\nSpecify the XML processing mode to use\n\n* Execute all to end\n* Execute until error, then stop\n* Try until error, then Skip to Catch\n* Catch error, Execute remainder\n\n## Feature Compatibility\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>Parameters</th>\n\t\t<th>Specific</th>\n\t\t<th>MC32</th>\n\t\t<th>MC40</th>\n\t\t<th>MC67</th>\n\t\t<th>TC55</th>\n\n\t</tr>\n\t<tr>\n\t\t<td rowspan=\"4\">XML Processing Mode</td>\n\t\t<td>Execute all to end</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Execute until error, then stop</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n\t<tr>\n\t\t<td>Try until error, then Skip to Catch</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n    <tr>\n\t\t<td>Catch error, Execute remainder</td>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t\t<td><i class=\"fa fa-check-circle\"></i>\n\t</tr>\n</table>\n\n\n"},{"key":"guide-profiles-usingwizard","name":" Using EMDK for Android Profiles","md":"# Using EMDK for Android Profiles\n##EMDK Profiles Overview\n\nThe EMDK for Android allows you to easily access various capabilities of your Android device from within an Android application. These capabilities are grouped together into, what is referred to as EMDK profiles. Each EMDK profile is broken into various features. Each profile feature has parameters to provide automatic enablement as well as configuration options that will control it's behavior. One such profile feature is Data Capture, which allows you to accesses the devices bar code scanner and magstripe reader. \n\n##EMDK Profile Features\n\n###Data Capture\n\nEMDK Data Capture profiles allow you to access and configure a devices bar code scanner and magstripe reader, along with how the data captured should be transmitted to your application. There are typically three components that are used to make this work:\n\n* [Activity Selector](#guide-profiles-profileactivity) - Automatically activates the profile based on application & activity combinations.\n* Input Sources - Choose if [Barcode](#guide-profiles-profilebarcode) & [MSR](#guide-profiles-profilemsr) is the source of the data.\n* Output Sources - Output the input source data as a [Keystroke](#guide-profiles-profilekeystroke), [Intent](#guide-profiles-profileintent) or [IP](#guide-profiles-profileIP) output.\n\n###Access Manager\nThe [Access Manager](#guide-profiles-refAccessManager) feature allows you to configure a set of applications that will be allowed to run on the device. When a profile with this feature is enabled, the device will only allow applications on the WhileList to be executed.\n\n###App Manager\nThe [App Manager](#guide-profiles-refAppManager) feature allows you to install, upgrade, remove, enable, disable applications from the device. It also allows you to change the current application launcher, clear recent app list and much more.\n\n###Cert Manager\nThe [Cert Manager](#guide-profiles-refCertManager) feature allows your application to install or uninstall certificates that can be used identify your device for a variety of purposes, including VPN or Wi-Fi network access as well as authentication to servers by apps such as Email or Chrome.\n\n###Clock\nThe [Clock feature](#guide-profiles-refClockManager) allows you to set the devices current date, time and timezone. \n\n### GPRS Manager\nThe [GPRS Manager](#guide-profiles-refGPRS) allows you to configure GPRS APN settings to get onto your carrier's network.\n\n###Persistence Manager\nThe [Persistence Manager](#guide-profiles-refPersistanceManager) will provide a way to keep the MX features persistent on a device even after a reset.\n\n### Power Manager\nThe [Power Manager](#guide-profiles-refPowerManager) allows you to perform power management operations such as putting the device into Sleep mode, re-power or perform an OS Update. It also allows you to perform Enterprise Reset, Factory Reset and full device wipe. The action will be performed when the profile is enabled.\n\n### Settings Manager\nThe [Settings Manager](#guide-profiles-refSettingsManager) Profile feature allows you to manage settings UI configuration by providing the ability to invoke Enterprise Reset in Settings UI of your device.\n\n### Touch Manager\nThe [Touch Manager](#guide-profiles-refTouchManager) Profile feature allows you set the Touch Mode on your device in order to interact with User Interface.\n\n### UI Manager\nThe [UI Manager](#guide-profiles-refUIManager) Profile feature allows you to manage UI configurations using its UI Manager parameters. \n\n### USB Manager\nThe [USB Manager](#guide-profiles-refUSBManager) Profile feature allows you to manage USB configurations of your device. \n\n### Wi-FI\nThe [Wi-Fi Manager](#guide-profiles-refWiFiManager) allows you to manage Wi-Fi profiles available on the device as wells Wi-Fi settings Band and Channel selection, 802.11d / country configuration, and Disable / Enable, etc.\n\n### Wireless Manager\nThe [Wireless Manager](#guide-profiles-refWirelessManager) Profile feature allows you to configure wireless configurations on your device. (Ex. Configure device's Bluetooth).\n\n### XML Manager\nThe [XML Manager](#guide-profiles-refXMLManager) Profile feature allows you to specify various XML processing modes to be used.\n\n\n##Using the EMDK Profile Manager\n\nProfile Manager is an exclusive EMDK technology offered within the Eclipse IDE, providing a GUI based development tool. This allows you to write fewer lines of code resulting in reduced development time, effort and errors.  \n\n###Accessing the Profile Manager\n1. Inside the Eclipse ADT select an Android Application in the \"Package Explorer\".\n2. Select \"EMDK\" -> \"Profile Manager\" on the toolbar.  \n    ![img](images/profiles/image001.jpg)\n\n###Creating a Profile\n\n1. Open the \"EMDK Profile Manager\".  \n2. Click \"Create\".  \n\n    ![img](images/profiles/image002.jpg)\n3. Enter a Profile Name and click \"Create\".  This name is how the profile will be identified by the EMDK.\n\n\t![img](images/profiles/image003.jpg)  \n4. Select the features you would like to enable by selecting the item from the list of \"Available Features\" and clicking the right arrow button. \n\t>Note:  \n\t>\n\t> You must enable both a Data Capture Delivery Feature and a Data Capture Input Feature for the profile to send data to your application. For example \"Barcode\" and \"Intent\".\n\t>\n\t> You can remove a feature from the \"Selected Features\" list by clicking the left arrow button.\n\t\n\t![img](images/profiles/image004.jpg)  \n\n5. Select a \"Selected Features\" and the list of parameters will populate on the right hand side of the dialog. When you click on a parameter a description with populate on the lower left hand corner of the dialog.  \n\n\t![img](images/profiles/image005.jpg)  \n6. When complete click \"Finish\". \n7. Click \"Close\".  \n\n\t![img](images/profiles/image006.jpg)\n\t>Note:  \n\t>The profile XML will be generated and saved to \"EMDKConfig.XML\" inside your projects \"assets\" folder.   \n\t\n###Editing a Profile\n\n1. Open the EMDK Profile Manager.\n2. Select a Profile to modify and click \"Edit\".  \n\n\t![img](images/profiles/image007.jpg)  \n3. Edit the profile using the Profile Manager in the same way you would when creating a new profile.\n4. When complete click \"Finish\".\n5. Click \"Close\".  \n\n\t![img](images/profiles/image008.jpg)\n\n\t>Note:  \n\t>The profile XML will be updated and saved to \"EMDKConfig.XML\" inside your projects \"assets\" folder. \n\t\n###Renaming a Profile\n\n1. Open the EMDK Profile Manager.\n2. Select a Profile to rename and click \"Rename\".  \n\n\t![img](images/profiles/image009.jpg)  \n3. Enter the new name and click \"Rename\";  \n\n\t![img](images/profiles/image010.jpg)  \n4. Click \"Close\".  \n\n\t![img](images/profiles/image011.jpg)  \n\n\t>Note:  \n\t>The profile XML will be updated and saved to \"EMDKConfig.XML\" inside your projects \"assets\" folder. \n\n###Copying a Profile\n\n1. Open the EMDK Profile Manager.\n2. Select a Profile to copy and click \"Copy\".  \n\n\t![img](images/profiles/image012.jpg)  \n3. Enter the a name profile name to uses and click \"Copy\";  \n\n\t![img](images/profiles/image013.jpg)  \n4. Click \"Close\".  \n\n\t![img](images/profiles/image014.jpg)  \n\n\t>Note:  \n\t>The profile XML will be updated and saved to \"EMDKConfig.XML\" inside your projects \"assets\" folder. \n\n\n###Deleting a Profile\n1. Open the EMDK Profile Manager.\n2. Select a Profile to delete and click \"Delete\".  \n\n\t![img](images/profiles/image015.jpg)  \n3. Confirm delete by clicking \"Delete\";  \n\n\t![img](images/profiles/image016.jpg)  \n4. Click \"Close\".  \n\n\t![img](images/profiles/image017.jpg)  \n\n\t>Note:  \n\t>The profile XML will be updated and saved to \"EMDKConfig.XML\" inside your projects \"assets\" folder. \n\n##Using the Profile Manager API\nOnce you create your profiles using the Profile Manager, they will be bundled with your application and available to access using the [Profile Manager APIs](#guide-reference-EMDKList). These profiles will NOT be applied on the device until it is processed using these APIs.\n\n### Multiple Ways to Access\nIn the ProfileManager API, you will see three methods for `processProfile`. Essentially the last parameter, `extraData`, is one of three types:\n\n* **Document** - data will be handled as a XML Document.\n* **String** - data will be handled as a raw string.\n* **ProfileConfig** - data will be handled as a ProfileConfig class.\n\n>WARNING!: The preferred way is to use the `ProfileConfig` option and the examples below present using such option. Using the Document or String methods may not work if the XML is not structured properly. See usage notes below for more information about using these methods.\n\n###Creating or Activating a Profile\nA profile is created or activated with using the PROFILE_FLAG.SET option. If the profileFlag is set to SET, and if the given profile is not available, it will look for a valid profile in the extraData argument and if present, the profile  will be added to the internal XML volatile repository and also applied to the device.  If the profile is present, then it will be applied to the device. \n\n> Note: The following example uses ProfileConfig object, which is currently only available for DataCapture profile features.\n\n\t:::java\n\t@Override  \n    public void onOpened(EMDKManager emdkmanager)  \n    {  \n        //Create the Profile Config object  \n        ProfileConfig profileConfigObj = new ProfileConfig();  \n       \n        //Get the Profile Manager  \n        ProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);  \n       \n        //Create the new profile  \n        EMDKResults results = profileManager.processProfile(\"ProfileName\", ProfileManager.PROFILE_FLAG.SET, profileConfigObj);     \n    }  \n\n###Getting a Profile\nIf profileFlag is set to GET and if the profile is present in the internal repository, it will be returned in the extraData object.\n\n> Note: The following example uses ProfileConfig object, which is currently only available for DataCapture profile features.\n\n\t:::java\n\t@Override  \n    public void onOpened(EMDKManager emdkmanager)  \n    {  \n        //Create the Profile Config object  \n        ProfileConfig profileConfigObj = new ProfileConfig();  \n       \n        //Get the Profile Manager  \n        ProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);  \n       \n        //Get the profile and store it in the ProfileConfig object  \n        EMDKResults results = profileManager.processProfile(\"ProfileName\", ProfileManager.PROFILE_FLAG.GET, profileConfigObj);         \n    }  \n\n###Modifying a Profile\nTo modify a profile, you would:\n\n* Use the PROFILE_FLAG.GET option to retrieve the profile (if it exists).\n* Use the profileConfig Object and APIs to modify the feature parameters.\n* Use the PROFILE_FLAG.SET option to save the parameters.\n\n> Note: The following example uses ProfileConfig object, which is currently only available for DataCapture profile features.\n\n \t:::java\n \t@Override  \n    public void onOpened(EMDKManager emdkmanager)  \n    {  \n        //Create the Profile Config object  \n        ProfileConfig profileConfigObj = new ProfileConfig();  \n       \n        //Get the Profile Manager  \n        ProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);  \n       \n        //Get the profile and store it in the ProfileConfig object  \n        EMDKResults results = profileManager.processProfile(\"ProfileName\", ProfileManager.PROFILE_FLAG.GET, profileConfigObj);  \n        //Enable MSR  \n        profileConfigObj.dataCapture.msr.msr_input_enabled = ENABLED_STATE.TRUE;  \n        //Modify Profile  \n        EMDKResults ModifyResults = profileManager.processProfile(\"ProfileName\", ProfileManager.PROFILE_FLAG.SET, profileConfigObj);  \n    }  \n\n## Usage Notes\n\n### Getting Started with Tutorial\nThis is an overview of how you can create and integrate Profiles using EMDK Profile Manager. Click [here](#guide-tutorial-tutdatacaptureprofile) to get started with a detailed tutorial on Data Capture Profiles to understand better.  \n\n### Multiple Instance of Features\nThere should only be one instance of the DataCapture feature. The EMDK Profile Manager will not allow you to add multiple DataCapture features, but may happen if you are manually editing the EMDKConfig.xml. Other profile features can have multiple instances and may be required in some cases. For example, you may need two 'Certificate Manager' features. The first one to initialize the certificate store and the second one to install a new certificate.\n\n### Order of Features\nThe profile features will be applied synchronously in the order they appear. For example, you may want to set the clock before you attempt to connect to a Wi-Fi network.\n\n### extraData as XML String\nThe processProfile method has an overload method that allows sending XML content in the `extraData` parameter as a String.  \n\nMethod Signature:\n\n\t:::java\n\t// Pass in a string in XML form\n\tprocessProfile(String profileName, ProfileManager.PROFILE_FLAG profileFlag, String extraData)\n\n`profileName` can be:\n\n1. `[Name of Profile]` - to reference the entire profile. ex: 'EMDKProfile1'\n2. `[profileName]/[featureType]/[feature friendly name in profile parameters]` to just edit part of the profile. For example, if my profile is called 'Profile1' and the name I gave to the Clock feature is 'ckEST'. Passing 'profileName' as 'Profile1/Clock/ckEST' will just process this part of the profile.\n\t* Valid `[featureType]`:\tActivitySelection, Barcode, MSR, Intent, Keystroke, IP, Clock, PowerMgr, PersistMgr, CertMgr, AppMgr, AccessMgr, Wi-Fi, GprsMgr\n\n#### XML String Structure\nOne way you can see how this XML string should be structured is to use the Profile Manager in Eclipse. \n\n1. Open any project in Eclipse that does not have a EMDK profile defined already (so you get just the parameters you want to change).\n2. Select EMDK / Profile Manager from the menu.\n3. Add the Profile features you want and selection the options you wish to use.\n4. Click Finish when you are done with your selections.\n5. Look in the `assets` folder and open `EMDKConfig.xml`\n\n\t![img](images/MxAppManagerTutorialImages/emdk_config_file_entries.jpg)\n6. Notice the XML structure that is shown. This complete structure is to be passed in the extraData parameter as a string. You can choose to copy and paste this into your code to be used.\n\n> WARNING!: XML parm names and values may not be the same as what is presented in the Profile Manager wizard. Pay close attention to the fields of interest. It is not recommended to manually edit this XML, use the Profile Manager Wizard to ensure proper formation of the XML structure and values.\n\n#### Profile Name Usage Notes\nIf the ProfileName node is given in extraData and the ProfileFlag is SET, ProfileName in ExtraData should match with the first parameter passed to processProfile.\n\nExample:\n\n\t:::java\n\tString[] extraData = new String[1];\n\textraData[0]=\n\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n\t\"<characteristic type=\\\"Profile\\\">\" +\n\t\"<parm name=\\\"ProfileName\\\" value=\\\" EMDKProfile1\\\"/>\" +\n\t\"<characteristic type=\\\"Clock\\\">\" +\n\t\"<parm name=\\\"emdk_name\\\" value=\\\"ck1\\\"/>\" +\n\t\"<parm name=\\\"Date\\\" value=\\\"2013-05-23\\\" />\" +\n\t\"<parm name=\\\"Time\\\" value=\\\"6:59:00\\\" />\" +\n\t\"<parm name=\\\"TimeZone\\\" value=\\\"America/Los_Angeles\\\" />\" +\n\t\"</characteristic>\"+\n\t\"</characteristic>\";\n\n\temdkStatus = mProfileManager.processProfile(\"EMDKProfile1\", ProfileManager.PROFILE_FLAG.SET, extraData);\n\n* If the ProfileName node is NOT given in extraData and the ProfileFlag is SET, the content will be merged with the profile given in the first parameter passed to processProfile.\n\n* If the ProfileFlag is SET and the profile given in the first parameter passed to processProfile does not exist in EMDKConfig.xml, the profile will be appended to the internal repository.\n\n* DataCapture content (Activity Selection, Barcode, MSR, Intent, Keystroke, IP) is considered as a whole and setting any individual feature will set as a whole. In other words, setting \"EmdkSampleProfile-1/Keystroke\" will push all the DataCapture features to the device.\n\n#### Feature Name Usage Notes\nEach specific profile feature can be named so that only that portion of the profile can be referenced. This can be accomplished by:\n\n1. Specifying a name for the specific feature within a profile.\n2. Using the fully qualified name as the first parameter of the processProfile method.\n\n* If the ProfileFlag is SET, the emdk_name given in ExtraData should match the third part of the profileName passed to the processProfile method (first parameter).\n\nIn the following example, we created a profile called `EMDKProfile1` and added the Clock feature with a name of `ck2`. Now we can modify that profile using the processProfile method, making sure we specify the `emdk_name` parameter as `ck2` and use a profileName of `EMDKProfile1/Clock/ck2` in the processProfile method:\n\n\t:::java\n\tString[] extraData = new String[1];\n\textraData[0]=\n\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n\t\"<characteristic type=\\\"Profile\\\">\" +\n\t\"<parm name=\\\"ProfileName\\\" value=\\\" EMDKProfile1\\\"/>\" +\n\t\"<characteristic type=\\\"Clock\\\">\" +\n\t\"<parm name=\\\"emdk_name\\\" value=\\\"ck2\\\"/>\" +\n\t\"<parm name=\\\"Date\\\" value=\\\"2013-05-23\\\" />\" +\n\t\"<parm name=\\\"Time\\\" value=\\\"6:59:00\\\" />\" +\n\t\"<parm name=\\\"TimeZone\\\" value=\\\"America/Los_Angeles\\\" />\" +\n\t\"</characteristic>\"+\n\t\"</characteristic>\";\n\n\temdkStatus = mProfileManager.processProfile(\"EMDKProfile1/Clock/ck2\", ProfileManager.PROFILE_FLAG.SET, extraData);\n\n* If the ProfileFlag is SET, the emdk_name is NOT given in ExtraData and if the first parameter passed to processProfileis has the fully qualified name (ex: EMDKProfile1/Clock/ck2) , content will be appended to the profile (this only applicable for non-DataCapture features).\n  \nExample:  \n\t\n\t:::java\n\tString[] extraData = new String[1];\n\textraData[0]=\n\t\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n\t\"<characteristic type=\\\"Profile\\\">\" +\n\t\"<parm name=\\\"ProfileName\\\" value=\\\" EMDKProfile1\\\"/>\" +\n\t\"<characteristic type=\\\"Clock\\\">\" +\n\t\"<parm name=\\\"Date\\\" value=\\\"2013-05-23\\\" />\" +\n\t\"<parm name=\\\"Time\\\" value=\\\"6:59:00\\\" />\" +\n\t\"<parm name=\\\"TimeZone\\\" value=\\\"America/Los_Angeles\\\" />\" +\n\t\"</characteristic>\"+\n\t\"</characteristic>\";\n\n\temdkStatus = mProfileManager.processProfile(\"EMDKProfile1/Clock\", ProfileManager.PROFILE_FLAG.SET, extraData);\n\n#### PROFILE_FLAG.SET Usage Summary\nHere is a summary of the above scenarios when using PROFILE_FLAG.SET and XML in the extraData parameter:\n\n<table class=\"table\">\n\t<tr>\n\t\t<th>profileName</th>\n\t\t<th>EMDKConfig.XML</th>\n\t\t<th>extraData</th>\n\t\t<th>Behavior</th>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>No</td>\n\t\t<td>Settings specified in XML will get applied to the device.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Barcode</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>No</td>\n\t\t<td>Settings specified in DataCapture nodes in XML will get applied to the device.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Barcode/Bar1</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>No</td>\n\t\t<td>Settings specified in DataCapture nodes in XML will get applied to the device given that the emdk_name is set as ΓÇ£Bar1ΓÇ¥.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>No</td>\n\t\t<td>All the Clock feature nodes are applied to the device.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock/Clk1</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>No</td>\n\t\t<td>Settings defined in the Clk1 node will be applied to the device.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock/Clk2</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>No</td>\n\t\t<td>Settings defined in the Clk2 node will be applied to the device.</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>Settings for Barcode and Clk2</td>\n\t\t<td>Settings in XML and in extraData gets applied to the device</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Barcode</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>Settings for Barcode and Clk2</td>\n\t\t<td>FAILURE is returned</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Barcode/Bar1</td>\n\t\t<td>Contains all features in xml</td>\n\t\t<td>Settings for Barcode and Clk1</td>\n\t\t<td>FAILURE is returned</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>Settings for Barcode and Clk1</td>\n\t\t<td>FAILURE is returned</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>Settings for Barcode and Clk2</td>\n\t\t<td>FAILURE is returned</td>\n\t</tr>\n\t<tr>\n\t\t<td>Profile1/Clock/Clk1</td>\n\t\t<td>Contains all features in xml(Clk1 and Clk2)</td>\n\t\t<td>Settings for Barcode and Clk1</td>\n\t\t<td>FAILURE is returned</td>\n\t</tr>\n</table>"},{"key":"guide-reference-EMDKList","name":"EMDK For Android API List","md":"#EMDK For Android API List\n\n## Core and ProfileManager APIs\nThe following APIs are to be used to process EMDK features and profiles using the [Profile Manager](#guide-profiles-usingwizard) as well as getting information about the EMDK.\n\n###EMDKBase\n* [EMDKBase](#api-EMDKBase)\n\n###EMDKManager\n* [EMDKManager](#api-EMDKManager) \n* [EMDKManager.EMDKListener](#api-EMDKManager-EMDKListener) \n\n###EMDKResults\n* [EMDKResults](#api-EMDKResults) \n\n###ProfileConfig\n* [ProfileConfig](#api-ProfileConfig)\n* [ProfileConfig.ActivitySelection](#api-ProfileConfig-ActivitySelection) \n* [ProfileConfig.ActivitySelection.ActivityElement](#api-ProfileConfig-ActivitySelection-ActivityElement) \n* [ProfileConfig.DataCapture](#api-ProfileConfig-DataCapture) \n* [ProfileConfig.DataCapture.Barcode](#api-ProfileConfig-DataCapture-Barcode) \n* [ProfileConfig.DataCapture.Barcode.Decoders](#api-ProfileConfig-DataCapture-Barcode-Decoders) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams](#api-ProfileConfig-DataCapture-Barcode-DecoderParams) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.Codabar](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Codabar) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.Code11](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code11) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.Code128](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code128) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.Code39](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code39) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.Code93](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Code93) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.Composite_AB](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Composite_AB)\n* [ProfileConfig.DataCapture.Barcode.DecoderParams.Discrete_2of5](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Discrete_2of5)\n* [ProfileConfig.DataCapture.Barcode.DecoderParams.Interleaved_2of5](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Interleaved_2of5) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.Matrix_2of5](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-Matrix_2of5) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.MSI](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-MSI) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.UK_Postal](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UK_Postal) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.UPCA](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCA) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE0](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCE0) \n* [ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE1](#api-ProfileConfig-DataCapture-Barcode-DecoderParams-UPCE1) \n* [ProfileConfig.DataCapture.Barcode.ReaderParams](#api-ProfileConfig-DataCapture-Barcode-ReaderParams) \n* [ProfileConfig.DataCapture.Barcode.ScanParams](#api-ProfileConfig-DataCapture-Barcode-ScanParams) \n* [ProfileConfig.DataCapture.Barcode.UpcEanParams](#api-ProfileConfig-DataCapture-Barcode-UpcEanParams) \n* [ProfileConfig.DataCapture.MSR](#api-ProfileConfig-DataCapture-MSR) \n* [ProfileConfig.DataCapture.DataDelivery](#api-ProfileConfig-DataCapture-DataDelivery) \n* [ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting](#api-ProfileConfig-DataCapture-DataDelivery-BasicDataFormatting) \n* [ProfileConfig.DataCapture.DataDelivery.Intent](#api-ProfileConfig-DataCapture-DataDelivery-Intent) \n* [ProfileConfig.DataCapture.DataDelivery.Keystroke](#api-ProfileConfig-DataCapture-DataDelivery-Keystroke)\n\n###ProfileManager\n* [ProfileManager](#api-ProfileManager) \n\n###VersionManager\n* [VersionManager](#api-VersionManager) \n\n\n\n## Barcode APIs\nThe following APIs are used when you wish to handle all barcode scanning entirely in Java. These API's work independently of any [Data Capture profiles.](#guide-profiles-profilebarcode)\n\n###BarcodeManager\n* [BarcodeManager](#api-BarcodeManager)\n* [BarcodeManager.ScannerConnectionListener](#api-BarcodeManager-ScannerConnectionListener)\n* [BarcodeManager.ScannerConnectionListener.ConnectionStatus](#api-BarcodeManager-ScannerConnectionListener-ConnectionStatus)\n\n###Collection\n* [Collection.ScanData](#api-Collection-ScanData)\n\n###ScanDataCollection\n* [ScanDataCollection](#api-ScanDataCollection)\n\n\n###Scanner\n* [Scanner](#api-Scanner)\n* [Scanner.DataListener](#api-Scanner-DataListener)\n* [Scanner.StatusListener](#api-Scanner-StatusListener)\n\n###ScannerConfig\n* [ScannerConfig](#api-ScannerConfig)\n* [ScannerConfig.DecoderParams](#api-ScannerConfig-DecoderParams)\n* [ScannerConfig.DecoderParams.AustralianPostal](#api-ScannerConfig-DecoderParams-AustralianPostal)\n* [ScannerConfig.DecoderParams.Aztec](#api-ScannerConfig-DecoderParams-Aztec)\n* [ScannerConfig.DecoderParams.BaseDecoder](#api-ScannerConfig-DecoderParams-BaseDecoder)\n* [ScannerConfig.DecoderParams.CanadianPostal](#api-ScannerConfig-DecoderParams-CanadianPostal)\n* [ScannerConfig.DecoderParams.Chinese2of5](#api-ScannerConfig-DecoderParams-Chinese2of5)\n* [ScannerConfig.DecoderParams.CodaBar](#api-ScannerConfig-DecoderParams-CodaBar)\n* [ScannerConfig.DecoderParams.Code11](#api-ScannerConfig-DecoderParams-Code11)\n* [ScannerConfig.DecoderParams.Code128](#api-ScannerConfig-DecoderParams-Code128)\n* [ScannerConfig.DecoderParams.Code39](#api-ScannerConfig-DecoderParams-Code39)\n* [ScannerConfig.DecoderParams.Code93](#api-ScannerConfig-DecoderParams-Code93)\n* [ScannerConfig.DecoderParams.CompositeAB](#api-ScannerConfig-DecoderParams-CompositeAB)\n* [ScannerConfig.DecoderParams.CompositeC](#api-ScannerConfig-DecoderParams-CompositeC)\n* [ScannerConfig.DecoderParams.D2of5](#api-ScannerConfig-DecoderParams-D2of5)\n* [ScannerConfig.DecoderParams.DataMatrix](#api-ScannerConfig-DecoderParams-DataMatrix)\n* [ScannerConfig.DecoderParams.DutchPostal](#api-ScannerConfig-DecoderParams-DutchPostal)\n* [ScannerConfig.DecoderParams.Ean13](#api-ScannerConfig-DecoderParams-Ean13)\n* [ScannerConfig.DecoderParams.Ean8](#api-ScannerConfig-DecoderParams-Ean8)\n* [ScannerConfig.DecoderParams.Gs1Databar](#api-ScannerConfig-DecoderParams-Gs1Databar)\n* [ScannerConfig.DecoderParams.Gs1DatabarExp](#api-ScannerConfig-DecoderParams-Gs1DatabarExp)\n* [ScannerConfig.DecoderParams.Gs1DatabarLim](#api-ScannerConfig-DecoderParams-Gs1DatabarLim)\n* [ScannerConfig.DecoderParams.I2of5](#api-ScannerConfig-DecoderParams-I2of5)\n* [ScannerConfig.DecoderParams.JapanesePostal](#api-ScannerConfig-DecoderParams-JapanesePostal)\n* [ScannerConfig.DecoderParams.Korean3of5](#api-ScannerConfig-DecoderParams-Korean3of5)\n* [ScannerConfig.DecoderParams.Matrix2of5](#api-ScannerConfig-DecoderParams-Matrix2of5)\n* [ScannerConfig.DecoderParams.MaxiCode](#api-ScannerConfig-DecoderParams-MaxiCode)\n* [ScannerConfig.DecoderParams.MicroPdf](#api-ScannerConfig-DecoderParams-MicroPdf)\n* [ScannerConfig.DecoderParams.MicroQr](#api-ScannerConfig-DecoderParams-MicroQr)\n* [ScannerConfig.DecoderParams.Msi](#api-ScannerConfig-DecoderParams-Msi)\n* [ScannerConfig.DecoderParams.Pdf417](#api-ScannerConfig-DecoderParams-Pdf417)\n* [ScannerConfig.DecoderParams.QrCode](#api-ScannerConfig-DecoderParams-QrCode)\n* [ScannerConfig.DecoderParams.Signature](#api-ScannerConfig-DecoderParams-Signature)\n* [ScannerConfig.DecoderParams.Tlc39](#api-ScannerConfig-DecoderParams-Tlc39)\n* [ScannerConfig.DecoderParams.TriOptic39](#api-ScannerConfig-DecoderParams-TriOptic39)\n* [ScannerConfig.DecoderParams.UkPostal](#api-ScannerConfig-DecoderParams-UkPostal)\n* [ScannerConfig.DecoderParams.UpcEanParams](#api-ScannerConfig-DecoderParams-UpcEanParams)\n* [ScannerConfig.DecoderParams.Upca](#api-ScannerConfig-DecoderParams-Upca)\n* [ScannerConfig.DecoderParams.Upce0](#api-ScannerConfig-DecoderParams-Upce0)\n* [ScannerConfig.DecoderParams.Upce1](#api-ScannerConfig-DecoderParams-Upce1)\n* [ScannerConfig.DecoderParams.Us4State](#api-ScannerConfig-DecoderParams-Us4State)\n* [ScannerConfig.DecoderParams.Us4StateFics](#api-ScannerConfig-DecoderParams-Us4StateFics)\n* [ScannerConfig.DecoderParams.UsPlanet](#api-ScannerConfig-DecoderParams-UsPlanet)\n* [ScannerConfig.DecoderParams.UsPostNet](#api-ScannerConfig-DecoderParams-UsPostNet)\n* [ScannerConfig.DecoderParams.WebCode](#api-ScannerConfig-DecoderParams-WebCode)\n* [ScannerConfig.ReaderParams](#api-ScannerConfig-ReaderParams)\n* [ScannerConfig.ReaderParams.ReaderSpecific](#api-ScannerConfig-ReaderParams-ReaderSpecific)\n* [ScannerConfig.ReaderParams.ReaderSpecific.CameraSpecific](#api-ScannerConfig-ReaderParams-ReaderSpecific-CameraSpecific)\n* [ScannerConfig.ReaderParams.ReaderSpecific.ImagerSpecific](#api-ScannerConfig-ReaderParams-ReaderSpecific-ImagerSpecific)\n* [ScannerConfig.ScanParams](#api-ScannerConfig-ScanParams)\n\n###ScannerException\n* [ScannerException](#api-ScannerException)\n\n###ScannerInfo\n* [ScannerInfo](#api-ScannerInfo)\n\n###StatusData\n* [StatusData](#api-StatusData)"},{"key":"guide-reference-refbatteryintent","name":" Battery Intent API Reference","md":"# Battery Intent API Reference\n\n## Overview\nThe purpose of this document is to describe the functionality of the Battery Intent API Interface. Its intended audience are Android developers. \n \n## Requirements\nKnowledge of Android programming and familiarity with the Android intent mechanism are assumed. \n \n* Android Versions:\t\n\t* 2.3.4 and later.\n* Devices:\t\n\t* Symbol Android devices, such as the ET1 rev D, MC40 rev A.\n \n \n## Features\nOn Symbol devices like the MC40, extra battery information can be retrieved using the standard [Android Battery Intent](http://developer.android.com/training/monitoring-device-state/battery-monitoring.html). Setting up to receive this information is the same as with consumer Android devices. However, the data that is returned to your application includes some extra information like:\n\n* Backup Battery Voltage\n* Battery Manufacture Date\n* Battery Serial Number\n* Part Number for Battery\n* Unique ID for Battery\n* Rated Capacity of the Battery\n* Charge Cycle count of the Battery\n \n## Programming Interface\n \n#### Function Prototype\n\t\n\t:::java\n\tmIntent_Receiver = new Intent_Receiver();  \n\tmIntentFilter = new IntentFilter();  \n\tmIntentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);  \n\tregisterReceiver(mIntent_Receiver,mIntentFilter); \n\n#### Parameters\n\nPlease reference the Android Battery Manager [API](http://developer.android.com/reference/android/os/BatteryManager.html). \n\n#### Return Values\n\nIn addition to the battery information Android returns by default, which can be found [here](http://developer.android.com/reference/android/os/BatteryManager.html), Symbol devices return the following additional parameters: \n\n* **bkvoltage** - Backup Battery Voltage\n* **mfd**  - Battery Manufacture Date\n* **serialnumber** - Battery Serial Number\n* **partnumber** - Part Number for Battery\n* **uniqueid** - Unique ID for Battery\n* **ratedcapacity** - Rated Capacity of the Battery\n* **cycle** - Charge Cycle count of the Battery\n\n#### Example\n\n\t:::java\n\tpublic void onReceive(Context context, Intent intent) {      \n\t\tif (BATTERY_STATE_CHANGED_INTENT.equals(intent.getAction())) {          \n\n\t\t\tint bkvoltage = intent.getExtras().getInt(\"bkvoltage\");  \n\t\t\tString mfd = intent.getExtras().getString(\"mfd\");  \n\t\t\tString serialnumber = intent.getExtras().getString(\"serialnumber\");  \n\t\t\tString partnumber = intent.getExtras().getString(\"partnumber\");  \n\t\t\tString uniqueid = intent.getExtras().getString(\"uniqueid\");  \n\t\t\tint ratedcapacity = intent.getExtras().getInt(\"ratedcapacity\");  \n\t\t\tint cycle = intent.getExtras().getInt(\"cycle\");  \n\t\t     \n\t\t}  \n\t} \n"},{"key":"guide-reference-refdatacaptureintent","name":" Data Capture Intent API Reference","md":"# Data Capture Intent API Reference\n## Overview\nThe purpose of this document is to describe the functionality of the Data Capture API. Its intended audience are Android developers. The Data Capture API is an application programming interface which provides a number of specific commands that another application can use to control certain aspects of data capture on Android devices.\n \n## Requirements\nKnowledge of Android programming and familiarity with the Android intent mechanism are assumed. Also assumed is some familiarity with DataWedge and that you have read the DataWedge section in the Integrator Guide for your device.\n \n* Android Versions:\t\n\t* 2.3.4 and later\n* Devices:\t\n\t* ET1 rev D, MC40 rev A, TC55, etc.\n \n \n## Features\nThe following is a list of the high-level API functionsΓÇª\n\n* Start/stop/toggle the soft scan trigger.\n* Disable/enable the scanner plug-in in the currently active profile.\n* Provide a list of available scanners.\n* Make an un-associated user created profile the default profile.\n* Reset the default profile back to Profile0.\n* Switch the current profile to a user created profile that is un-associated.\n \n## DataWedge Profiles\nThe DataCapture APIs use the DataWedge profiles for collecting and formatting data.  For example, each user application can have a profile which outputs scanned data in the required format when that application comes to the foreground. DataWedge can be configured to process the same set of captured data differently based on the requirements of each application.  Refer to the DataWedge section in your devices Integrator Guide for more information on DataWedge profiles.\n \n## Programming Interface\nAn application will access the Data Capture API by broadcasting an intent. It will use the primary pieces of information in a intent, action and data, to specify the API function to perform.\n \n### SoftScanTrigger\n#### Description\nThe SoftScanTrigger API command can be used to start, stop or toggle the soft scan trigger.\n \n \n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\ti.putExtra(EXTRA_DATA, \"<parameter>\");\n\n#### Parameters\n\n* ACTION: String \"com.motorolasolutions.emdk.datawedge.api.ACTION_SOFTSCANTRIGGER\"\n* EXTRA_DATA: String \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PARAMETER\"\n* <parameter>:\tThe parameter as a string, either of the followingΓÇª\n\t* \"START_SCANNING\" - to start scanning\n\t* \"STOP_SCANNING\" - to stop scanning\n\t* \"TOGGLE_SCANNING\" - to toggle between start scanning and stop scanning\n\n#### Return Values\n\n* None.\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n* $ adb logcat -s DWAPI\n* Error messages will be logged for invalid actions and parameters\n\n#### Example\n\n\t:::java\n\t// define action and data strings  \n\tString softScanTrigger = \"com.motorolasolutions.emdk.datawedge.api.ACTION_SOFTSCANTRIGGER\";  \n\tString extraData = \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PARAMETER\";  \n\t  \n\t// create the intent  \n\tIntent I = new Intent();  \n\t// set the action to perform  \n\ti.setAction(softScanTrigger);  \n\t// add additional info  \n\ti.putExtra(extraData, \"START_SCANNING\");  \n\t// send the intent to DataWedgecontext.this.sendBroadcast(i);  \n\n#### Comments\nThe received API commands are not queued; API commands are processed immediately. Commands received while the current API command is still being processed may be ignored. For example, attempting to send the soft scan trigger start command immediately after sending the scanner enable command will result in the soft scan trigger command being ignored because the scanner enable will not have had time to complete. In this case, the soft scan trigger command should be delayed sufficiently for the scanner enable to complete; one example of how this could be done is given below.\n\n\t:::java\n\tint triggerDelay = 250; // delay in milliseconds  \n\t  \n\tHandler handler = new Handler();  \n\thandler.postDelayed(new Runnable() {       \n\t      public void run()  \n\t      {               \n\t          // for clarity, assume the following method contains the code in the example above               \n\t          startSoftScan();       \n\t      }  \n\t}, triggerDelay);  \n\n### ScannerInputPlugin\n#### Description\nThe ScannerInputPlugin API command can be used to enable/disable the scanner plug-in in the currently active profile. Disabling the scanner plug-in effectively disables scanning in that profile (associated or un-associated).\n \n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\ti.putExtra(EXTRA_DATA, \"<parameter>\"); \n\n#### Parameters\n\n* ACTION: String \"com.motorolasolutions.emdk.datawedge.api.ACTION_SCANNERINPUTPLUGIN\"\n* EXTRA_DATA: String \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PARAMETER\"\n* <parameter>:\tThe parameter as a string, either of the followingΓÇª\n\t* \"ENABLE_PLUGIN\" - enables the plug-in\n\t* \"DISABLE_PLUGIN\" - disables the plug-in\n\n#### Return Values\n\n* None.\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n\t* $ adb logcat -s DWAPI\n* Error messages will be logged for invalid actions and parameters\n\n#### Example\n\n\t:::java\n\t// define action and data strings  \n\tString scannerInputPlugin = \"com.motorolasolutions.emdk.datawedge.api.ACTION_SCANNERINPUTPLUGIN\";  \n\tString extraData = \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PARAMETER\";  \n\t  \n\tpublic void onResume() {       \n\t    // create the intent       \n\t    Intent I = new Intent();       \n\t    // set the action to perform       \n\t    i.setAction(scannerInputPlugin);       \n\t    // add additional info       \n\t    i.putExtra(extraData, \"DISABLE_PLUGIN\");       \n\t    // send the intent to DataWedge       \n\t    context.this.sendBroadcast(i);  \n\t}  \n\n#### Comments\nThis Data Capture API intent will allow you to enable/disable the scanner plug-in for the current profile. For example, letΓÇÖs say that activity A launches and uses the Data Capture API intent to switch to profileA in which the scanner plug-in is enabled, then at some point it uses the Data Capture API to disable the scanner plug-in. Activity B is launched. In DataWedge, profileB is associated with activity B. DataWedge switches to profileB. When activity A comes back to the foreground, in the onResume method, activity A will need to use the Data Capture API intent to switch back to profileA, then use the Data Capture API intent again to disable the scanner plug-in, to return back to the state it was in.\n\n>Note\n>The above assumes that profileA is not associated to any applications/activities, therefore when focus switches back to activity A, DataWedge will not automatically switch to profileA therefore activity A must switch back to profileA in its onResume method.\n>Because DataWedge will automatically switch profile when your activity is paused, it is recommended that this API function be called from the onResume method of your activity.\n\n### enumerateScanners\n#### Description\nThe enumerateScanners API command can be used to get a list of scanners available on the device.\n\n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\n#### Parameters\n\n* ACTION:\tString \"com.motorolasolutions.emdk.datawedge.api.ACTION_ENUMERATESCANNERS\"\n\n#### Return Values\n* The enumerated list of scanners will be returned via a broadcast intent. The broadcast intent action is \"com.motorolasolutions.emdk.datawedge.api.ACTION_ENUMERATEDSCANNERLIST\" and the list of scanners is returned as a string array (see the example below).\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n\t* $ adb logcat -s DWAPI\n* Error messages will be logged for invalid actions and parameters\n\n#### Example\n\n\t:::java\n\t// first send the intent to enumerate the available scanners on the device  \n\t// define action string  \n\tString enumerateScanners = \"com.motorolasolutions.emdk.datawedge.api.ACTION_ENUMERATESCANNERS\";  \n\t// create the intent  \n\tIntent I = new Intent();  \n\t// set the action to perform  \n\ti.setAction(enumerateScanners);  \n\t// send the intent to DataWedge  \n\tcontext.this.sendBroadcast(i);// now we need to be able to receive the enumerate list of available scanners  \n\tString enumeratedList = \"com.motorolasolutions.emdk.datawedge.api.ACTION_ENUMERATEDSCANNERLIST\";  \n\tString KEY_ENUMERATEDSCANNERLIST = \"DataWedgeAPI_KEY_ENUMERATEDSCANNERLIST\";  \n\t// Create a filter for the broadcast intentIntentFilter filter = new IntentFilter();  \n\tfilter.addAction(enumeratedList);registerReceiver(myBroadcastReceiver, filter);// now we need a broadcast receiver  \n\tprivate BroadcastReceiver myBroadcastReceiver = new BroadcastReceiver() {       \n\t      @Override        Public void onReceive(Context context, Intent intent) {               \n\t          String action = intent.getAction();               \n\t          if (action.equals(enumeratedList)) {                       \n\t                Bundle b = intent.getExtras();                       \n\t                String[] scanner_list = b.getStringArray(KEY_ENUMERATEDSCANNERLIST);               \n\t          }       \n\t      }  \n\t};  \n\n#### Comments\nThe scanner and its parameters are set based on the currently active profile.\n\n### setDefaultProfile\n#### Description\nThe setDefaultProfile API function can be used to set the specified profile as the default profile.\n\n#### Default Profile Recap\nProfile0 is the generic profile used when there are no user created profiles associated with an application. Profile0 can be edited but cannot be associated with an application. That is, DataWedge allows manipulation of plug-in settings for Profile0 but it does not allow assignment of a foreground application.\n\nThis configuration allows DataWedge to send output data to any foreground application other than applications associated with user-defined profiles when Profile0 is enabled.\n\nProfile0 can be disabled to allow DataWedge to only send output data to those applications which are associated in user-defined profiles. For example, create a profile associating a specific application, disable Profile0 and then scan. DataWedge only sends data to the application specified in the user-created profile. This adds additional security to DataWedge enabling the sending of data only to specified applications.\n\n#### usage Scenario\nLetΓÇÖs say a launcher application has a list of apps that a user can launch and that none of the listed apps has an associated DataWedge profile. Once the user has selected an app, the launcher needs to set the appropriate DataWedge profile for the selected app. This could be done by using setDefaultProfile to set the default profile to the required profile. Then when the user selected app is launched, DataWedge auto profile switching will switch to the default profile (which is now the required profile for that app).\n\nIf, for some reason, the launched app has an associated DataWedge profile then that will override the set default profile.\n\nWhen control is returned to the launcher application, resetDefaultProfile can be used to reset the default profile.\n\n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\ti.putExtra(EXTRA_DATA, \"<profile name>\");\n\n#### Parameters\n\n* ACTION:\tString \"com.motorolasolutions.emdk.datawedge.api.ACTION_SETDEFAULTPROFILE\"\n* EXTRA_DATA:\tString \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PROFILENAME\"\n* <profile name>:\tThe profile name to set as the default profile as a string (case-sensitive).\n\n#### Return Values\n\n* None.\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n\t* $ adb logcat -s DWAPI\n* Error messages will be logged for invalid actions, parameters and failures (e.g. profile not found or associated to an application).\n\n#### Example\n\n\t:::java\n\t// define action and data strings  \n\tString setDefaultProfile = \"com.motorolasolutions.emdk.datawedge.api.ACTION_SETDEFAULTPROFILE\";  \n\tString extraData = \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PROFILENAME\";  \n\t  \n\tpublic void onResume() {       \n\t    // create the intent       \n\t    Intent I = new Intent();       \n\t    // set the action to perform       \n\t    i.setAction(setDefaultProfile);       \n\t    // add additional info       \n\t    i.putExtra(extraData, \"myProfile\");       \n\t    // send the intent to DataWedge       \n\t    context.this.sendBroadcast(i);  \n\t}  \n\n#### Comments\n\n* The API command will have no effect if the specified profile does not exist or if the specified profile is already associated to an application.\n* Because DataWedge will automatically switch profile when your activity is paused, it is recommended that this API function be called from the onResume method of your activity.\n* It is recommended this profile be created to cater to all applications/activities that would otherwise default to using Profile0. This will ensure that these applications/activities continue to work with a consistent configuration.\n\nTo explain by example, letΓÇÖs say that initially Profile0 is the default profile using the camera as the barcode scanner. Using the Browser application and scanning a barcode with the camera, DataWedge enters the data into the Browser. Now you launch an application that changes the default profile to a profile using the blockbuster as the barcode scanner. When you go back to the Browser application, since it is using the default profile, scanning will now be via the blockbuster not the camera as previously. To ensure that the Browser continues to use the camera as the barcode scanner a profile should be created and associated to the Browser that specifies the camera as the barcode scanner.\n\n### resetDefaultProfile\n#### Description\nThe resetDefaultProfile API function can be used to reset the default profile back to Profile0.\n\n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\ti.putExtra(EXTRA_DATA, \"<profile name>\");\n\n#### Parameters\n\n* ACTION:\tString \"com.motorolasolutions.emdk.datawedge.api.ACTION_RESETDEFAULTPROFILE\"\n* EXTRA_DATA:\tString \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PROFILENAME\"\n* <profile name>:\tThe profile name to set as the default profile as a string (case-sensitive).\n\n#### Return Values\n\n* None.\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n\t* $ adb logcat -s DWAPI\n* Error messages will be logged for invalid actions, parameters and failures (e.g. profile not found or associated to an application).\n\n#### Example\n\n\t:::java\n\t// define action string  \n\tString resetDefaultProfile = \"com.motorolasolutions.emdk.datawedge.api.ACTION_RESETDEFAULTPROFILE\";  \n\t  \n\tpublic void onResume() {       \n\t    // create the intent       \n\t    Intent I = new Intent();       \n\t    // set the action to perform       \n\t    i.setAction(resetDefaultProfile);       \n\t    context.this.sendBroadcast(i);  \n\t}  \n\n#### Comments\n\n* None.\n\n### switchToProfile\n\n#### Description\nThe switchToProfile API action can be used to switch to the specified profile.\n\n#### Profiles Recap\nDataWedge is based on profiles and plug-ins. A profile contains information on how DataWedge should behave with different applications.\n\nProfile information consists of:\n\n* Associated application\n* Input plug-in configurations\n* Output plug-in configurations\n* Process plug-in configurations\n\n\nDataWedge includes a default profile, Profile0, that is created automatically the first time DataWedge runs.Using profiles, each application can have a specific DataWedge configuration. For example, each user application can have a profile which outputs scanned data in the required format when that application comes to the foreground. DataWedge can be configured to process the same set of captured data differently based on the requirements of each application.\n\n>Note\n>A single profile may be associated with one or many activities/apps, however, given an acitivty, only one profile may be associated to it.\n\n#### Usage Scenario\nLetΓÇÖs say an application has two activities. ActivityA only requires EAN13 barcodes to be scanned. ActivityB only requires MSR card data. ProfileB is configured to only scan EAN13 barcodes and is left unassociated. ProfileM is configured to only accept MSR input and is left unassociated. When ActivityA launches it uses switchToProfile to activate ProfileB. Similarily, when ActivityB launches it uses switchToProfile to activate ProfileM.\n\nIf another activity/app comes to the foreground, DataWedge auto profile switching will set the DataWedge profile accordingly either to the default profile or to an associated profile.\n\nWhen ActivityA (or ActivityB) comes back to the foreground it will use switchToProfile to reset the profile back to ProfileB (or ProfileM).\n\n#### Function Prototype\n\n\t:::java\n\tIntent i = new Intent();  \n\ti.setAction(ACTION);  \n\ti.putExtra(EXTRA_DATA, \"<profile name>\");  \n\n#### Parameters\n\n* ACTION:\tString \"com.motorolasolutions.emdk.datawedge.api.ACTION_SWITCHTOPROFILE\"\n* EXTRA_DATA:\tString \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PROFILENAME\"\n* <profile name>:\tThe profile name to switch to as a string (case-sensitive).\n\n#### Return Values\n\n* None.\n* Error and debug messages will be logged to the Android logging system which then can be viewed and filtered by the logcat command. You can use logcat from an ADB shell to view the log messages, e.g.\n\t* $ adb logcat -s DWAPI\n* Error messages will be logged for invalid actions, parameters and failures (e.g. profile not found or associated to an application).\n\n#### Example\n\n\t:::java\n\t// define action and data strings  \n\tString switchToProfile = \"com.motorolasolutions.emdk.datawedge.api.ACTION_SWITCHTOPROFILE\";  \n\tString extraData = \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PROFILENAME\";  \n\t  \n\tpublic void onResume() {       \n\t    super.onResume();       \n\t    // create the intent       \n\t    Intent I = new Intent();       \n\t    // set the action to perform       \n\t    i.setAction(switchToProfile);       \n\t    // add additional info       \n\t    i.putExtra(extraData, \"myProfile\");       \n\t    // send the intent to DataWedge       \n\t    context.this.sendBroadcast(i);  \n\t}  \n\n#### Comments\n* This API function will have no effect if the specified profile does not exist or if the specified profile is associated to an application.\n* DataWedge has a one-to-one relationship between profiles and activities, i.e. only one profile can be associated to any given activity. When a profile is initially created, it is not associated to any application. Until this profile is associated to an activity it will never be activated. In this way it is possible to create multiple profiles that are un-associated.\n* This API function allows you to switch to one such unassociated profile.\n\nFor example, let's say that ProfileA is one such un-associated profile and ProfileB is associated with activity B. Now, activity A is launched and uses this Data Capture API intent to switch to profileA. ProfileA will be active whilst activity A is in foreground. When another activity, say activity B, comes to the foreground DataWedge will automatically switch profile (to profileB which is associated to activity B for example). Then when activity A comes back to the foreground again, the app will need to use this Data Capture API intent to switch back to profileA. This would be done in the onResume method of activity A.\n \n> Note: Because DataWedge will automatically switch profile when your activity is paused, it is recommended that this API function be called from the onResume method of your activity.\n\n> Note: After switching to a profile, this un-associated profile does not get assigned to the application/activity and is available to be used in the future with a different app/activity.\n\n> Note: DataWedge automatic profile switching\n\nFor backward compatibility, DataWedge's automatic profile switching is not affected by the above API commands, and this also why the above API commands only work with unassociated profiles and apps.\n\nDataWedge auto profile switching works as follows:\n\n* Every second:\n\t1. Set newProfileId to the associated profile id of the current foreground activity\n\t2. If no associated profile found then set newProfileId to the associated profile id of the current foreground app\n\t3. If no associated profile found then set newProfileId to the current default profile (note: this may not be Profile0)\n\t4. Check the newProfileId against the currentProfileId\n\t5. If they are different then...\n\t\t* deactivate current profile\n\t\t* activate new profile (newProfileId)\n\t\t* set currentProfileId = newProfileId"},{"key":"guide-reference-refnativeandroid","name":" Using Native Android APIs","md":"# Using Native Android APIs\n\n## Overview\nSymbol offers Android products that are built on Android Open Source Platform (AOSP). Two variants are now being offered on the TC55 and planned for certain future products.\n\n### \"Standard Configuration\"\nThis version of the operating system incorporates Google Mobile Services. All standard Google API's are available to use in your application. Please consult [http://developer.android.com](http://developer.android.com) for details of using these APIs. Your application also has access to the [EMDK For Android APIs](#guide-reference-EMDKList) as well.\n\n### \"Professional Configuration\" \nThis version of the operating system does not incorporate Google Mobile Services. Standard Google APIs that doe not rely on the availability of GMS services will work on our devices. Please consult [http://developer.android.com](http://developer.android.com) for details of using these APIs. Your application also has access to the [EMDK For Android APIs](#guide-reference-EMDKList) as well.\n\n## About GMS\nGoogle offers a variety of applications and services collectively known as Google Mobile Services (GMS). There are also optional Android API extensions that allow applications to interface with said services. GMS is independent of Android and under a separate license from Google. GMS runs as an add-on above AOSP (Android Open Source Platform)\n\n### GMS Applications and Services\n\n* Google Maps\n* Google Play Services\n* Google Cloud Messaging\n* Google Analytics\n* Google+\n* Google Mail - Gmail\n* Google Cloud Platform\n* Google Wallet Instant Buy\n* Google Play In-App Billing\n* Google Mobile Ads\n* Google Drive\n* Google Cast\n\n### Challenges with GMS\nCareful considering should be made when deciding if your application requires the use of GMS.\n\n* Security \n\t* Google Mobile Services requires devices to be identified with a specific GoogleID. \n\t* Any enterprise data (Gmail, Maps, Cloud etc) will be pushed through Google's servers.\n\t* Gmail content is read by Google servers to improve relevance of advertisements.\n* Privacy\n\t* Google revamped their privacy policy in early 2012 allowing for richer user profiling across all services, for targeted advertising.\n\t* Usage acceptance allows Google to track a device's every move.\n\t* Google may collect IP Addresses, location, nearby Wi-Fi info, local storage and device setting details.  \n* Configuration\n\t* Extra manual steps may be required to be performed when the device boots up for the first time. \n\n### GMS Alternatives\nDepending on the feature your application requires, you my want to consider alternative choices before declaring that your application requires GMS. \n\n* Mapping\n\t* Consider cloud based mapping solutions like MapQuest or OpenStreetMap.\n\t* Consider alternative device resident solutions like ALK CoPilot, Sygic and Tele Atlas to name a few.\n* Push Messaging\n\t* Consider cross-platform solutions like RhoConnect.\n\t* Consider other cloud based messaging providers like Parse, Amazon SNS, Pushwoosh and others.\n* Play Store\n\t* Consider MDM solutions for application distribution.\n\t* Consider cross-platform solutions like RhoGallery.\n"},{"key":"guide-sample-emdksamples","name":"Using the EMDK Samples","md":"#Using the EMDK Samples\n\n##Overview\n\nThis guide will walk you through using the EMDK sample applications that are included with the EMDK for Android installation. Each version and updates of the EMDK For Android may come with a different set of sample applications. This guide generically describes how to make use of one of the samples. The general instructions apply to all samples. To learn more about each sample application, see their corresponding guide in the Samples menu.\n\n##Prerequisites\n- Java JDK \n- Android ADT \n- EMDK for Android  \n- An EMDK supported Android device\n\nFor more information about setting up the EMDK please see the [EMDK Overview](#guide-about).\n\n##Loading the Sample Application\nSample Applications are installed along with the EMDK and can be found in your start bar. \n\n1. Select Start \n2. Select \"EMDK for Android v2.0\"\n3. Select \"Samples\"\n\n\t  ![img](images/sample/1.jpg)\n4. Your browser should open with a list of included samples\n\n\t  ![img](images/sample/2.jpg)\n5. Select \"ADTSamples\" from the web page   \n\n\t  ![img](images/sample/3.jpg)\n6. Copy the path to the directory on your computer   \n\n\t  ![img](images/sample/4.jpg)\n\n7. In Eclipse select From the tool bar \"File\" -> \"Import\"\n8.  Select Android \"Existing Android Code Into Workspace\"\n\n    ![img](images/sample/5.jpg)\n9. Browse to the samples directory from the web page and select a sample for example\"ProfileDataCaptureSample1\"\n\n    ![img](images/sample/6.jpg)\n10. Select Finish\n\n##Deploying a Sample Application\n\n1. Attach an EMDK supported Android device to your computer in USB debug mode. \n\n\t>NOTE: The device needs the EMDK runtime installed.\n2. From the Package Explorer right click on the select the sample application \n3. Right click on the project and select \"Run As\" -> \"Android Application\"\n\n\t![img](images/sample/7.jpg)\n4. Select your Android device and click \"Okay\". \n    \n    ![img](images/sample/8.jpg)\n\n##About the Sample Applications\nYou can inspect the code of the sample application to see what it is doing as well as consult the overview guide for each sample application.\n\n* [Datacapture](#guide-sample-sampledatacaptureprofile)\n* [App Manager](#guide-sample-sampleprofileapp)\n* [Clock](#guide-sample-sampleprofileclock)\n* [GPRS Manager](#guide-sample-sampleprofilegprs)\n* [Power Manager](#guide-sample-sampleprofilepower)\n* [Wi-Fi Manager](#guide-sample-sampleprofilewifi)\n* [Scanning/Barcode APIs](#guide-sample-samplebarcode)\n\n"},{"key":"guide-sample-samplebarcode","name":"Barcode Manager Feature Sample","md":"#Barcode Manager Feature Sample\n\n##Overview\nThe EMDK for Android is used when you wish to handle all barcode scanning entirely in Java using [Barcode/Scanning APIs](#guide-reference-EMDKList) introduced in EMDK V3.0. These API's work independently of any [Data Capture profiles.](#guide-profiles-profilebarcode).  \n\nThe available actions in the [Barcode/Scanning API](#guide-reference-EMDKList) are:\n  \n* Set Scanner Device  \n* Set [TriggerType](#api-Scanner)\n* Set [Decoder Params](#api-ScannerConfig-DecoderParams)\n* Set [Reader Params](#api-ScannerConfig-ReaderParams)\n* Set [Scan Params](#api-ScannerConfig-ScanParams)\n* Scan barcodes based on selected features   \n\nThis sample application will allow you to scan barcodes based on selected scanner device, trigger type and few decoder [Decoder Params](#api-ScannerConfig-DecoderParams).\n\n##Prerequisites\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Loading the Sample Application\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Deploying The Sample Application\n[Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Using This Sample\n1. When the application starts it should look like the following.\n  \n\t![img](images/samples/barcode_1.png)\n  \n2. Set scanner to \"Serial SSI Scanner\", which is the default one\". \n\n\t![img](images/samples/barcode_2.png)\n\n3. Set Trigger Type to \"HARD\".\n\n\t![img](images/samples/barcode_3.png)\n\n\t> Note: Trigger Type \"HARD\" lets you scan the barcode using device's hard scan key whereas \"SOFT\" allows you to scan without using devic's hard scan key.\n\n4. Keep all checkboxes checked for decoder params and this is how it should look after setting all fields.\n    \n\t![img](images/samples/barcode_4.png)  \t\n\n5. Click \"Start\" button and the status will be updated.\n\n\t![img](images/samples/barcode_5.png) \n \n6. Since we selected Trigger Type as \"HARD\", press the hard scan key of Symbol device and scan a particular barcode. It will get the scanned barcode data in \"Data\" field of UI.\n   \n\t![img](images/samples/barcode_6.png)  \n\t"},{"key":"guide-sample-samplebatteryintent","name":" Battery Intent Sample","md":"# Battery Intent Sample\n\n## Overview\nOn Symbol Android devices like the MC40, extra battery information can be retrieved using the standard [Android Battery Intent](http://developer.android.com/training/monitoring-device-state/battery-monitoring.html). Setting up to receive this information is the same as with consumer Android devices. However, the data that is returned to your application includes some extra information like:\n\n* Backup Battery Voltage\n* Battery Manufacture Date\n* Battery Serial Number\n* Part Number for Battery\n* Unique ID for Battery\n* Rated Capacity of the Battery\n* Charge Cycle count of the Battery\n \n## Using This Sample\nYou may choose to install the Battery Sample Application.apk or to run the project from Eclipse:\n\n1. Download the battery sample application zip. \n2. Unzip the battery sample application zip.\n3. Start the Android ADT or compatible eclipse environment. \n4. Import the sample application. \n\t>How to import:  \n \t>1. Go to \"File\" -> \"Import\"  \n \t>![img](images/FileImport.jpg)   \n \t>2. Select \"Android\" -> \"Existing Android Code Into Workspace\" -> \"Next\"   \n \t>![img](images/ImportNext.jpg)   \n \t>3. Select \"Browse\" and navigate to your unzipped battery sample application folder.  \n \t>![img](images/Browse.jpg)  \n \t>4. Select \"Finish\".  \n \t>![img](images/Finish.jpg)  \n\n5. Run the sample application. \n\t>How to run the sample application:   \n \t>1. Select the sample application folder in \"Package Explorer\".      \n \t>2. Right click and select \"Run As\" -> \"Android Application\"  \n \t>![img](images/RunAs.jpg)   \n\n6. The battery sample application should look like the following:  \n\n![img](images/BatterySampleApplication.jpg)  \n\n7. The information on the screen will update each time a battery intent is received. To force the intent you may change power state of the device by charging or unplugging it from a power source.\n\n\n## How This Sample Was Built \nA [Tutorial](#guide-tutorial-tutbatteryintent) walks through how this sample application was built. \n\n## Download\nThe project [source](https://s3.amazonaws.com/emdk/Tutorials/BatterySampleApplication.zip) and [application](https://s3.amazonaws.com/emdk/Tutorials/BatterySampleApplication.apk.zip) to this tutorial can be downloaded (Internet Connection Required).\n<a name=\"theend\"></a>\n"},{"key":"guide-sample-sampledatacaptureintent","name":" Data Capture Intent Sample","md":"# Data Capture Intent Sample\n\n## Overview\nThis sample demonstrates how to use the DataWedge Intent output plug-in and the [Data Capture Intent API](#guide-reference-refdatacaptureintent) to receive captured data in your native Android application. \n\nA [Tutorial](#guide-tutorial-tutdatacaptureintent) walks through how this sample application was built from scratch. If you would simply like to see the application run on your device, follow the instructions in the next section.\n\n## Using This Sample\n\n1. Download DataCaptureDemoSource.apk to your computer\n2. Copy the APK from your computer to a Android device like a MC40 (using USD file copy or ADB)\n3. From the device, launch the File Manager application and click on the APK file you just copied to install the DWDemoSample application.\n4. On the device, Launch DataWedge\n5. Create a new profile and give it a name such as \"dwdemosample\"\n\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/2.png)\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/4.png)\n6. Edit the profile\n\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/5.png)\n7. Go into Associated apps, tap the menu button, and add a new app/activity\n\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/7.png)\n8. For the application select com.motorolasolutions.emdk.sample.dwdemosample\n\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/8.png)\n9. For the activity select com.motorolasolutions.emdk.sample.dwdemosample.MainActivty\n\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/9.png)\n10. Go back and disable the keystroke output plug-in\n\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/11.png)\n11. Enable the intent output plug-in\n\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/12.png)\n12. For the intent action enter com.motorolasolutions.emdk.sample.dwdemosample.RECVR\n\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/18.png)\n13. For the intent category enter android.intent.category.DEFAULT\n\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/14.png)\n14. Launch the DataWedge Demo Sample application\n\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/17.png)\n15. Press the back button to clear the keyboard\n16. Press the scan trigger on the device and scan a printed barcode\n17. Notice that the output displays the barcode data preceded with additional info (source, symbology and length) that is handled by the handleDecodeData() Intent receiver method.\n\t![img](https://s3-us-west-1.amazonaws.com/launchpad-images/emdk/SampleDataIntent/20.png)\n\n## Download\nThe project [source](https://s3.amazonaws.com/emdk/Tutorials/DataCaptureDemoSource.zip) and [application](https://s3.amazonaws.com/emdk/Tutorials/DataCaptureDemoApp.apk.zip) to this tutorial can be downloaded (Internet Connection Required).\n\n<a name=\"theend\"></a>\n\n\n\n"},{"key":"guide-sample-sampledatacaptureprofile","name":"Data Capture Profile Feature Sample","md":"#Data Capture Profile Feature Sample\n\n##Overview\nOne of the features of the EMDK is the ability to create Barcode scanning profiles. This application allows you to modify a Barcode profile to select which times of Barcodes should be interpreted.  \n\n##Prerequisites\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Loading the Sample Application\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Deploying The Sample Application\n[Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Using This Sample\n1) When the application first loads you will see:\n\n* Checkboxes for changing Barcode options\n* A text area where Barcode data will be displayed\n* A Status area where status will be shown\n\n![img](images/sample/9.png)\n\n2) Select which Barcode types you would like to enable.  \n3) click \"Set\".  \n4) San a Barcode of one of the selected Barcode types.  \n5) The data from the Barcode should populate on the screen.  \n  ![img](images/sample/new.png)\n\n## Application Startup\nUsing the Profile Manager Wizard, a profile called 'DataCaptureprofile-1' was created. You can inspect the parameters it has by launching the EMDK Profile Manager from Eclipse.\n\n![img](images/sample/10.jpg)\n\nYou will see that the MainActivity for the application has been selected to indicate when this profile will be used. As you can see in EMDK for Android V 2.1, the existing features of V 2.0 are categorized based on their operations such as Activity Selection, Data Input (Barcode, MSR) and Data Delivery (Intent, Keystroke and IP). Moreover it has introduced several new MX (Mobility Extension) features (Ex. Clock, App Manager, Power Manager etc). These MX features are used for configuring Symbol Android devices.\n\n   > Note: The field \"Name\" contains user defined name to identify a particular feature. This is required when editing any specific feature programmatically, which is outside the scope of this tutorial. So we will keep the \"Name\" field empty.\n\n![img](images/sample/11.jpg)\n\n   > Note: The field \"Name\" contains user defined name to identify a particular Barcode Scanner Input feature. This is required when editing any specific Barcode Scanner Input feature programmatically, which is outside the scope of this tutorial. So we will keep the \"Name\" field empty.\n\nThe profile feature parameters that have been chosen can be inspected to see that certain barcode decoders have been enabled and the output will be using the Keystroke feature. This profile has MSR and Intent output disabled.\n\n![img](images/sample/12.jpg)\n\n![img](images/sample/13.jpg)\n\n![img](images/sample/14.jpg)\n\nWhen the application starts up, the onOpened method is executed and the profile is processed.\n\n![img](images/sample/15.jpg)\n\n![img](images/sample/16.jpg)\n\nIt if was successful, you will see \"Profile initialization Success\" on the application's status area.\n\n![img](images/sample/17.png)\n\n## Scanning a Barcode\nAfter the application has been loaded, you can begin scanning barcodes. Notice that only Code128, EAN8, UPCA types have been chosen. When you press the scan trigger on the device, you should see the default scanner become activated and a barcode is attempted to be read. If the barcode you have chosen is not one of the ones listed above, it will not decode and display in the text area. \n\n>NOTE: Most everyday items you may have in your home use the UPCA type barcode. You may also Google these types of barcode to see what they look like and print one out for testing\n\nUpon successful Barcode scanning, the barcode data will be output into the text field.\n\n![img](images/sample/18.png)\n\n## Changing Barcode Settings\nWhen you uncheck the checkboxes in the application, the DataCaptureProfile-1 is modified on the fly using the ProfileConfig API. \n\n* Uncheck the barcode type you just scanned in \n* tap 'Set' and you should see 'Profile update success' in the status area\n\n![img](images/sample/19.png)\n\nNow when you scan the same Barcode, you will still see the barcode aimer but the data will not be decoded and you will not see the data displayed in the text area.\n\n## Next Steps\nNow that you have played with a pre-built sample application, it is time to try and build your own application from scratch. Follow the steps in the [DataCapture Profile Manager Tutorial](#guide-tutorial-tutdatacaptureprofile).\n\n"},{"key":"guide-sample-sampleprofileapp","name":"App Manager Profile Feature Sample","md":"#App Manager Profile Feature Sample\n\n##Overview\n\nThe EMDK for Android allows you to manage applications on the device. \n\nThe available actions are:  \n- Install an application\n- Uninstall an application\n- Upgrade an application  \n- Set an application as the default launcher \n\nThis sample application will allow you to install, upgrade, and uninstall an application. \n\n##Prerequisites\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Loading the Sample Application\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Deploying The Sample Application\n[Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Using This Sample\n1. When the application starts it should look like the following.  \n\t![img](images/samples/2_1.png)  \n2. Enter the path to an APK file that you have placed on your device.  /sdcard/Battery Sample Application.apk\n\t![img](images/samples/2_2.png)  \t\n\t>Note:  \n\t>To place an APK file on the device connect the device to to you computer over USB as a \"Medea Device\" and copy an APK to your device.  \n3.  Click \"Set\" \n4.  Check the status field.   \n\t![img](images/samples/2_3.png)  \n\t\n"},{"key":"guide-sample-sampleprofileclock","name":"Clock Profile Feature Sample#","md":"#Clock Profile Feature Sample#\n\n##Overview##\nOne of the features of the EMDK for Android is the ability to set the system clock. This sample application will show you how you can create a custom application for setting the system time. \n\n##Prerequisites\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Loading the Sample Application\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Deploying The Sample Application\n[Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Using This Sample\n1. When the application starts it should look like the following.  \n\t![img](images/samples/3_1.png)  \n2. Enter the time you would like to set.  \n\t![img](images/samples/3_2.png)  \t\n3.  Click \"Set\" \n4.  Check the status field.   \n\t![img](images/samples/3_3.png)  \n\t\n"},{"key":"guide-sample-sampleprofilegprs","name":"GPRS Manager Profile Feature Sample","md":"#GPRS Manager Profile Feature Sample\n\n##Overview\nThe EMDK for Android allows you to allows you to add or remove APNs to a Symbol device. \n\nThe available actions are:\n  \n* Add/Replace named APN  \n* Remove existing named APN  \n* Remove all existing APNs  \n\nThis sample application will allow you to Add/Replace named APN and remove existing named APN.\n\n##Prerequisites\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Loading the Sample Application\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Deploying The Sample Application\n[Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Using This Sample\n1. When the application starts it should look like the following.\n  \n\t![img](images/samples/gprs_1.png)\n  \n2. Select Add/Remove named APN\n  \n\t![img](images/samples/gprs_2.png)  \t\n\n3. Provide APN Name (Ex. \"Test_APN\") and check the checkbox \"Replace if exist\".\n\n\t![img](images/samples/gprs_3.png)\n\n4. Provide the applicable APN details such as:\n\n\tAccess Point: wap.cingular\n\n\tUse Name: WAP@CINGULARGPR.COM\n\n\tPassword: CINGULAR1\n\n\t![img](images/samples/gprs_4.png)\n  \n5. Click \"Apply\" button.\n\n6. Check the status field.   \n\t![img](images/samples/gprs_5.png)  \n\t"},{"key":"guide-sample-sampleprofilepower","name":"Power Manager Profile Feature Sample","md":"#Power Manager Profile Feature Sample\n\n##Overview\nThe EMDK for Android allows you to control the power state of a Symbol device. \n\nThe available actions are:  \n- Do Nothing  \n- Sleep Mode  \n- Reboot  \n- OS Update  \n\nThis sample application will allow you to set the power state of \"Suspend\" (sleep mode) or \"Reset\" (reboot).\n\n##Prerequisites\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Loading the Sample Application\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Deploying The Sample Application\n[Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Using This Sample\n1. When the application starts it should look like the following.  \n\t![img](images/samples/1_1.png)  \n2. Select the power mode you would like to set.  \n\t![img](images/samples/1_2.png)  \t\n3.  Click \"Set\" \n4.  Check the status field.   \n\t![img](images/samples/1_3.png)  \n\t"},{"key":"guide-sample-sampleprofilewifi","name":"Wi-Fi Manager Profile Feature Sample","md":"#Wi-Fi Manager Profile Feature Sample\n\n##Overview\nThe EMDK for Android allows you to configure Wi-Fi of a Symbol device. \n\nThe available actions are:\n  \n* Disable Wi-Fi  \n* Enable Wi-Fi  \n* Add a Network  \n* Connect to a Network\n* Enable a Network\n* Disconnect from a Network\n* Disable a Network\n* Remove a Network\n\n> Note: In order to perform all Wi-Fi network operations, Wi-Fi should be enabled.  \n\nThis sample application will allow you to perform all the above mentioned Wi-Fi actions on Symbol device.\n\n##Prerequisites\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Loading the Sample Application\n[See Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Deploying The Sample Application\n[Using the EMDK Samples](#guide-sample-emdksamples)\n\n##Using This Sample\n\n1. When the application starts it should look like the following.\n  \n\t![img](images/samples/wifi_1.png)\n  \n2. Select the Wi-Fi operation you want (Enable/Disable).\n   \n\t![img](images/samples/wifi_2.png)  \t\n\n3. Select the Network action you want to execute from the Network Action drop-down. \n\tLet us select \"Add(Default Open Network)\" option.\n\n\t![img](images/samples/wifi_3.png)\n\n\t> Note: You could also add Personal Network with Passphrase and Enterprise Network with required certificate, which is not in the scope of this sample. \n4. Provide some SSID to the network you want to add in SSID field (Ex. Test_Network).\n\n\t![img](images/samples/wifi_4.png)\n\n5. Click \"Apply\" button.\n\n6. Check the status field.\n   \n\t![img](images/samples/wifi_5.png)  \n\t"},{"key":"guide-setup","name":" EMDK For Android Setup","md":"# EMDK For Android Setup\n\n## Overview\n\nThe EMDK for Android provides the interface to Symbol value adds such as scanning and magstripe for developing Enterprise applications on Symbol Android devices.\nThis document is a guide to start working with Android Developer Tools (ADT)/Eclipse IDE environment for \"EMDK for Android\" development. \n\n##Configuring Development Computer\n\n### Installing Java Development Kit (JDK)\n1.\tGo to [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).\n2.\tDownload and install JDK v7u45 or newer. \n\n### Installing Android Developer Tools (ADT)\n1.\tGo to [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html \"http://developer.android.com/sdk/index.html\").\n2.\tClick \"Download the SDK\" button.\n3.\tAccept the License Agreement and Select the PC's architecture (32-bit or 64-bit).\n4.\tClick \"Download the SDK ADT Bundle for Windows\" button.\n5.\tExtract the downloaded ADT Bundle (ex. adt-bundle-windows-x86-20140321.zip) to any desired location.\n\n\t>NOTE:  \n\t>EMDK for Android requires ADT v22.3.0-887826 or higher version.\n\n### Configuring the Android Developer Tools (ADT) for EMDK\nThe EMDK requires Android API's 16 and 19 to be Installed.\n\nTo check which API's you have installed:\n\n1. In Eclipse go to `Window` then `Android SDK Manager`\n2. Check that the status of `Android 1.1.2 (API 16)` and `Android  4.4.2 (API 19)` SDK Platforms status is `Installed`. \n3. If either SDK platform is not installed check the SDK check mark, click `Install Packages`, and follow the on screen instructions. When the install is complete restart Eclipse. \n\n\n### Installing EMDK for Android\n1.\tGo to [https://portal.motorolasolutions.com/Support/US-EN](https://portal.motorolasolutions.com/Support/US-EN).\n2.\tSearch `EMDK for Android` using the Search Support.\n3.\tDownload and install EMDK for Android v3.0 or higher version.\n4. \tDuring installation, it will ask to specify the preferred Android development environment.\nThis can be either the Android Developer Tools (ADT) Bundle or the existing Eclipse IDE and the Android SDK (installed separately).  \n\t* The Android Developer Tools (ADT) Bundle. This includes Android SDK components and a version of the Eclipse IDE with built-in ADT.  \n\t\t>NOTE:  \n\t\t>Make sure to specify the extracted ADT Bundle folder as the ADT Root Folder (i.e. the parent folder which `eclipse` and `sdk` sub folders reside. See below).\n\t    >\n\t>![img](images/setup/image001.png)  \n\t* During installation, it will ask the approval for Symbol Android USB driver installation. If you have installed them already, skip this step.  \n\t* The existing Eclipse IDE and Android SDK (installed separately).  \n\t\t>NOTE:  \n\t\t>Make sure to specify the parent folder where `eclipse.exe` resides as the Eclipse Root Folder. See below.\n\t    >\n\t\t>![img](images/setup/image003.jpg)\n\t\t>\n\t\t>Make sure to specify the parent folder where `platform-tools` folder resides as the Android SDK Root Folder. See below.\n\t    >\n\t\t>![img](images/setup/image005.jpg)\n\n5.\tDuring installation, it will ask the approval for Symbol Android USB driver installation too. \n\t     \n\t![img](images/setup/image007.jpg)\n\n\t>NOTE:\n\t>\n\t>* If you have installed it already, click `No`. Then it will switch back to the EMDK for Android installation.\n\t>\n\t>* If you have not installed, click `Yes`. Then it will start the Symbol Android USB driver installation automatically. Once completed, make sure to select `I want to manually reboot later` and click `Finish`. Then it will switch back to the EMDK for Android installation.\n\n## Configuring Device\n\n###\tInstalling EMDK for Android Device Runtime using Deployment utility\n\n1.\tConnect the device to PC.\n2.\tLaunch the Start menu program shortcut `Device Runtime Deployment`. This will open the command prompt window.\n3.\tClick any key to continue.\n4.\tThis process will deploy the device runtime and reboot automatically to finish the OS update.\n\n### Installing the EMDK device runtime when the AppLock Manager is On:\n\n* Option 1: Turn Off the AppLock Manager before EMDK device runtime deployment and the AppLock Manager can be turned On after device reboot.\n* Option 2: The customer can add the EMDK OS update app name to the AppLock Manager Applications white list before the EMDK device runtime deployment.\n\n### Installing the EMDK device runtime on Google Mobile Service (GMS) devices:\nBefore installing EMDK device runtime on GMS devices, you must enable the enterprise-grade features like Mobility Extensions (MX). To download enterprise enabler for your device, go to [https://portal.motorolasolutions.com/Support/US-EN](https://portal.motorolasolutions.com/Support/US-EN) and search for \"Enterprise Enabler\" along with the device name.\n\n\n## Verifying EMDK for Android Development Environment\n\n###\tVerifying the EMDK Wizard plug-in integration into the ADT/Eclipse IDE  \n1.\tRun `eclipse.exe` available under `[adt-bundle]\\eclipse` (ex. \\adt-bundle-windows-x86-20140321\\eclipse\\eclipse.exe) or `[eclipse-root]` (ex. \\eclipse-standard-kepler-SR2-win32\\eclipse\\eclipse.exe).\n2.\tThe menu bar should contain a new menu called \"EMDK\" (see below)\n\n\t![img](images/setup/image009.jpg)\n\n### Verifying the SDK add-on integration into the ADT/Eclipse IDE\n1.\tSelect any existing Android application project.\n2.\tGo to `File` -> `Properties`\n\n\t![img](images/setup/image011.jpg)\n3.\tSelect `Android` from left pane.\n\n\t![img](images/setup/image015.jpg)\n4.\tCheck the availability of `EMDK APIs` in the list of Project Build Targets.\n\n\t![img](images/setup/image039.jpg)\n\n### Verifying EMDK for Android Runtime Environment\n\nTo check whether the EMDK runtime is installed on the device or not, check for the existence of `/system/framework/com.symbol.emdk.jar` on the device.\n\n\n![img](images/setup/image097.jpg)\n\n"},{"key":"guide-tutorial-tutAdvancedScanningAPI","name":" Advanced Scanning Tutorial using Barcode API","md":"# Advanced Scanning Tutorial using Barcode API\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use [Barcode/Scanning APIs](#guide-reference-EMDKList) introduced in EMDK V 3.0, to perform some of the additional options along with Scanning operations on your Symbol Android devices without using Profile Wizard. The API uses [Barcode Manager](#api-BarcodeManager), which is the primary object to access barcode scanning feature. \n\nIn this tutorial, we will explore the [Barcode/Scanning API](#guide-reference-EMDKList) by using some of its features for developing an advanced application that will scan barcodes.\n\n> Note: You don't need the Profile Wizard while using the Barcode/Scanning APIs as everything could be configured programmatically through code.\n\nWe will be configuring following features:\n\n* **Device Types:**\nUsing this feature, we will get the scanning devices supported by a specific Symbol device (Ex. Serial SSI Scanner, Camera Scanner etc.)\n\n* **[Decoder Params](#api-ScannerConfig-DecoderParams):**\nThis feature will be used to configure various types of decoders through our applications for scanning specific type of decoder scanner. (Ex. Code 11, Code 39, UPCA etc.)\n\n* **[Reader Params](#api-ScannerConfig-ReaderParams):**\nReader params are used to configure reader specific options of a particular scanning device. In this tutorial, we will configure Illumination Mode for \"Camera Scanner\".\n\n> Note: \"Illumination Mode\" is available only for Camera Scanner device.\n\n* **[Scan Params](#api-ScannerConfig-ScanParams):**\nScanParams class provides access to scanning parameters that are available for all decoders.\nIn this tutorial we will configure following Scanning Params:\n  1. Vibration: This Scan Param is used to configure Vibration of the scanner device when scanning barcodes.\n  2. Scan Tone: This Scan Param is used to set Scan tone while scanning barcodes. We can apply various media, notification or alarm tones to the device while scanning barcodes. We can also keep a silent tone by not passing any parameter to this attribute. In this tuturial, we will provide a list of Scan Tones for the user to select including silent mode where we won't pass any parameter to Scan Tone attribute.      \n        \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 3.0 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/AdvancedScanningTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/AdvancedScanningTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/AdvancedScanningTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/AdvancedScanningTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/AdvancedScanningTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/AdvancedScanningTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Since we are not using Profile Wizard, the EMDKConfig.xml file will not be created under \"\\assets\" folder.  \n    \n    ![img](images/AdvancedScanningTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project \"AdvancedScanningTutorial\".\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/AdvancedScanningTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/AdvancedScanningTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/AdvancedScanningTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/AdvancedScanningTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/AdvancedScanningTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/AdvancedScanningTutorialImages/java_compiler_settings.jpg)   \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK to scan the barcodes.\n  \n    ![img](images/AdvancedScanningTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':\n\n    You then need to enable other permissions such as camera, vibrate, system_alert_window.  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\" />\n        <uses-permission android:name=\"android.permission.CAMERA\" />\n        <uses-permission android:name=\"android.permission.VIBRATE\" />\n        <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" /> \n\n    Then you must enable the library for EMDK and Scanner:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\" />\n        <uses-library android:name=\"com.motorolasolutions.scanner\" />\n        <uses-library\n            android:name=\"com.motorolasolutions.adc.usbscanner\"\n            android:required=\"false\" />\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/AdvancedScanningTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.EMDKManager;\n\t\timport com.symbol.emdk.EMDKManager.EMDKListener;\n\t\timport com.symbol.emdk.barcode.ScanDataCollection;\n\t\timport com.symbol.emdk.barcode.Scanner.DataListener;\n\t\timport com.symbol.emdk.barcode.Scanner.StatusListener;\n\t\timport com.symbol.emdk.barcode.StatusData;   \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.\n\n    After that you also need to implement `StatusListener` for notifying client applications to notify scan events. Override its `onStatus` function.\n\n     Implement `DataListener` for notifying client applications when the scan data is available. Override its `onData` function.\n\n\tFinally, we will implement `OnCheckedChangeListener` that has an overriden method `onCheckedChanged`, which gets called whenever the user checks or unchecks any checkbox. We will be using checkboxes for various decoders that user can check or uncheck based on the requirement.  \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener,\n\t\tStatusListener, DataListener, OnCheckedChangeListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n         @Override\n\t     public void onClosed() {\n\t\t  // TODO Auto-generated method stub\n\n\t     }\n\n\t     @Override\n\t     public void onOpened(EMDKManager arg0) {\n\t\t  // TODO Auto-generated method stub\n\n\t     }\n\n\t     @Override\n\t     public void onData(ScanDataCollection scanDataCollection) {\n\t\t  // TODO Auto-generated method stub\n\n\t     }\n\n\t     @Override\n\t     public void onStatus(StatusData statusData) {\n\t\t  // TODO Auto-generated method stub\n\n\t     }\n\n\t     @Override\n\t     public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n\t\t  // TODO Auto-generated method stub\n\n\t     }  \n          \n        }      \n\n    We will now create some global variables to hold the instance objects of EMDKManager, [BarcodeManager](#api-BarcodeManager) and [Scanner](#api-Scanner). These variables would be used throughout the code.\n\n    It will have some UI elements such as [Checkboxes](http://developer.android.com/reference/android/widget/CheckBox.html) to  \n\n    We will then add some UI elements starting with a [TextView](http://developer.android.com/reference/android/widget/TextView.html) to display the status of scanning operation and then [EditText](http://developer.android.com/reference/android/widget/EditText.html) to populate scanned barcode data.\n\n    We will also declare a boolean variable to identify the current state of the scanner so that the status Text view can be updated accordingly.  \n    \n        :::java\n        // Declare a variable to store EMDKManager object\n\t\tprivate EMDKManager emdkManager = null;\n\n\t\t// Declare a variable to store Barcode Manager object\n\t\tprivate BarcodeManager barcodeManager = null;\n\n\t\t// Declare a variable to hold scanner device to scan\n\t\tprivate Scanner scanner = null;\n\n\t\t// Text view to display status of EMDK and Barcode Scanning Operations\n\t\tprivate TextView statusTextView = null;\n\n\t\t// Edit Text that is used to display scanned barcode data\n\t\tprivate EditText dataView = null;\n\n\t\t// CheckBox to set Decoder Param Code 11;\n\t\tprivate CheckBox checkBoxCode11;\n\n\t\t// CheckBox to set Decoder Param Code 39;\n\t\tprivate CheckBox checkBoxCode39;\n\n\t\t// CheckBox to set Decoder Param Code 128;\n\t\tprivate CheckBox checkBoxCode128;\n\n\t\t// CheckBox to set Decoder Param Code UPCA;\n\t\tprivate CheckBox checkBoxCodeUPCA;\n\n\t\t// CheckBox to set Decoder Param EAN 8;\n\t\tprivate CheckBox checkBoxEAN8;\n\n\t\t// CheckBox to set Decoder Param EAN 13;\n\t\tprivate CheckBox checkBoxEAN13;\n\n\t\t// CheckBox to set Reader Param Illumination Mode;\n\t\tprivate CheckBox checkBoxIlluminationMode;\n\n\t\t// CheckBox to set Scan Param Vibration Mode (decodeHapticFeedback);\n\t\tprivate CheckBox checkBoxVibrationMode;\n\n\t\t// Drop Down for selecting scanner devices\n\t\tprivate Spinner deviceSelectionSpinner;\n\n\t\t// Drop Down for selecting the type of streaming on which the scan beep\n\t\t// should\n\t\t// be played\n\t\tprivate Spinner scanToneSpinner;\n\n\t\t// Boolean to explain whether the scanning is in progress or not at any\n\t\t// specific point of time\n\t\tboolean isScanning = false;\n\n\t\t// Array Adapter to hold arrays that are used in various drop downs\n\t\tprivate ArrayAdapter<String> spinnerDataAdapter;\n\t\n\t\t// List of supported scanner devices\n\t\tprivate List<ScannerInfo> deviceList;\n\t\n\t\t// Provides current scanner index in the device Selection Spinner\n\t\tprivate int scannerIndex = 0;\n\n    The code till here looks like:\n    ![img](images/AdvancedScanningTutorialImages/variables_added.jpg) \n\n2. Now, let us design the simple UI that has fields for each of the features mentioned above starting with [Spinner](http://developer.android.com/guide/topics/ui/controls/spinner.html) to display list of scanner devices and scan tones at the bottom. It will then have some [Checkboxes](http://developer.android.com/reference/android/widget/CheckBox.html) to display decoder params, reader params and scan params for scanner. Finally the screen has a [TextView](http://developer.android.com/reference/android/widget/TextView.html) to display the status of scanning operation and above that an [EditText](http://developer.android.com/reference/android/widget/EditText.html) to populate scanned barcode data. Since the UI has lots of elements, we need to embed it in a [ScrollView](http://developer.android.com/reference/android/widget/ScrollView.html) to view all the UI elements.\n\n    So, remove all the code, inside \"res/layout/activity_main.xml\" and add following XML layout code for UI.\n\n        :::xml\n\t    <ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    android:layout_width=\"fill_parent\"\n\t    android:layout_height=\"fill_parent\"\n\t    android:paddingBottom=\"5dip\" >\n\t\n\t      <RelativeLayout\n\t        android:layout_width=\"match_parent\"\n\t        android:layout_height=\"wrap_content\" >\n\t\n\t        <TextView\n\t            android:id=\"@+id/device_Selection\"\n\t            android:layout_width=\"match_parent\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_margin=\"5dip\"\n\t            android:text=\"Select Scanner Device Type:\"\n\t            android:textSize=\"16sp\"\n\t            android:textStyle=\"bold\" />\n\t\n\t        <Spinner\n\t            android:id=\"@+id/device_selection_spinner\"\n\t            android:layout_width=\"match_parent\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_below=\"@+id/device_Selection\"\n\t            android:layout_margin=\"5dip\" />\n\t\n\t        <TextView\n\t            android:id=\"@+id/decoder_selection\"\n\t            android:layout_width=\"match_parent\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_below=\"@+id/device_selection_spinner\"\n\t            android:layout_margin=\"5dip\"\n\t            android:text=\"Select Decoder Params:\"\n\t            android:textSize=\"16sp\"\n\t            android:textStyle=\"bold\" />\n\t\n\t        <RelativeLayout\n\t            android:id=\"@+id/decoder_layout\"\n\t            android:layout_width=\"match_parent\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_below=\"@+id/decoder_selection\"\n\t            android:layout_margin=\"5dip\" >\n\t\n\t            <CheckBox\n\t                android:id=\"@+id/checkBoxCode39\"\n\t                android:layout_width=\"wrap_content\"\n\t                android:layout_height=\"wrap_content\"\n\t                android:layout_alignParentLeft=\"true\"\n\t                android:layout_margin=\"3dip\"\n\t                android:checked=\"true\"\n\t                android:text=\"Code 39\"\n\t                android:textSize=\"14sp\" />\n\t\n\t            <CheckBox\n\t                android:id=\"@+id/checkBoxCode128\"\n\t                android:layout_width=\"wrap_content\"\n\t                android:layout_height=\"wrap_content\"\n\t                android:layout_margin=\"3dip\"\n\t                android:layout_toRightOf=\"@+id/checkBoxCode39\"\n\t                android:checked=\"true\"\n\t                android:text=\"Code 128\"\n\t                android:textSize=\"14sp\" />\n\t\n\t            <CheckBox\n\t                android:id=\"@+id/checkBoxUPCA\"\n\t                android:layout_width=\"wrap_content\"\n\t                android:layout_height=\"wrap_content\"\n\t                android:layout_margin=\"3dip\"\n\t                android:layout_toRightOf=\"@+id/checkBoxCode128\"\n\t                android:checked=\"true\"\n\t                android:text=\"UPCA\"\n\t                android:textSize=\"14sp\" />\n\t\n\t            <CheckBox\n\t                android:id=\"@+id/checkBoxCode11\"\n\t                android:layout_width=\"wrap_content\"\n\t                android:layout_height=\"wrap_content\"\n\t                android:layout_alignParentLeft=\"true\"\n\t                android:layout_below=\"@+id/checkBoxCode39\"\n\t                android:layout_margin=\"3dip\"\n\t                android:checked=\"true\"\n\t                android:text=\"Code 11\"\n\t                android:textSize=\"14sp\" />\n\t\n\t            <CheckBox\n\t                android:id=\"@+id/checkBoxEan8\"\n\t                android:layout_width=\"wrap_content\"\n\t                android:layout_height=\"wrap_content\"\n\t                android:layout_below=\"@+id/checkBoxCode128\"\n\t                android:layout_margin=\"3dip\"\n\t                android:layout_toRightOf=\"@+id/checkBoxCode11\"\n\t                android:checked=\"true\"\n\t                android:text=\"EAN 8\"\n\t                android:textSize=\"14sp\" />\n\t\n\t            <CheckBox\n\t                android:id=\"@+id/checkBoxEan13\"\n\t                android:layout_width=\"wrap_content\"\n\t                android:layout_height=\"wrap_content\"\n\t                android:layout_below=\"@+id/checkBoxUPCA\"\n\t                android:layout_marginLeft=\"25dip\"\n\t                android:layout_marginTop=\"3dip\"\n\t                android:layout_toRightOf=\"@+id/checkBoxEan8\"\n\t                android:checked=\"true\"\n\t                android:text=\"EAN 13\"\n\t                android:textSize=\"14sp\" />\n\t       </RelativeLayout>\n\t\n\t       <TextView\n\t            android:id=\"@+id/reader_selection\"\n\t            android:layout_width=\"match_parent\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_below=\"@+id/decoder_layout\"\n\t            android:layout_margin=\"5dip\"\n\t            android:text=\"Select Reader Params:\"\n\t            android:textSize=\"16sp\"\n\t            android:textStyle=\"bold\" />\n\t\n\t       <CheckBox\n\t            android:id=\"@+id/illumination\"\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_alignParentLeft=\"true\"\n\t            android:layout_below=\"@+id/reader_selection\"\n\t            android:layout_margin=\"3dip\"\n\t            android:checked=\"false\"\n\t            android:text=\"Illumination Mode\"\n\t            android:textSize=\"14sp\" />\n\t\n\t       <TextView\n\t            android:id=\"@+id/scan_selection\"\n\t            android:layout_width=\"match_parent\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_below=\"@+id/illumination\"\n\t            android:layout_margin=\"5dip\"\n\t            android:text=\"Select Scan Params:\"\n\t            android:textSize=\"16sp\"\n\t            android:textStyle=\"bold\" />\n\t\n\t       <RelativeLayout\n\t            android:id=\"@+id/scan_layout\"\n\t            android:layout_width=\"match_parent\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_below=\"@+id/scan_selection\"\n\t            android:layout_margin=\"5dip\" >\n\t\n\t           <CheckBox\n\t                android:id=\"@+id/vibration\"\n\t                android:layout_width=\"wrap_content\"\n\t                android:layout_height=\"wrap_content\"\n\t                android:layout_alignParentLeft=\"true\"\n\t                android:layout_margin=\"3dip\"\n\t                android:checked=\"false\"\n\t                android:text=\"Vibration\"\n\t                android:textSize=\"14sp\" />\n\t\n\t           <TextView\n\t                android:id=\"@+id/scan_tone\"\n\t                android:layout_width=\"match_parent\"\n\t                android:layout_height=\"wrap_content\"\n\t                android:layout_below=\"@+id/vibration\"\n\t                android:layout_margin=\"5dip\"\n\t                android:text=\"Select Scan Tone:\"\n\t                android:textSize=\"14sp\" />\n\t\n\t           <Spinner\n\t                android:id=\"@+id/scan_tone_spinner\"\n\t                android:layout_width=\"match_parent\"\n\t                android:layout_height=\"wrap_content\"\n\t                android:layout_below=\"@+id/scan_tone\"\n\t                android:layout_margin=\"5dip\" />\n\t        </RelativeLayout>\n\t\n\t        <EditText\n\t            android:id=\"@+id/editText1\"\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_below=\"@+id/scan_layout\"\n\t            android:layout_centerHorizontal=\"true\"\n\t            android:ems=\"10\"\n\t            android:fadeScrollbars=\"true\"\n\t            android:focusableInTouchMode=\"false\"\n\t            android:inputType=\"none|textMultiLine\" />\n\t\n\t        <TextView\n\t            android:id=\"@+id/textViewStatusTitle\"\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_below=\"@+id/editText1\"\n\t            android:layout_centerHorizontal=\"true\"\n\t            android:text=\"Status:\" />\n\t\n\t        <TextView\n\t            android:id=\"@+id/textViewStatus\"\n\t            android:layout_width=\"wrap_content\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:layout_below=\"@+id/textViewStatusTitle\"\n\t            android:layout_centerHorizontal=\"true\"\n\t            android:text=\"\" />\n\t      </RelativeLayout>\n\t\n\t\t</ScrollView>\n\n    > Note: Press CTRL+SHFT+F or CMD+SHFT+F for indentation.\n\n    The code till here looks like:\n\n    ![img](images/AdvancedScanningTutorialImages/ui_layout.jpg)      \n \n3. In the `onCreate` method, we take reference of UI elements that are declared in `res/layout/activity_main.xml` in order to use them in our [Activity](http://developer.android.com/reference/android/app/Activity.html). We would then set `OnCheckedChangeListener` for all the checkboxes that we have declared in UI.\n\n    We will also set the Spinner Adapter to hold the list of Scanner devices and Scan Tones followed by the listener calls for both spinners.    \n\n    We then call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        // Reference to UI elements\n\t\tstatusTextView = (TextView) findViewById(R.id.textViewStatus);\n\t\tdataView = (EditText) findViewById(R.id.editText1);\n\t\tcheckBoxCode11 = (CheckBox) findViewById(R.id.checkBoxCode11);\n\t\tcheckBoxCode39 = (CheckBox) findViewById(R.id.checkBoxCode39);\n\t\tcheckBoxCode128 = (CheckBox) findViewById(R.id.checkBoxCode128);\n\t\tcheckBoxCodeUPCA = (CheckBox) findViewById(R.id.checkBoxUPCA);\n\t\tcheckBoxEAN8 = (CheckBox) findViewById(R.id.checkBoxEan8);\n\t\tcheckBoxEAN13 = (CheckBox) findViewById(R.id.checkBoxEan13);\n\n\t\tcheckBoxIlluminationMode = (CheckBox) findViewById(R.id.illumination);\n\t\tcheckBoxVibrationMode = (CheckBox) findViewById(R.id.vibration);\n\n\t\tcheckBoxCode11.setOnCheckedChangeListener(this);\n\t\tcheckBoxCode39.setOnCheckedChangeListener(this);\n\t\tcheckBoxCode128.setOnCheckedChangeListener(this);\n\t\tcheckBoxCodeUPCA.setOnCheckedChangeListener(this);\n\t\tcheckBoxEAN8.setOnCheckedChangeListener(this);\n\t\tcheckBoxEAN13.setOnCheckedChangeListener(this);\n\t\tcheckBoxIlluminationMode.setOnCheckedChangeListener(this);\n\t\tcheckBoxVibrationMode.setOnCheckedChangeListener(this);\n\n\t\tdeviceSelectionSpinner = (Spinner) findViewById(R.id.device_selection_spinner);\n\t\tscanToneSpinner = (Spinner) findViewById(R.id.scan_tone_spinner);\n\n\t\t// Adapter to hold the list of scan tone options\n\t\tspinnerDataAdapter = new ArrayAdapter<String>(this,\n\t\t\t\tandroid.R.layout.simple_spinner_item, getResources()\n\t\t\t\t\t\t.getStringArray(R.array.scan_tone_array));\n\t\tspinnerDataAdapter\n\t\t\t\t.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\t\t// Set adapter to scan tone drop down\n\t\tscanToneSpinner.setAdapter(spinnerDataAdapter);\n\n\t\t// On Item Click Listener of Scanner Devices Spinner\n\t\taddSpinnerScannerDevicesListener();\n\n\t\t// On Item Click Listener of Scan Tone Spinner\n\t\taddSpinnerScanToneListener();\n\n\t\t// The EMDKManager object will be created and returned in the callback.\n\t\tEMDKResults results = EMDKManager.getEMDKManager(\n\t\t\t\tgetApplicationContext(), this);\n\t\t// Check the return status of getEMDKManager and update the status Text\n\t\t// View accordingly\n\t\tif (results.statusCode != EMDKResults.STATUS_CODE.SUCCESS) {\n\t\t\tstatusTextView.setText(\"EMDKManager Request Failed\");\n\t\t}\n\n    So the complete `onCreate` method looks like:\n     \n     ![img](images/AdvancedScanningTutorialImages/on_create_added.jpg)\n\n4. You will see some errors, which we need to get rid of. So first, we need to provide `scan_tone_array` to the spinner data adapter. So create `arrays.xml` file under `res/values` folder and write following code of array in `<resources>` tag. This will remove the adapter error.\n\n        :::xml\n\t\t<!-- Array of type of streaming on which the scan beep should be played -->\n        <string-array name=\"scan_tone_array\">\n          <item>NONE (Silent Mode)</item>\n          <item>Adara.ogg</item>\n          <item>Antimony.ogg</item>\n          <item>Xenon.ogg</item>\n          <item>Vega.ogg</item>\n          <item>decode-short.wav</item>\n          <item>decode.wav</item>\n        </string-array>\n\n    So the complete `arrays.xml` code looks like:\n     \n     ![img](images/AdvancedScanningTutorialImages/arrays_code.jpg)\n\n5. Next, We need to add listeners for `Scanner Devices` and `Scan Tone` spinners. The listener for scanner devices spinner will disable the scanner if there is any using `deInitScanner` method and create new scanner instance of scanner device selected from this spinner with the help of index stored in `scannerIndex` using `initializeScanner` method. It will then call `setProfile` method which will set whatever the parameters are enabled in the User interface for various features.\n\n    > Note: We need to re-initialize the scanner and set the properties as we change the device type.\n\n    The listener for scan tone will simply call `setProfile` method, which will set the parameters selected by user on the User Interface.\n\n    > Note: Here, we don't need to re-initialize scanner as we are not changing scanner device.\n\n\n        :::java\n        // Listener for Scanner Device Spinner\n\t\tprivate void addSpinnerScannerDevicesListener() {\n\t\n\t\t deviceSelectionSpinner\n\t\t\t\t\t.setOnItemSelectedListener(new OnItemSelectedListener() {\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onItemSelected(AdapterView<?> parent,\n\t\t\t\t\t\t\t\tView arg1, int position, long arg3) {\n\t\n\t\t\t\t\tscannerIndex = position;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdeInitScanner();\n\t\t\t\t\t\tinitializeScanner();\n\t\t\t\t\t\tsetProfile();\n\t\t\t\t\t} catch (ScannerException e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onNothingSelected(AdapterView<?> arg0) {\n\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\n\t\t// Listener for Scan Tone Spinner\n\t\tprivate void addSpinnerScanToneListener() {\n\t\n\t\t\tscanToneSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onItemSelected(AdapterView<?> parent, View arg1,\n\t\t\t\t\t\tint position, long arg3) {\n\t\n\t\t\t\t\tsetProfile();\n\t\t\t\t}\n\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onNothingSelected(AdapterView<?> arg0) {\n\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\n    This is how it looks like:\n     \n\t![img](images/AdvancedScanningTutorialImages/device_and_tone_listeners.jpg)\n\n6. It will still show few errors as we have not specified the required methods yet. So first we will add `deInitScanner()` method that cancels any pending read operations, removes all status and data listeners, disables the existing scanner instance and sets the scanner instance to `NULL`.\n\n        :::java\n\t    // Disable the scanner instance\n\t\tprivate void deInitScanner() {\n\t\n\t\t\tif (scanner != null) {\n\t\t\t\ttry {\n\t\t\t\t\tscanner.cancelRead();\n\t\n\t\t\t\t\tscanner.removeDataListener(this);\n\t\t\t\t\tscanner.removeStatusListener(this);\n\t\t\t\t\tscanner.disable();\n\t\n\t\t\t\t} catch (ScannerException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\tstatusTextView.setText(\"Status: \" + e.getMessage());\n\t\t\t\t}\n\t\t\t\tscanner = null;\n\t\t\t}\n\t\t}\n\n    This is how `deInitScanner` method looks like:\n     \n    ![img](images/AdvancedScanningTutorialImages/de_init_method.jpg)\n\n7. Next, we will add `initializeScanner` method that will initialize and enable scanner and its status, data listeners based on device type. In case of any errors, the `statusTextView` will display a failure message to notify user.\n\n\t\t:::java\n\t\t// Method to initialize and enable Scanner and its listeners\n\t\tprivate void initializeScanner() throws ScannerException {\n\t\n\t\t\tif (deviceList.size() != 0) {\n\t\t\t\tscanner = barcodeManager.getDevice(deviceList.get(scannerIndex));\n\t\t\t} else {\n\t\t\t\tstatusTextView\n\t\t\t\t\t\t.setText(\"Status: \"\n\t\t\t\t\t\t\t\t+ \"Failed to get the specified scanner device! Please close and restart the application.\");\n\t\t\t}\n\t\n\t\t\tif (scanner != null) {\n\t\n\t\t\t\t// Add data and status listeners\n\t\t\t\tscanner.addDataListener(this);\n\t\t\t\tscanner.addStatusListener(this);\n\t\n\t\t\t\t// The trigger type is set to HARD by default and HARD is not\n\t\t\t\t// implemented in this release.\n\t\t\t\t// So set to SOFT_ALWAYS\n\t\t\t\tscanner.triggerType = TriggerType.SOFT_ALWAYS;\n\t\n\t\t\t\ttry {\n\t\t\t\t\t// Enable the scanner\n\t\t\t\t\tscanner.enable();\n\t\t\t\t} catch (ScannerException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\tstatusTextView.setText(\"Status: \" + e.getMessage());\n\t\t\t\t}\n\t\n\t\t\t}\n\t\n\t\t}\n\n    >Note: The trigger type is set to `HARD` by default and `HARD` is not implemented in this release. So set to `SOFT_ALWAYS` in the `initializeScanner` method.\n\n    This is how `initializeScanner` method looks like:\n     \n    ![img](images/AdvancedScanningTutorialImages/initialize_scanner_method.jpg)\n\n8. Now, we will add `setProfile` method. This method will create an instance of [ScannerConfig](#api-ScannerConfig), which will allow us to modify scanner properties (Ex. [Decoder Params](#api-ScannerConfig-DecoderParams), [Reader Params](#api-ScannerConfig-ReaderParams), [Scan Params](#api-ScannerConfig-ScanParams) etc.) and set the changes back to the scanner instance. Here, we will read the checkboxes and spinner values and set them accordingly to the scanner instance through [ScannerConfig](#api-ScannerConfig). `config` is name of [ScannerConfig](#api-ScannerConfig) instance.\n\n    `config.decoderParams` allows us to set all the decoder params such as `code11`,`code39` etc. `readerParams.readerSpecific.cameraSpecific.illuminationMode` enables user to set [Illumination Mode](ScannerConfig#ScannerConfig.IlluminationMode), which is available only for CameraSpecific devices. `config.scanParams.decodeHapticFeedback` lets you set [Vibration Mode](ScannerConfig-ScanParams#ScannerConfig-ScanParams.decodeHapticFeedback) of the scanning device. `config.scanParams.decodeAudioFeedbackUri` will accept a URI for the [Audio Tone](ScanParams#ScannerConfig-ScanParams.decodeAudioFeedbackUri) that user needs to set while scanning a barcode.\n\n    > Note: An empty URI (Ex. `config.scanParams.decodeAudioFeedbackUri = \"\";`) indicates that there will not be any scan tone while scanning a barcode. In other words, it would be your silent mode.\n\n\t\t:::java\n\t\t// Sets the user selected Profile\n\t\tpublic void setProfile() {\n\t\t\ttry {\n\t\n\t\t\t\tScannerConfig config = scanner.getConfig();\n\t\n\t\t\t\t// Set code11\n\t\t\t\tif (checkBoxCode11.isChecked()) {\n\t\t\t\t\tconfig.decoderParams.code11.enabled = true;\n\t\t\t\t} else {\n\t\t\t\t\tconfig.decoderParams.code11.enabled = false;\n\t\t\t\t}\n\t\n\t\t\t\t// Set code39\n\t\t\t\tif (checkBoxCode39.isChecked()) {\n\t\t\t\t\tconfig.decoderParams.code39.enabled = true;\n\t\t\t\t} else {\n\t\t\t\t\tconfig.decoderParams.code39.enabled = false;\n\t\t\t\t}\n\t\n\t\t\t\t// Set code128\n\t\t\t\tif (checkBoxCode128.isChecked()) {\n\t\t\t\t\tconfig.decoderParams.code128.enabled = true;\n\t\t\t\t} else {\n\t\t\t\t\tconfig.decoderParams.code128.enabled = false;\n\t\t\t\t}\n\t\n\t\t\t\t// set codeUPCA\n\t\t\t\tif (checkBoxCodeUPCA.isChecked()) {\n\t\t\t\t\tconfig.decoderParams.upca.enabled = true;\n\t\t\t\t} else {\n\t\t\t\t\tconfig.decoderParams.upca.enabled = false;\n\t\t\t\t}\n\t\n\t\t\t\t// set EAN8\n\t\t\t\tif (checkBoxEAN8.isChecked()) {\n\t\t\t\t\tconfig.decoderParams.ean8.enabled = true;\n\t\t\t\t} else {\n\t\t\t\t\tconfig.decoderParams.ean8.enabled = false;\n\t\t\t\t}\n\t\n\t\t\t\t// set EAN13\n\t\t\t\tif (checkBoxEAN13.isChecked()) {\n\t\t\t\t\tconfig.decoderParams.ean13.enabled = true;\n\t\t\t\t} else {\n\t\t\t\t\tconfig.decoderParams.ean13.enabled = false;\n\t\t\t\t}\n\t\n\t\t\t\t// set Illumination Mode, which is available only for\n\t\t\t\t// INTERNAL_CAMERA1 device type\n\t\t\t\tif (checkBoxIlluminationMode.isChecked()\n\t\t\t\t\t\t&& deviceSelectionSpinner.getSelectedItem().toString()\n\t\t\t\t\t\t\t\t.contains(\"Camera\")) {\n\t\t\t\t\tconfig.readerParams.readerSpecific.cameraSpecific.illuminationMode = IlluminationMode.ON;\n\t\t\t\t} else {\n\t\t\t\t\tconfig.readerParams.readerSpecific.cameraSpecific.illuminationMode = IlluminationMode.OFF;\n\t\t\t\t}\n\t\n\t\t\t\t// set Vibration Mode (decodeHapticFeedback)\n\t\t\t\tif (checkBoxVibrationMode.isChecked()) {\n\t\t\t\t\tconfig.scanParams.decodeHapticFeedback = true;\n\t\t\t\t} else {\n\t\t\t\t\tconfig.scanParams.decodeHapticFeedback = false;\n\t\t\t\t}\n\t\n\t\t\t\t// Set the Scan Tone selected from the Scan Tone Spinner\n\t\t\t\tconfig.scanParams.audioStreamType = AudioStreamType.RINGER;\n\t\t\t\tString scanTone = scanToneSpinner.getSelectedItem().toString();\n\t\t\t\tif (scanTone.contains(\"NONE\"))\n\t\t\t\t\t// Silent Mode (No scan tone will be played)\n\t\t\t\t\tconfig.scanParams.decodeAudioFeedbackUri = \"\";\n\t\t\t\telse\n\t\t\t\t\t// Other selected scan tones from the drop-down\n\t\t\t\t\tconfig.scanParams.decodeAudioFeedbackUri = \"system/media/audio/notifications/\"\n\t\t\t\t\t\t\t+ scanTone;\n\t\n\t\t\t\tscanner.setConfig(config);\n\t\n\t\t\t\tToast.makeText(\n\t\t\t\t\t\tMainActivity.this,\n\t\t\t\t\t\t\"Changes Appplied. Press Hard Scan Button to start scanning...\",\n\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\n\t\t\t} catch (Exception e) {\n\t\t\t\tstatusTextView.setText(e.toString());\n\t\t\t}\n\t\t}  \n\n    The `setProfile` method looks like:\n     \n    ![img](images/AdvancedScanningTutorialImages/set_profile_method.jpg)  \n    \n9. Whenever the user checks or unchecks any checkbox, we update the settings to the scanner instance at runtime by calling `setProfile()` method through `onCheckedChanged` method of the `OnCheckedChangeListener` that we implemented earlier. So add the method call in `onCheckedChanged()` method.\n\n\t\t:::java\n\t\tsetProfile();\n\n    This looks like:\n     \n    ![img](images/AdvancedScanningTutorialImages/on_checked_change_method.jpg)\n\n10. Now we need to use the `onOpened` method to get a reference to the [EMDKManager](#api-EMDKManager). The [EMDKListener](#api-EMDKManager-EMDKListener) interface will trigger this event when the EMDK is ready to be used. The [EMDKListener](#api-EMDKManager-EMDKListener) interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the earlier steps. We have used that instance to get an instance of [Barcode Manager](#api-BarcodeManager) to enable scanning.\n\n    Once that is done, we need to get all the scanner devices that a Symbol Android device supports with the default one selected first using `enumerateScannerDevices()` that we will declare in the next step. After that, we initialize that particular scanner using `initializeScanner()` and set the existing profile in the UI to that scanner instance using `setProfile()` that we have already mentioned. So add the following code in `onOpened` method.\n\n\t> Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager` \n\n\t\t:::java\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the Barcode Manager object\n\t\tbarcodeManager = (BarcodeManager) this.emdkManager\n\t\t\t\t.getInstance(FEATURE_TYPE.BARCODE);\n\n\t\ttry {\n\t\t\t// Get the supported scanner devices\n\t\t\tenumerateScannerDevices();\n\t\t\tinitializeScanner();\n\t\t\tsetProfile();\n\t\t} catch (ScannerException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}  \n\n    Your complete `onOpened` method should now look like this:\n    \n    ![img](images/AdvancedScanningTutorialImages/on_opened_method.jpg)\n    \t                        \n11. In this step, we will create `enumerateScannerDevices` that will get all the scanner devices that a Symbol Android device supports with the default one selected first. It uses `getSupportedDevicesInfo` method on `barcodeManager` instance that returns a list of supported scanner devices for that particular Symbol device. We will then iterate through this list, get the friendly names of each scanner device and add them to our list with those names to show user in Device Spinner.\n\n\t\t:::java\n\t\t// Go through and get the available scanner devices\n\t\tprivate void enumerateScannerDevices() {\n\t\n\t\t\tif (barcodeManager != null) {\n\t\n\t\t\t\tList<String> friendlyNameList = new ArrayList<String>();\n\t\t\t\tint spinnerIndex = 0;\n\t\t\t\t// Set the default selection in the spinner\n\t\t\t\tint defaultIndex = 0;\n\t\n\t\t\t\tdeviceList = barcodeManager.getSupportedDevicesInfo();\n\t\n\t\t\t\tif (deviceList.size() != 0) {\n\t\n\t\t\t\t\tIterator<ScannerInfo> it = deviceList.iterator();\n\t\t\t\t\twhile (it.hasNext()) {\n\t\t\t\t\t\tScannerInfo scnInfo = it.next();\n\t\t\t\t\t\tfriendlyNameList.add(scnInfo.getFriendlyName());\n\t\t\t\t\t\tif (scnInfo.isDefaultScanner()) {\n\t\t\t\t\t\t\tdefaultIndex = spinnerIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t++spinnerIndex;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstatusTextView\n\t\t\t\t\t\t\t.setText(\"Status: \"\n\t\t\t\t\t\t\t\t\t+ \"Failed to get the list of supported scanner devices! Please close and restart the application.\");\n\t\t\t\t}\n\t\n\t\t\t\tspinnerDataAdapter = new ArrayAdapter<String>(MainActivity.this,\n\t\t\t\t\t\tandroid.R.layout.simple_spinner_item, friendlyNameList);\n\t\t\t\tspinnerDataAdapter\n\t\t\t\t\t\t.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\t\n\t\t\t\tdeviceSelectionSpinner.setAdapter(spinnerDataAdapter);\n\t\t\t\tdeviceSelectionSpinner.setSelection(defaultIndex);\n\t\n\t\t\t}\n\t\t}\n\n\tYour complete `enumerateScannerDevices` method should now look like this:\n    \n    ![img](images/AdvancedScanningTutorialImages/enumerate_scanner_method.jpg)\n\n\n12. In order to scan, the scanner needs to be enabled and allowed to read when the user presses the hardware scan button of the device. So let us override a callback method `onKeyDown`, call `initializeScanner` method to enable the scanner and then start reading the barcode data.\n\n        :::java\n        // This is a callback method when user presses any hardware button on the\n\t    // device\n\t    @Override\n\t    public boolean onKeyDown(int keyCode, KeyEvent event) {\n\n\t\t  // check for scanner hard key press.\n\t\t  if ((keyCode == KeyEvent.KEYCODE_BUTTON_L1)\n\t\t\t\t|| (keyCode == KeyEvent.KEYCODE_BUTTON_R1)) {\n\n\t\t\t// Skip the key press if the repeat count is not zero.\n\t\t\tif (event.getRepeatCount() != 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (scanner == null) {\n\t\t\t\t\tinitializeScanner();\n\t\t\t\t}\n\n\t\t\t\tif ((scanner != null) && (isScanning == false)) {\n\t\t\t\t\t// Starts an asynchronous Scan. The method will not turn on\n\t\t\t\t\t// the scanner. It will, however, put the scanner in a state\n\t\t\t\t\t// in which the scanner can be turned ON either by pressing\n\t\t\t\t\t// a hardware trigger or can be turned ON automatically.\n\t\t\t\t\tscanner.read();\n\t\t\t\t}\n\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Display if there is any exception while performing operation\n\t\t\t\tstatusTextView.setText(e.getMessage());\n\t\t\t}\n\t\t\treturn true;\n\t\t  }\n\t\t return super.onKeyDown(keyCode, event);\n\t    }\n\n    The `onKeyDown` method looks like:\n     \n     ![img](images/AdvancedScanningTutorialImages/on_key_down.jpg)\n\n7. Just like we make the scanner read barcode data when pressing the hardware scan button, we also need to cancel read operation when user releases hardware scan button of the device. For this, we will override `onKeyUp` method and cancel any pending asynchronous read calls in this method.\n \n        :::java\n        // This is a callback method when user releases any hardware button on the\n\t    // device\n\t    @Override\n\t    public boolean onKeyUp(int keyCode, KeyEvent event) {\n\n\t\t  // check for scanner trigger key press.\n\t\t  if ((keyCode == KeyEvent.KEYCODE_BUTTON_L1)\n\t\t\t\t|| (keyCode == KeyEvent.KEYCODE_BUTTON_R1)) {\n\n\t\t\t// Skip the key press if the repeat count is not zero.\n\t\t\tif (event.getRepeatCount() != 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif ((scanner != null) && (isScanning == true)) {\n\t\t\t\t\t// This Cancels any pending asynchronous read() calls\n\t\t\t\t\tscanner.cancelRead();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tstatusTextView.setText(e.getMessage());\n\t\t\t}\n\t\t\treturn true;\n\t\t  }\n\t\t return super.onKeyUp(keyCode, event);\n\t    }\n\n    The `onKeyUp` method looks like:  \n    ![img](images/AdvancedScanningTutorialImages/on_key_up.jpg)\n\n\n9. As mentioned earlier that whenever a barcode is scanned, its data will be received in a callback `onData` method upon data availability. So we need to get that data, process it in the format we want and populate in the [EditText](http://developer.android.com/reference/android/widget/EditText.html) of UI.\n\n    The received data should be processed on a background thread not to block the UI thread. Hence we will use Android's own [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) to process the scanned data on background thread. So we create AsyncTask `AsyncDataUpdate` that takes [ScanDataCollection](#api-ScanDataCollection), which has the scanned data. It then processes this object in `doInBackground` method to filter the barcode data and label type in strings, which is then passed to the UI thread in `onPostExecute` method of AsyncTask to Populate.\n\n        :::java\n        // Update the scan data on UI\n\t    int dataLength = 0;\n\n\t    // AsyncTask that configures the scanned data on background\n\t    // thread and updated the result on UI thread with scanned data and type of\n\t    // label\n\t    private class AsyncDataUpdate extends\n\t\t\tAsyncTask<ScanDataCollection, Void, String> {\n\n\t\t  @Override\n\t\t  protected String doInBackground(ScanDataCollection... params) {\n\t\t\tScanDataCollection scanDataCollection = params[0];\n\n\t\t\t// Status string that contains both barcode data and type of barcode\n\t\t\t// that is being scanned\n\t\t\tString statusStr = \"\";\n\n\t\t\t// The ScanDataCollection object gives scanning result and the\n\t\t\t// collection of ScanData. So check the data and its status\n\t\t\tif (scanDataCollection != null\n\t\t\t\t\t&& scanDataCollection.getResult() == ScannerResults.SUCCESS) {\n\n\t\t\t\tArrayList<ScanData> scanData = scanDataCollection.getScanData();\n\n\t\t\t\t// Iterate through scanned data and prepare the statusStr\n\t\t\t\tfor (ScanData data : scanData) {\n\t\t\t\t\t// Get the scanned data\n\t\t\t\t\tString barcodeDate = data.getData();\n\t\t\t\t\t// Get the type of label being scanned\n\t\t\t\t\tLabelType labelType = data.getLabelType();\n\t\t\t\t\t// Concatenate barcode data and label type\n\t\t\t\t\tstatusStr = barcodeDate + \" \" + labelType;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return result to populate on UI thread\n\t\t\treturn statusStr;\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onPostExecute(String result) {\n\t\t\t// Update the dataView EditText on UI thread with barcode data and\n\t\t\t// its label type\n\t\t\tif (dataLength++ > 50) {\n\t\t\t\t// Clear the cache after 50 scans\n\t\t\t\tdataView.getText().clear();\n\t\t\t\tdataLength = 0;\n\t\t\t}\n\t\t\tdataView.append(result + \"\\n\");\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onPreExecute() {\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onProgressUpdate(Void... values) {\n\t\t  }\n\t    }\n\n    We call this AsyncTask in overriden `onData` method, by creating an instance of `AsyncDataUpdate` and passing the `scanDataCollection` for further processing.\n\n        :::java\n        // Use the scanned data, process it on background thread using AsyncTask\n\t\t// and update the UI thread with the scanned results\n\t\tnew AsyncDataUpdate().execute(scanDataCollection);\n\n    So the `onData` method and `AsyncDataUpdate` looks like:\n    ![img](images/AdvancedScanningTutorialImages/async_data_update.jpg)\n  \n10. Whether we scan the barcode by pressing the hard scan key or keep it idle, it returns the status of the scanner at specific point of time in the overridden `onStatus` method of implemented `StatusListener` interface. Since we are also displaying the status along with barcode data, we will make use of this method and populate the status.\n\n    Just like scanned data, we are also processing the scanner status on a background thread. Hence we will create another [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) named `AsyncStatusUpdate` that takes [StatusData](#api-StatusData) and processes it in `doInBackground` method to retrieve state in string format which is populated in status Text View on UI thread in `onPostExecute` method of the AsyncTask.              \n\n        :::java\n        // AsyncTask that configures the current state of scanner on background\n\t    // thread and updates the result on UI thread\n\t    private class AsyncStatusUpdate extends AsyncTask<StatusData, Void, String> {\n\n\t\t  @Override\n\t\t  protected String doInBackground(StatusData... params) {\n\t\t\t// Get the current state of scanner in background\n\t\t\tStatusData statusData = params[0];\n\t\t\tString statusStr = \"\";\n\t\t\tScannerStates state = statusData.getState();\n\t\t\t// Different states of Scanner\n\t\t\tswitch (state) {\n\t\t\t// Scanner is IDLE\n\t\t\tcase IDLE:\n\t\t\t\tstatusStr = \"The scanner enabled and its idle\";\n\t\t\t\tisScanning = false;\n\t\t\t\tbreak;\n\t\t\t// Scanner is SCANNING\n\t\t\tcase SCANNING:\n\t\t\t\tstatusStr = \"Scanning..\";\n\t\t\t\tisScanning = true;\n\t\t\t\tbreak;\n\t\t\t// Scanner is waiting for trigger press\n\t\t\tcase WAITING:\n\t\t\t\tstatusStr = \"Waiting for trigger press..\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Return result to populate on UI thread\n\t\t\treturn statusStr;\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onPostExecute(String result) {\n\t\t\t// Update the status text view on UI thread with current scanner\n\t\t\t// state\n\t\t\tstatusTextView.setText(result);\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onPreExecute() {\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onProgressUpdate(Void... values) {\n\t\t  }\n\t    }\n\n    We call this AsyncTask in overriden `onStatus` method, by creating an instance of `AsyncStatusUpdate` and passing the `StatusData` for further processing.\n\n        :::java\n        // process the scan status event on the background thread using\n\t\t// AsyncTask and update the UI thread with current scanner state\n\t\tnew AsyncStatusUpdate().execute(statusData);\n\n    So the `onStatus` method and `AsyncStatusUpdate` looks like:\n    ![img](images/AdvancedScanningTutorialImages/async_status_update.jpg)\n\n11. Now let's override the `onDestroy` method so we can release the EMDKManager and BarcodeManager resources:  \n\n        :::java\n\t    @Override\n\t\tprotected void onDestroy() {\n\t\t\tsuper.onDestroy();\n\t\n\t\t\tif (barcodeManager != null)\n\t\t\t\tbarcodeManager = null;\n\t\n\t\t\tif (emdkManager != null) {\n\t\n\t\t\t\t// Clean up the objects created by EMDK manager\n\t\t\t\temdkManager.release();\n\t\t\t\temdkManager = null;\n\t\t\t}\n\t\t} \n\n    Your `onDestroy` method should now look like this:  \n\n    ![img](images/AdvancedScanningTutorialImages/on_destroy_method.jpg)\n\n12. When we are done with scanning, we must release the scanner hardware resources for other applications to use. So override `onStop` method and disable the scanner by calling `deInitScanner` method to release it.\n\n        :::java\n\t    @Override\n\t\tprotected void onStop() {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tsuper.onStop();\n\t\t\tdeInitScanner();\n\t\t}\n\n    Your `onStop` method should now look like this:  \n\n    ![img](images/AdvancedScanningTutorialImages/on_stop_method.jpg) \n\n13. Finally, Clean up the objects created by EMDK manager in `onClosed` method, if EMDK closed abruptly.\n\n        :::java\n        // The EMDK closed abruptly. // Clean up the objects created by EMDK\n\t\t// manager\n\t\tif (this.emdkManager != null) {\n\n\t\t\tthis.emdkManager.release();\n\t\t\tthis.emdkManager = null;\n\t\t}\n\n    Your `onClosed` method should now look like this:  \n\n    ![img](images/AdvancedScanningTutorialImages/on_closed_method.jpg)\n\t\nThat's it!!! We are done with all the coding part that will let us perform some advanced barcode scanning operations on our Symbol Android device using [Barcode/Scanning APIs](#guide-reference-EMDKList) introduced in EMDK V 3.0. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n \n2. Run the application.\n\n    ![img](images/AdvancedScanningTutorialImages/home_screen.png)\n\n    You can see a [Toast](http://developer.android.com/guide/topics/ui/notifiers/toasts.html), which indicates that the Scanner has been enabled and you can start scanning by pressing hard scan button of the device.\n  \n3. Now if you press the hard scan button, the status listener in the code starts working and current status of Scanner is displayed in Status [TextView](http://developer.android.com/reference/android/widget/TextView.html), which is `Scanning`. The \"Scanner Device Type\" Spinner shows Serial SSI Scanner as it is the default scanner for Symbol TC55 device. All the decoders are checked, which means current configuration scan supports all of these decoder types. But Scan Tone is `NONE`, which means there won't be any tone/sound while scanning a barcode.   \n\n    ![img](images/AdvancedScanningTutorialImages/status_scanning.png)\n\n    The scanner status is always updated on the status text view below the Edit Text at the bottom.\n\n4. Lets us change some configurations starting with the device type. We will change it to Camera Scanner.\n\n\t![img](images/AdvancedScanningTutorialImages/device_list.png)\n\n\t![img](images/AdvancedScanningTutorialImages/camera_scanner.png)\n\nIt will display a success toast when the changes are applied each time you change any scanner configuration just for your knowledge.\n\n5. Next check the Vibration checkbox and select some scan tone from the Select Scan Tone spinner.\n\n\t![img](images/AdvancedScanningTutorialImages/tone_list.png)\n\n\t![img](images/AdvancedScanningTutorialImages/tone_selected.png)\n\n4. Now once again scan a barcode and this time it will open your device's camera to scan the barcode.\n\n    ![img](images/AdvancedScanningTutorialImages/camera_opened.png)\n\n\t![img](images/AdvancedScanningTutorialImages/final_scan.png)  \n\n    This is how [Barcode/Scanning APIs](#guide-reference-EMDKList) introduced in EMDK V 3.0 can be used to perform some of the Advanced Scanning operations on your Symbol devices without using Profile Wizard. \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's `AndroidManifest.xml`:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/AdvancedScanningTutorial.zip)."},{"key":"guide-tutorial-tutApplyProfileSilently","name":" Apply Mx Profile Silently in a Non-Blocking way:","md":"# Apply Mx Profile Silently in a Non-Blocking way:\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. In this tutorial we would discuss on how to apply Mx configurations to the device silently without displaying any User Interface in a non blocking way.\n\n\n**Problem:**\n\nThe Mx features are used to perform device configurations through EMDK profiles as well as programmatically. When we are configuring any Mx feature through EMDK Profile wizard we may not require User Interface. Moreover, the operation of applying EMDK profile configuration to device takes place on the UI main thread. Depending on the Mx feature and complexity, it takes few seconds to apply configurations to the Symbol device. So the application's UI thread is blocked for these few seconds and user cannot interact with application's UI within that time period. Even if the user tries to interact with application's UI, the application does not respond showing \"Application Not Responding\" (ANR) message asking user to wait.\n\n**Reason:**\n\nApplying EMDK configurations is a heavy process to be performed on the main thread. The main thread has to manage UI components primarily. Hence if two heavy functionalities happen on a single main thread, it will delay response to the user actions, which may irritate user and hence stop your process, displaying \"ANR\".\n\n**Solution:**\nIn Android, it is recommended to run only UI components on the main thread. Any other operation should always be run on a different background thread without blocking the UI main thread and completing the operation smoothly without any interruptions such as ANR. \n\nYou can run the Mx configuration on background thread in a Non-Blocking way using any one of the following methods: \n\n**1. Using Android Handler:**\n\n* A [Handler](http://developer.android.com/reference/android/os/Handler.html) allows you to send and process [Message](http://developer.android.com/reference/android/os/Message.html) and Runnable objects associated with a thread's [MessageQueue](http://developer.android.com/reference/android/os/MessageQueue.html). Each Handler instance is associated with a single thread and that thread's message queue.\n* There are two main uses for a Handler: (1) to schedule messages and runnables to be executed as some point in the future; and (2) to enqueue an action to be performed on a different thread than your own.\n* If you are doing multiple repeated tasks, for example downloading multiple images which are to be displayed in ImageViews (like downloading thumbnails) upon download, use a task queue with Handler.\n* When a process is created for your application, its main thread is dedicated to running a message queue that takes care of managing the top-level application objects (activities, broadcast receivers, etc) and any windows they create.\n* You can create your own threads, and communicate back with the main application thread through a Handler.\n\n**2. Using Android AsyncTask:**\n\n* [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) enables proper and easy use of the UI thread. This class allows to perform background operations and publish results on the UI thread without having to manipulate threads and/or handlers.\n* AsyncTask is designed to be a helper class around [Thread](http://developer.android.com/reference/java/lang/Thread.html) and [Handler](http://developer.android.com/reference/android/os/Handler.html) and does not constitute a generic threading framework.\n* AsyncTasks should ideally be used for short operations (a few seconds at the most.) If you need to keep threads running for long periods of time, it is highly recommended you use the various APIs provided by the `java.util.concurrent` pacakge such as [Executor](http://developer.android.com/reference/java/util/concurrent/Executor.html), [ThreadPoolExecutor](http://developer.android.com/reference/java/util/concurrent/ThreadPoolExecutor.html) and [FutureTask](http://developer.android.com/reference/java/util/concurrent/FutureTask.html).\n\n\nSince configuration of any Mx feature requires only a few seconds, we can go with any of the two solutions. In this tutorial, we will configure Mx Profile using both Handler and AsyncTask by creating dedicated Activity for each.   \n\nSo far we know how to configure Profile in a Non-Blocking way. Sometimes we don't need User Interface while configuring an Mx profile. Hence, We used the word \"Silently\" to indicate that there won't be any User Interface in this tutorial. Although, we need UI thread to trigger Mx configuration on the background thread. So we will launch the application and quickly close it after triggering Mx configuration on the background thread.\n\nEven if you have User Interface in your application, you can interact with it as UI will not be blocked, because the profile will be applied on a background thread.\n\n> Note: We are closing the application immediately because we are not notifying user with any UI as well as the configuration is an independent process that we are just triggering from our application and does not require UI. \n\nSo let us create a tutorial and Configure the Mx App Manager Profile to install an application silently in a Non-Blocking way.      \n   \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 2.1 and above\n* Download APK file for the application to install from [here](https://s3.amazonaws.com/emdk/Tutorials/AllInstalledApps.apk)\n* Once downloaded, copy the APK file to SD Card of the device. \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/ApplyProfileSilentlyTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  We are using two different Activities to demonstrate the use Handler and AsyncTask to apply Mx profile on a background thread. We will first create Activity that uses Handler. So provide \"Activity Name\" as \"HandlerActivity\".  \n\n    ![img](images/ApplyProfileSilentlyTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/ApplyProfileSilentlyTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/ApplyProfileSilentlyTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/ApplyProfileSilentlyTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/ApplyProfileSilentlyTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/ApplyProfileSilentlyTutorialImages/java_compiler_settings.jpg) \n\n## Adding The App Manager Profile Feature\n1. Select \"ApplyProfileSilentlyTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: AppManagerProfile).\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. USB Manager, Settings Manager, App Manager etc.) for configuring your Symbol device based on requirements. \n  \n6. So you can see all the MX features on the left hand side of the Profile Editor window. We want to install the downloaded APK file that is residing in the device's SD Card using App Manager. So select the \"App Manager\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/app_manager_feature.jpg)\n\n    Provide some Name in the \"Name\" field to modify this feature programmatically (Ex. MyAppManager).\n\n    > Note: You can also keep the \"Name\" field empty.\n\n    Since we want to install an application, keep the Action in drop-down as \"Install\". \n    Provide the path and name of the Android application APK file within the device file system (Ex. /storage/sdcard1/AllInstalledApps.apk).  \n\n    ![img](images/ApplyProfileSilentlyTutorialImages/app_manager_details.jpg)   \n \n7. Click Apply to apply the settings we provided    \n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/app_manager_profile_created.jpg)\n\n8. Click Finish and your App Manager profile for installing an application is created.\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/app_profile_created.jpg) \n  \n9. Click \"Close\".\n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/ApplyProfileSilentlyTutorialImages/emdk_config_file.jpg)\n  \n10. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/ApplyProfileSilentlyTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code\n\n###Using Handler:    \n1. Now we will start to add some code in the \"HandlerActivity\" that we created to apply the App Manager profile to the device on a background thread in a Non-Blocking way using Handler. We will see how to apply this profile silently without UI later in this tutorial.  \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;     \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"AppManagerProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n    Since we don't want any UI in this application, remove the line `setContentView(R.layout.activity_handler);` from the `onCreate` method.  \n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/ApplyProfileSilentlyTutorialImages/on_create_added.jpg) \n          \n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of `profileManager` and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);\n\n    Create a Runnable instance in `onOpened` method, which will perform App Manager's install configuration on background thread. \n\n        :::java\n        final Message msg = mHandler.obtainMessage();\n\n\t\t// Create Runnable instance to Apply Mx Profile on background thread\n\t\tThread background = new Thread(new Runnable() {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tmsg.obj = applyProfile(profileName);\n\t\t\t\tif (msg.obj != null)\n\t\t\t\t\t// Send the result in message from background to UI\n\t\t\t\t\t// thread for processing.\n\t\t\t\t\tmHandler.sendMessage(msg);\n\n\t\t\t}\n\t\t});\n\t\t// Start the background Thread\n\t\tbackground.start(); \n\n    Ignore the errors for the time being. You can see, the background thread calls `applyProfile` method that applies the Mx App Manager profile configuration to the device on background thread we created. The parameter `msg.obj` contains result of the background thread operation that we need to pass on UI thread. Hence we will create a Handler in next step and pass the result parameter in Handler in a Message using `msg.obj`.\n\n    Since we don't want any UI for this application, we will call the `finish()` method after sending message to Handler. This will immediately close the application as soon as `applyProfile` method is triggered on the background thread through Runnable.\n\n        :::java\n        // Closes the Activity which in turn closes the Application as the\n\t\t// application has only one Activity.\n\t\tfinish();\n\n    Your complete onOpened method should now look like this:\n    \n    ![img](images/ApplyProfileSilentlyTutorialImages/on_opened_method.jpg)\n \n\n3. Create a Handler and retrieve the Result parameter from the Message by type casting `msg.obj` to `String` in `handleMessage` method of Handler.\n\n        :::java\n        // Handler that receives messages from background thread to populate on UI\n\t    // thread.\n\t    private Handler mHandler = new Handler() {\n\t\t  public void handleMessage(Message msg) {\n\t\t\t// Retrieve the result string from message using ((String) msg.obj)\n\t\t\t// and Populate it on UI.\n\t\t\t// Since we don't have UI in this tutorial, we will not use this\n\t\t\t// result string\n\t\t  };\n\t    };\n\n    As you can see the `handleMessage` contains the Message parameter we passed from background thread. The `handleMessage` method can retrieve the `String` result parameter from Message by typecasting `msg.obj` to `String` using `((String) msg.obj)`. Now the user can display this result parameter on the main thread.\n\n    The Handler created looks like::\n    \n    ![img](images/ApplyProfileSilentlyTutorialImages/handler_created.jpg)  \n\n    > Note: We will not be using this result parameter as we don't have UI in this tutorial. But it could be helpful to display result for the applications that have UI.\n    \n4. Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier. This is done using the `processProfile` method. We will now create a method that will use `processProfile` to apply the App Manager profile that we created using EMDK Wizard (Ex. \"applyProfile\").\n\n        :::java\n        private String applyProfile(String profileName) {\n\t\ttry {\n\t\t\t// Call process profile to modify the profile of specified profile\n\t\t\t// name\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, (String[]) null);\n\n\t\t\t// Check the return status of processProfile\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\t\t\t\treturn \"Applying '\" + profileName + \"' was successful.\";\n\n\t\t\t} else {\n\t\t\t\treturn \"Applying '\" + profileName + \"' failed.\";\n\t\t\t}\n\n\t\t  } catch (Exception ex) {\n\n\t\t\treturn ex.getMessage();\n\t\t  }\n\t    }\n\n    Your `applyProfile` method should look like:\n    \n    ![img](images/ApplyProfileSilentlyTutorialImages/apply_profile.jpg)\n\n5. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override\n\t    protected void onDestroy() {\n\t\t // TODO Auto-generated method stub\n\t\t super.onDestroy();\n\t\t\n\t\t //Clean up the objects created by EMDK manager\n\t\t emdkManager.release();\n\t    } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/ApplyProfileSilentlyTutorialImages/on_destroy_method.jpg)\n\n6. Assign Null to EMDK objects in the \"onClosed\" method.\n\n        :::java\n        @Override\n\t    public void onClosed() {\n\t\t // TODO Auto-generated method stub\n\n\t\t // Assign null to the objects\n\t\t emdkManager = null;\n\t\t profileManager = null;\n\t    }\n\n7. So far we have done with the coding that will use Runnable and Handler to apply App Manager's install configuration on background thread. It will also close the application immediately using `finish()` method once background thread starts its execution to apply configurations silently. But the app will still be visible to the user for that small period of time (few milliseconds) before it is closed. We want to avoid UI as it may not require for many Mx configurations. So We will make the UI invisible (basically transparent) for those few milliseconds by applying [Android Styles](http://developer.android.com/guide/topics/ui/themes.html) to the `HandlerActivity`. \n\n    Before applying, we need to create a custom style that will make the UI transparent. So go to res -> values -> styles.xml of \"ApplyProfileSilentlyTutorial\" tutorial and write following Android style in `<resources>` tag that will make background transparent.\n\n        :::xml\n        <style name=\"Transparent\" parent=\"@android:style/Theme\">\n    \t  <item name=\"android:windowBackground\">@android:color/transparent</item>\n    \t  <item name=\"android:windowIsTranslucent\">true</item>\n    \t  <item name=\"android:windowIsFloating\">true</item>\n    \t  <item name=\"android:windowNoTitle\">true</item>\n    \t  <item name=\"android:windowContentOverlay\">@null</item>\n    \t  <item name=\"android:backgroundDimEnabled\">false</item>\n\t\t</style>\n\n    So the code for applying styles in res->values->styles.xml looks like:\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/styles.jpg)\n\n8. We will now include this style in HandlerActivity to make it transparent. So go to `AndroidManifest.xml` and add the following code in the `<activity>` tag for \"HandlerActivity\".\n\n        :::xml\n        android:theme=\"@style/Transparent\"\n\n    This will apply the styles to \"HandlerActivity\" and make it transparent for those few milliseconds when this Activity is displayed to the user, which will resolve the purpose of calling it Applying Profile **Silently**.\n\n    So the Manifest file looks like: looks like:\n    ![img](images/ApplyProfileSilentlyTutorialImages/handler_styles.jpg)\n \n9. This completes coding and configuration part that will allow us to apply App Manager's install configuration silently in a Non-Blocking way using Handler. If you want, you can run the Application now to test but we are now going to see how the same thing is done using our second option **AsyncTask**.  \n\n###Using AsyncTask:\n\n1. We will create another activity (Ex. AsyncTaskActivity) apply App Manager's install configuration silently in a Non-Blocking way using [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html).\n\n2. Select \"ApplyProfileSilentlyTutorial\" project.\n\n3. Select \"File\" -> \"New\" -> \"Other\" or right click on the project and select \"New\" -> \"Other\".\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/other1.jpg)\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/other2.jpg)\n\n4. Select \"Android\" -> \"Android Activity\"\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/async_activity.jpg)\n\n5. Click \"Next\" and select \"Empty Activity\"\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/async_empty_activity.jpg)\n\n6. Provide Activity Name as \"AsyncTaskActivity\".\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/async_task_activity.jpg)\n\n7. Click \"Finish\" and the activity will be created for you.\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/async_task_activity_created.jpg)\n\n8. Now we will start to add some code in the \"AsyncTaskActivity\" that we created to apply App Manager profile to the device on a background thread in a Non-Blocking way using AsyncTask. \n\n    Applying the profile silently without UI is same as we did for HandlerActivity.\n\n    > Note: We will use the same earlier transparent styles in \"AsyncTaskActivity\" to make the Activity transparent, which will resolve the purpose of calling it Applying Profile **Silently**.\n\n9. Follow the step 1 of Adding Some Code using Handlers.\n\n    Add two more global variables.\n\n        :::java\n        // Contains XML while setting a profile programmatically. It can be Null.\n        private String[] modifyData;\n\n        // Contains the status of processProfile operation.    \t    \n        private EMDKResults results;\n\n    The code should now look like:\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/async_oncreate_added.jpg)\n\n10. We will now create an inner class named \"ConfigureProfile\" in \"AsyncTaskActivity\" that will extend `AsyncTask`. [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) will run the operation on a background thread without blocking UI thread. It can also return the processing result on UI thread if you want.\n\n        :::java\n        // Class extending AsyncTask that runs operations in a background thread\n\t    // without blocking UI thread. It returns result on UI thread once the\n\t    // operation is completed.\n\t    private class ConfigureProfile extends AsyncTask<String, Integer, String> {\n\t\t  // Operation to be performed on background thread\n\t\t  @Override\n\t\t  protected String doInBackground(String... params) {\n\t\t\tmodifyData = new String[1];\n\t\t\t// Call processPrfoile with profile name and SET flag to create the\n\t\t\t// profile. The modifyData can be null.\n\t\t\tresults = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\t\t\treturn null;\n\t\t  }\n\n\t\t  // Return result to the UI Thread\n\t\t  @Override\n\t\t  protected void onPostExecute(String result) {\n\t\t\t// Display Success or Failure Message based on result\n\t\t\t// Check the return status of processProfile\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\t\t\t\t// Success\n\n\t\t\t} else {\n\n\t\t\t\t// Failure\n\t\t\t}\n\n\t\t  }\n\n\t\t  // Method to implement actions before the AsynTask executes.\n\t\t  @Override\n\t\t  protected void onPreExecute() {\n\n\t\t  }\n\n\t\t  // Method to display updates of operation\n\t\t  @Override\n\t\t  protected void onProgressUpdate(Integer... progress) {\n\t\t\t\n\t\t  }\n\t    }\n\n    The `doInBackground` method applies the App Manager's install configurations on background thread using `processProfile` method.\n\n    The `onPostExecute` is used to return the result back to the UI thread when the operation on background thread is done.  \n\n    > Note: We won't return any result on UI thread as we want to apply profile silently in this tutorial.\n\n    The code for AsyncTask should look like:\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/async_task_class.jpg)\n\n11. Once the EMDK is ready, we will get the `ProfileManager` object to process the profile in `onOpened` method.\n    \n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`\n\n        :::java\n        this.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);\n\n     After that we will execute the AsyncTask that by creating instance of it and calling execute method. This will start the process of applying profile on background thread.\n\n    Since we don't want any UI for this application, we will call the `finish()` method immediately to close the application, once the AsyncTask starts executing on background thread. \n\n        :::java\n        if (profileManager != null) {\n\t\t\t// Start EMDK process profile operation on the background thread.\n\t\t\tnew ConfigureProfile().execute(\"\");\n            finish();\n\n\t\t}\n\n    So the complete `onOpened` method looks like:\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/async_on_opened_method.jpg)\n\n12. We will now write `onDestroy` and `onClosed` methods by adding the same code that we added in the Handler Activity.\n\n    So `onDestroy` and `onClosed` methods look like:\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/on_closed_destroyed_async.jpg)\n\n13. But the app will still be visible to the user for small period of time (few milliseconds) before it is closed similar to the case of Handler. We want to avoid UI as it may not require for many Mx configurations. So We will make the UI invisible (basically transparent) for those few milliseconds by applying [Android Styles](http://developer.android.com/guide/topics/ui/themes.html) to the `AsyncTaskActivity`.\n\n    We have already created a transparent style earlier in this tutorial while applying profile using Handler. We will now  simply include that style in \"AsyncTaskActivity\" to make it transparent. So go to `AndroidManifest.xml` and add the following code in the `<activity>` tag for \"AsyncTaskActivity\".\n\n        :::xml\n        android:theme=\"@style/Transparent\"\n\n    This will apply the styles to \"AsyncTaskActivity\" and make it transparent for those few milliseconds when this Activity is displayed to the user, which will resolve the purpose of calling it Applying Profile **Silently**.\n\n    So the Manifest file looks like: looks like:\n    ![img](images/ApplyProfileSilentlyTutorialImages/async_styles.jpg)\n\n14. This completes coding and configuration part that will allow us to apply App Manager's install configuration silently in a Non-Blocking way using AsyncTask.\n\n15. So far, We have created two different activities that perform the same operation of applying App Manager's install configuration silently in a Non-Blocking way, but using two different ways viz. Handler and AsyncTask respectively.\n\n    Now, Let us run the application. \n                   \n## Running the Application\n\n1. Connect the Symbol device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n    Before running the application, change the lable name to application name for \"AsyncTaskActivity\" in the `<activity>` tag of AndroidManifest.xml\" file by using following code.\n\n        :::xml\n        android:label=\"@string/app_name\"\n\n    So the Manifest file should now look like:\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/change_lable_name.jpg)\n\n    > Note: It is not necessary to change the lable name. But if we dont change, it will display the \"AsyncTaskActivity\" name instead of application name in the device's applications grid, when we run the application using AsyncTask.\n   \n    Now when we run the application, it will launch \"HandlerActivity\" becasue currently that is the Launcher Activity in \"AndroidManifest.xml\" file. \n\n    ![img](images/ApplyProfileSilentlyTutorialImages/handler_manifest_launcher.jpg) \n\n    > Note: Make sure that \"AllInstalledApps\" is not installed on the device before running the app, else the install fetaure will give error.  \n\n2. Run the application (Uses Handler).\n\n    You will not see any User Interface. The application applied the App Manager's install configuration on background thread silently using Handler and installed the \"AllInstalledApps\" application whose APK we had provided in the wizard.\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/handler_success.png)\n  \n3. Now we will run the application using AsyncTask. We need to set \"AsyncTaskActivity\" as the Launcher Activity to start the application with \"AsyncTaskActivity\". So remove the \"Intent-Filter\" code from \"HandlerActivity\" and add to the \"AsyncTaskActivity\" in the \"AndroidManifest.xml\" file.\n\n        :::xml\n        <intent-filter>\n           <action android:name=\"android.intent.action.MAIN\" />\n\n           <category android:name=\"android.intent.category.LAUNCHER\" />\n        </intent-filter>\n\n    So the AndroidManifest.xml file now looks like:\n\n    ![img](images/ApplyProfileSilentlyTutorialImages/async_manifest_launcher.jpg)\n\n    Before running the application using \"AsyncTask\", uninstall the \"AllInstalledApps\" application that we installed using Handler just now.\n\n    > Note: Make sure that \"AllInstalledApps\" is not installed on the device before running the app, else the install fetaure will give error. \n\n4. Run the application (Uses AsyncTask).\n\n    You will not see any User Interface. The application applied the App Manager's install configuration on background thread silently using AsyncTask and installed the \"AllInstalledApps\" application whose APK we had provided in the wizard.  \n\n    ![img](images/ApplyProfileSilentlyTutorialImages/handler_success.png)\n\n    > Note: While running the application using both Handler and AsyncTask, you can interact with the User Interface while profile settings are being applied on background thread. It won't hang the User Interface this time.\n\n    So this is how we can use both Handler and AsyncTask to apply profile settings on background thread in a Non-Blocking way with the help of Android styles to execute it silently without UI.\n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/ApplyProfileSilentlyTutorial.zip)."},{"key":"guide-tutorial-tutBasicScanningAPI","name":" Basic Scanning Tutorial using Barcode API","md":"# Basic Scanning Tutorial using Barcode API\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use [Barcode/Scanning APIs](#guide-reference-EMDKList) introduced in EMDK V 3.0, to perform Scanning operations on your Symbol Android devices without using Profile Wizard. The API uses [Barcode Manager](#api-BarcodeManager), which is the primary object to access barcode scanning feature. \n\nIn this tutorial, we will explore the [Barcode/Scanning API](#guide-reference-EMDKList) by using it for developing a basic application that will scan barcodes.\n\n> Note: You don't need the Profile Wizard while using the Barcode/Scanning APIs as everything could be configured programmatically through code.   \n        \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 3.0 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/BasicScanningTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/BasicScanningTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/BasicScanningTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/BasicScanningTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/BasicScanningTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/BasicScanningTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Since we are not using Profile Wizard, the EMDKConfig.xml file will not be created under \"\\assets\" folder.  \n    \n    ![img](images/BasicScanningTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project \"BasicScanningTutorial\".\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/BasicScanningTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/BasicScanningTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/BasicScanningTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/BasicScanningTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/BasicScanningTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/BasicScanningTutorialImages/java_compiler_settings.jpg)   \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK to scan the barcodes.\n  \n    ![img](images/BasicScanningTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':\n\n    You then need to enable other permissions such as camera, vibrate, system_alert_window.  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\" />\n        <uses-permission android:name=\"android.permission.CAMERA\" />\n        <uses-permission android:name=\"android.permission.VIBRATE\" />\n        <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" /> \n\n    Then you must enable the library for EMDK and Scanner:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\" />\n        <uses-library android:name=\"com.motorolasolutions.scanner\" />\n        <uses-library\n            android:name=\"com.motorolasolutions.adc.usbscanner\"\n            android:required=\"false\" />\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/BasicScanningTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.EMDKManager;\n\t\timport com.symbol.emdk.EMDKManager.EMDKListener;\n\t\timport com.symbol.emdk.barcode.ScanDataCollection;\n\t\timport com.symbol.emdk.barcode.Scanner.DataListener;\n\t\timport com.symbol.emdk.barcode.Scanner.StatusListener;\n\t\timport com.symbol.emdk.barcode.StatusData;   \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.\n\n    After that you also need to implement StatusListener for notifying client applications to notify scan events. Override its `onStatus` function.\n\n    Finally implement DataListener for notifying client applications when the scan data is available. Override its `onData` function. \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener, StatusListener, DataListener{  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }\n\n            @Override\n\t        public void onData(ScanDataCollection scanDataCollection) {\n\t\t           // TODO Auto-generated method stub\n\t        }\n\n\t        @Override\n\t        public void onStatus(StatusData statusData) {\n\t\t           // TODO Auto-generated method stub\n\t        }  \n          \n        }      \n\n    We will now create some global variables to hold the instance objects of EMDKManager, BarcodeManager and Scanner. These variables would be used throughout the code.\n\n    We will then add some UI elements starting with a [TextView](http://developer.android.com/reference/android/widget/TextView.html) to display the status of scanning operation and then [EditText](http://developer.android.com/reference/android/widget/EditText.html) to populate scanned barcode data.\n\n    We will also declare a boolean variable to identify the current state of the scanner so that the status Text view can be updated accordingly.  \n    \n        :::java\n        // Declare a variable to store EMDKManager object\n\t\tprivate EMDKManager emdkManager = null;\n\t\n\t\t// Declare a variable to store Barcode Manager object\n\t\tprivate BarcodeManager barcodeManager = null;\n\t\n\t\t// Declare a variable to hold scanner device to scan\n\t\tprivate Scanner scanner = null;\n\t\n\t\t// Text view to display status of EMDK and Barcode Scanning Operations\n\t\tprivate TextView statusTextView = null;\n\t\n\t\t// Edit Text that is used to display scanned barcode data\n\t\tprivate EditText dataView = null;\n\t\n\t\t// Boolean to explain whether the scanning is in progress or not at any\n\t\t// specific point of time\n\t\tboolean isScanning = false;\n\n    The code till here looks like:\n    ![img](images/BasicScanningTutorialImages/variables_added.jpg) \n\n2. Now, let us design the simple UI that has a [TextView](http://developer.android.com/reference/android/widget/TextView.html) to display the status of scanning operation and above that an [EditText](http://developer.android.com/reference/android/widget/EditText.html) to populate scanned barcode data.\n\n    So, remove all the code, inside \"res/layout/activity_main.xml\" and add following XML layout code for UI.\n\n        :::xml\n        <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:padding=\"16dip\"\n        tools:context=\".MainActivity\" >\n\n          <EditText\n          android:id=\"@+id/editText1\"\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:layout_above=\"@+id/textViewStatusTitle\"\n          android:layout_centerHorizontal=\"true\"\n          android:ems=\"10\"\n          android:fadeScrollbars=\"true\"\n          android:inputType=\"none|textMultiLine\" />\n\n          <TextView\n          android:id=\"@+id/textViewStatus\"\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:layout_centerInParent=\"true\"\n          android:text=\"\" />\n\n          <TextView\n          android:id=\"@+id/textViewStatusTitle\"\n          android:layout_width=\"wrap_content\"\n          android:layout_height=\"wrap_content\"\n          android:layout_above=\"@+id/textViewStatus\"\n          android:layout_centerHorizontal=\"true\"\n          android:layout_marginBottom=\"15dp\"\n          android:text=\"Status:\" />\n\n        </RelativeLayout>\n\n    > Note: Press CTRL+SHFT+F or CMD+SHFT+F for indentation.     \n \n3. In the onCreate method, we take reference of UI elements that are declared in \"res/layout/activity_main.xml\" in order to use them in our [Activity](http://developer.android.com/reference/android/app/Activity.html). We then call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        // Reference to UI elements\n\t\tstatusTextView = (TextView) findViewById(R.id.textViewStatus);\n\t\tdataView = (EditText) findViewById(R.id.editText1);\n\n\t\t// The EMDKManager object will be created and returned in the callback.\n\t\tEMDKResults results = EMDKManager.getEMDKManager(\n\t\t\t\tgetApplicationContext(), this);\n\t\t// Check the return status of getEMDKManager and update the status Text\n\t\t// View accordingly\n\t\tif (results.statusCode != EMDKResults.STATUS_CODE.SUCCESS) {\n\t\t\tstatusTextView.setText(\"EMDKManager Request Failed\");\n\t\t}\n\n    So the complete `onCreate` method looks like:\n     \n     ![img](images/BasicScanningTutorialImages/on_create_added.jpg)\n\n4. We will write a method `initializeScanner` to initialize and enable the scanner and its listeners by using [Barcode Manager](#api-BarcodeManager) object.\n\n        :::java\n        // Method to initialize and enable Scanner and its listeners\n\t    private void initializeScanner() throws ScannerException {\n\n\t\t  if (scanner == null) {\n\n\t\t\t// Get the Barcode Manager object\n\t\t\tbarcodeManager = (BarcodeManager) this.emdkManager\n\t\t\t\t\t.getInstance(FEATURE_TYPE.BARCODE);\n\n\t\t\t// List<ScannerInfo> list = barcodeManager.getSupportedDevices();\n\t\t\t// Get default scanner defined on the device\n\t\t\tscanner = barcodeManager.getDevice(DeviceIdentifier.DEFAULT);\n\t\t\t// scanner = barcodeManager.getDevice(list.get(0));\n\n\t\t\t// Add data and status listeners\n\t\t\tscanner.addDataListener(this);\n\t\t\tscanner.addStatusListener(this);\n\n\t\t\t// The trigger type is set to HARD by default and HARD is not\n\t\t\t// implemented in this release.\n\t\t\t// So set to SOFT_ALWAYS\n\t\t\tscanner.triggerType = TriggerType.SOFT_ALWAYS;\n\n\t\t\t// Enable the scanner\n\t\t\tscanner.enable();\n\t\t  }\n\n\t    }\n\n    The `initializeScanner` method looks like:\n     \n     ![img](images/BasicScanningTutorialImages/initialize_scanner_method.jpg)\n\n5. Let us create a method `setScannerParameters` to set some decoder parameters in [ScannerConfig](#api-ScannerConfig) object.\n\n    > Note: You can configure [Decoder Params](#api-ScannerConfig-DecoderParams), [Reader Params](#api-ScannerConfig-ReaderParams), [Scan Params](#api-ScannerConfig-ScanParams) or any Scanner feature using [ScannerConfig](#api-ScannerConfig) object. Since this is a basic scanner tutorial, we will only use a few Decoder Params. We will configure rest of the attributes in our next Advanced Scanning Tutorial.   \n  \n        :::java\n        // Method to set some decoder parameters in the ScannerConfig object\n\t    public void setScannerParameters() {\n\t\t  try {\n\n\t\t\tif (scanner == null) {\n\t\t\t\t// Method call to initialize the scanner parameters\n\t\t\t\tinitializeScanner();\n\t\t\t}\n\n\t\t\tScannerConfig config = scanner.getConfig();\n\t\t\t// Set the code128\n\t\t\tconfig.decoderParams.code128.enabled = true;\n\t\t\t// set code39\n\t\t\tconfig.decoderParams.code39.enabled = true;\n\t\t\t// set UPCA\n\t\t\tconfig.decoderParams.upca.enabled = true;\n\t\t\tscanner.setConfig(config);\n\n\t\t  } catch (Exception e) {\n\t\t\tstatusTextView.setText(e.getMessage());\n\t\t  }\n\t    }\n\n    The `setScannerParameters` method looks like:\n     \n     ![img](images/BasicScanningTutorialImages/set_scanner_parameters.jpg)\n\n6. In order to scan, the scanner needs to be enabled and allowed to read when the user presses the hardware scan button of the device. So let us override a callback method `onKeyDown`, call `initializeScanner` method to enable the scanner and then start reading the barcode data.\n\n        :::java\n        // This is a callback method when user presses any hardware button on the\n\t    // device\n\t    @Override\n\t    public boolean onKeyDown(int keyCode, KeyEvent event) {\n\n\t\t  // check for scanner hard key press.\n\t\t  if ((keyCode == KeyEvent.KEYCODE_BUTTON_L1)\n\t\t\t\t|| (keyCode == KeyEvent.KEYCODE_BUTTON_R1)) {\n\n\t\t\t// Skip the key press if the repeat count is not zero.\n\t\t\tif (event.getRepeatCount() != 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (scanner == null) {\n\t\t\t\t\tinitializeScanner();\n\t\t\t\t}\n\n\t\t\t\tif ((scanner != null) && (isScanning == false)) {\n\t\t\t\t\t// Starts an asynchronous Scan. The method will not turn on\n\t\t\t\t\t// the scanner. It will, however, put the scanner in a state\n\t\t\t\t\t// in which the scanner can be turned ON either by pressing\n\t\t\t\t\t// a hardware trigger or can be turned ON automatically.\n\t\t\t\t\tscanner.read();\n\t\t\t\t}\n\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Display if there is any exception while performing operation\n\t\t\t\tstatusTextView.setText(e.getMessage());\n\t\t\t}\n\t\t\treturn true;\n\t\t  }\n\t\t return super.onKeyDown(keyCode, event);\n\t    }\n\n    The `onKeyDown` method looks like:\n     \n     ![img](images/BasicScanningTutorialImages/on_key_down.jpg)\n\n7. Just like we make the scanner read barcode data when pressing the hardware scan button, we also need to cancel read operation when user releases hardware scan button of the device. For this, we will override `onKeyUp` method and cancel any pending asynchronous read calls in this method.\n \n        :::java\n        // This is a callback method when user releases any hardware button on the\n\t    // device\n\t    @Override\n\t    public boolean onKeyUp(int keyCode, KeyEvent event) {\n\n\t\t  // check for scanner trigger key press.\n\t\t  if ((keyCode == KeyEvent.KEYCODE_BUTTON_L1)\n\t\t\t\t|| (keyCode == KeyEvent.KEYCODE_BUTTON_R1)) {\n\n\t\t\t// Skip the key press if the repeat count is not zero.\n\t\t\tif (event.getRepeatCount() != 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif ((scanner != null) && (isScanning == true)) {\n\t\t\t\t\t// This Cancels any pending asynchronous read() calls\n\t\t\t\t\tscanner.cancelRead();\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tstatusTextView.setText(e.getMessage());\n\t\t\t}\n\t\t\treturn true;\n\t\t  }\n\t\t return super.onKeyUp(keyCode, event);\n\t    }\n\n    The `onKeyUp` method looks like:  \n    ![img](images/BasicScanningTutorialImages/on_key_up.jpg)\n\n8. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the earlier steps. We have used that instance to get an instance [Barcode Manager](#api-BarcodeManager) to enable scanning.\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        this.emdkManager = emdkManager;\n\t\t// Method call to set some decoder parameters to scanner\n\t\tsetScannerParameters();\n\n\t\t// Toast to indicate that the user can now start scanning\n\t\tToast.makeText(MainActivity.this,\n\t\t\t\t\"Press Hard Scan Button to start scanning...\",\n\t\t\t\tToast.LENGTH_SHORT).show();  \n\n    Your complete onOpened method should now look like this:\n    \n    ![img](images/BasicScanningTutorialImages/on_opened_method.jpg)\n\n9. As mentioned earlier that whenever a barcode is scanned, its data will be received in a callback `onData` method upon data availability. So we need to get that data, process it in the format we want and populate in the [EditText](http://developer.android.com/reference/android/widget/EditText.html) of UI.\n\n    The received data should be processed on a background thread not to block the UI thread. Hence we will use Android's own [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) to process the scanned data on background thread. So we create AsyncTask `AsyncDataUpdate` that takes [ScanDataCollection](#api-ScanDataCollection), which has the scanned data. It then processes this object in `doInBackground` method to filter the barcode data and label type in strings, which is then passed to the UI thread in `onPostExecute` method of AsyncTask to Populate.\n\n        :::java\n        // Update the scan data on UI\n\t    int dataLength = 0;\n\n\t    // AsyncTask that configures the scanned data on background\n\t    // thread and updated the result on UI thread with scanned data and type of\n\t    // label\n\t    private class AsyncDataUpdate extends\n\t\t\tAsyncTask<ScanDataCollection, Void, String> {\n\n\t\t  @Override\n\t\t  protected String doInBackground(ScanDataCollection... params) {\n\t\t\tScanDataCollection scanDataCollection = params[0];\n\n\t\t\t// Status string that contains both barcode data and type of barcode\n\t\t\t// that is being scanned\n\t\t\tString statusStr = \"\";\n\n\t\t\t// The ScanDataCollection object gives scanning result and the\n\t\t\t// collection of ScanData. So check the data and its status\n\t\t\tif (scanDataCollection != null\n\t\t\t\t\t&& scanDataCollection.getResult() == ScannerResults.SUCCESS) {\n\n\t\t\t\tArrayList<ScanData> scanData = scanDataCollection.getScanData();\n\n\t\t\t\t// Iterate through scanned data and prepare the statusStr\n\t\t\t\tfor (ScanData data : scanData) {\n\t\t\t\t\t// Get the scanned data\n\t\t\t\t\tString barcodeDate = data.getData();\n\t\t\t\t\t// Get the type of label being scanned\n\t\t\t\t\tLabelType labelType = data.getLabelType();\n\t\t\t\t\t// Concatenate barcode data and label type\n\t\t\t\t\tstatusStr = barcodeDate + \" \" + labelType;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Return result to populate on UI thread\n\t\t\treturn statusStr;\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onPostExecute(String result) {\n\t\t\t// Update the dataView EditText on UI thread with barcode data and\n\t\t\t// its label type\n\t\t\tif (dataLength++ > 50) {\n\t\t\t\t// Clear the cache after 50 scans\n\t\t\t\tdataView.getText().clear();\n\t\t\t\tdataLength = 0;\n\t\t\t}\n\t\t\tdataView.append(result + \"\\n\");\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onPreExecute() {\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onProgressUpdate(Void... values) {\n\t\t  }\n\t    }\n\n    We call this AsyncTask in overriden `onData` method, by creating an instance of `AsyncDataUpdate` and passing the `scanDataCollection` for further processing.\n\n        :::java\n        // Use the scanned data, process it on background thread using AsyncTask\n\t\t// and update the UI thread with the scanned results\n\t\tnew AsyncDataUpdate().execute(scanDataCollection);\n\n    So the `onData` method and `AsyncDataUpdate` looks like:\n    ![img](images/BasicScanningTutorialImages/async_data_update.jpg)\n  \n10. Whether we scan the barcode by pressing the hard scan key or keep it idle, it returns the status of the scanner at specific point of time in the overridden `onStatus` method of implemented `StatusListener` interface. Since we are also displaying the status along with barcode data, we will make use of this method and populate the status.\n\n    Just like scanned data, we are also processing the scanner status on a background thread. Hence we will create another [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) named `AsyncStatusUpdate` that takes [StatusData](#api-StatusData) and processes it in `doInBackground` method to retrieve state in string format which is populated in status Text View on UI thread in `onPostExecute` method of the AsyncTask.              \n\n        :::java\n        // AsyncTask that configures the current state of scanner on background\n\t    // thread and updates the result on UI thread\n\t    private class AsyncStatusUpdate extends AsyncTask<StatusData, Void, String> {\n\n\t\t  @Override\n\t\t  protected String doInBackground(StatusData... params) {\n\t\t\t// Get the current state of scanner in background\n\t\t\tStatusData statusData = params[0];\n\t\t\tString statusStr = \"\";\n\t\t\tScannerStates state = statusData.getState();\n\t\t\t// Different states of Scanner\n\t\t\tswitch (state) {\n\t\t\t// Scanner is IDLE\n\t\t\tcase IDLE:\n\t\t\t\tstatusStr = \"The scanner enabled and its idle\";\n\t\t\t\tisScanning = false;\n\t\t\t\tbreak;\n\t\t\t// Scanner is SCANNING\n\t\t\tcase SCANNING:\n\t\t\t\tstatusStr = \"Scanning..\";\n\t\t\t\tisScanning = true;\n\t\t\t\tbreak;\n\t\t\t// ERROR in Scanning\n\t\t\tcase ERROR:\n\t\t\t\tstatusStr = \"Error occurred..\";\n\t\t\t\tbreak;\n\t\t\t// Scanner is stopped\n\t\t\tcase STOPPED:\n\t\t\t\tstatusStr = \"Scanner stopped.\";\n\t\t\t\tbreak;\n\t\t\t// Scanner is waiting for trigger press\n\t\t\tcase WAITING:\n\t\t\t\tstatusStr = \"Waiting for trigger press..\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Return result to populate on UI thread\n\t\t\treturn statusStr;\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onPostExecute(String result) {\n\t\t\t// Update the status text view on UI thread with current scanner\n\t\t\t// state\n\t\t\tstatusTextView.setText(result);\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onPreExecute() {\n\t\t  }\n\n\t\t  @Override\n\t\t  protected void onProgressUpdate(Void... values) {\n\t\t  }\n\t    }\n\n    We call this AsyncTask in overriden `onStatus` method, by creating an instance of `AsyncStatusUpdate` and passing the `StatusData` for further processing.\n\n        :::java\n        // process the scan status event on the background thread using\n\t\t// AsyncTask and update the UI thread with current scanner state\n\t\tnew AsyncStatusUpdate().execute(statusData);\n\n    So the `onStatus` method and `AsyncStatusUpdate` looks like:\n    ![img](images/BasicScanningTutorialImages/async_status_update.jpg)\n\n11. Now let's override the `onDestroy` method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override\n\t    protected void onDestroy() {\n\t\t super.onDestroy();\n\t\t if (emdkManager != null) {\n\n\t\t\t// Clean up the objects created by EMDK manager\n\t\t\temdkManager.release();\n\t\t\temdkManager = null;\n\t\t }\n\t    } \n\n    Your `onDestroy` method should now look like this:  \n\n    ![img](images/BasicScanningTutorialImages/on_destroy_method.jpg)\n\n12. When we are done with scanning, we must release the scanner hardware resources for other applications to use. So override `onStop` method and disable the scanner to release it.\n\n        :::java\n        @Override\n\t    protected void onStop() {\n\t\t  // TODO Auto-generated method stub\n\t\t  super.onStop();\n\t\t  try {\n\t\t\tif (scanner != null) {\n\t\t\t\t// releases the scanner hardware resources for other application\n\t\t\t\t// to use. You must call this as soon as you're done with the\n\t\t\t\t// scanning.\n\t\t\t\tscanner.disable();\n\t\t\t\tscanner = null;\n\t\t\t}\n\t\t  } catch (ScannerException e) {\n\t\t\te.printStackTrace();\n\t\t  }\n\t    }\n\n    Your `onStop` method should now look like this:  \n\n    ![img](images/BasicScanningTutorialImages/on_stop_method.jpg) \n\n13. Finally, Clean up the objects created by EMDK manager in `onClosed` method, if EMDK closed abruptly.\n\n        :::java\n        // The EMDK closed abruptly. // Clean up the objects created by EMDK\n\t\t// manager\n\t\tif (this.emdkManager != null) {\n\n\t\t\tthis.emdkManager.release();\n\t\t\tthis.emdkManager = null;\n\t\t}\n\n    Your `onClosed` method should now look like this:  \n\n    ![img](images/BasicScanningTutorialImages/on_closed_method.jpg)\n\t\nThat's it!!! We are done with all the coding part that will let us scan the barcodes of configured decoder params on Symbol Android device using [Barcode/Scanning APIs](#guide-reference-EMDKList) introduced in EMDK V 3.0. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n \n2. Run the application.\n\n    ![img](images/BasicScanningTutorialImages/home_screen.png)\n\n    You can see a [Toast](http://developer.android.com/guide/topics/ui/notifiers/toasts.html), which indicates that the Scanner has been enabled and you can start scanning by pressing hard scan button of the device.\n  \n3. Now if you press the hard scan button, the status listener in the code starts working and current status of Scanner is displayed in Status [TextView](http://developer.android.com/reference/android/widget/TextView.html), which is `Scanning`.  \n\n    ![img](images/BasicScanningTutorialImages/status_scanning.png)\n\n4. Once you are done with scanning and release the hard scan button, data gets populated on [EditText](http://developer.android.com/reference/android/widget/EditText.html) and status is again updated in Status [TextView](http://developer.android.com/reference/android/widget/TextView.html), which is `Idle`.\n\n    ![img](images/BasicScanningTutorialImages/status_idle.png)  \n\n    This is how [Barcode/Scanning APIs](#guide-reference-EMDKList) introduced in EMDK V 3.0 can be used to perform Basic Scanning operations on your Symbol devices without using Profile Wizard. We will see the [Barcode/Scanning APIs](#guide-reference-EMDKList) in depth to perform advanced scanning operations in the next tutorial. \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to perform Basic Scanning operations on your Symbol Android devices through applications without using Profile Wizard, let us try to understand the API in depth and perform some advanced scanning. So in the next tutorial, we will concentrate on [Barcode/Scanning APIs](#guide-reference-EMDKList) in depth and use it to perform advanced scanning operations by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/BasicScanningTutorial.zip)."},{"key":"guide-tutorial-tutbatteryintent","name":" Battery Intent Tutorial","md":"# Battery Intent Tutorial\n\n## Overview\nOn Symbol devices like the MC40, extra battery information can be retrieved using the standard [Android Battery Intent](http://developer.android.com/training/monitoring-device-state/battery-monitoring.html). Setting up to receive this information is the same as with consumer Android devices. However, the data that is returned to your application includes some extra information like:\n\n* Backup Battery Voltage\n* Battery Manufacture Date\n* Battery Serial Number\n* Part Number for Battery\n* Unique ID for Battery\n* Rated Capacity of the Battery\n* Charge Cycle count of the Battery \n\n## Enabling the Receiver \n\n\t:::java\n\tmIntent_Receiver = new Intent_Receiver();  \n\tmIntentFilter = new IntentFilter();  \n\tmIntentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);  \n\tregisterReceiver(mIntent_Receiver,mIntentFilter);  \n\n## Processing The Data\nIn the below code we are getting the Symbol specific battery information provided by the [Battery Intent](#guide-reference-refbatteryintent) extras. Notice that some values are strings and other values are integers.\n\n\t:::java\n\tpublic void onReceive(Context context, Intent intent) {      \n\t\tif (BATTERY_STATE_CHANGED_INTENT.equals(intent.getAction())) {          \n\t\t\tint bkvoltage = intent.getExtras().getInt(\"bkvoltage\");  \n\t\t\tString mfd = intent.getExtras().getString(\"mfd\");  \n\t\t\tString serialnumber = intent.getExtras().getString(\"serialnumber\");  \n\t\t\tString partnumber = intent.getExtras().getString(\"partnumber\");  \n\t\t\tString uniqueid = intent.getExtras().getString(\"uniqueid\");  \n\t\t\tint ratedcapacity = intent.getExtras().getInt(\"ratedcapacity\");  \n\t\t\tint cycle = intent.getExtras().getInt(\"cycle\");  \n\t\t}  \n\t} \n\n## Downloading the Sample\nDownload the source for this project in the [associated sample](#guide-sample-samplebatteryintent)."},{"key":"guide-tutorial-tutdatacaptureintent","name":" Data Capture Intents Tutorial","md":"# Data Capture Intents Tutorial\n\n## Overview\nDataWedge on Android has the ability to output captured data via Intents. This article describes how to use the DataWedge Intent output plug-in and the Data Capture API to receive captured data in your native Android application.\n\nKnowledge of Android programming and familiarity with the Android intent mechanism are assumed. Also assumed is some familiarity with DataWedge and that you have read the DataWedge section in the Integrator Guide for your device.\n \n## Application Layout\nFor this article we created an Android application with a blank activity using Eclipse, to which we added the following layout.\n\n    :::xml\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>  \n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"  \n        android:layout_width=\"fill_parent\"  \n        android:layout_height=\"fill_parent\"  \n        android:orientation=\"vertical\" >  \n        <LinearLayout  \n            android:layout_width=\"fill_parent\"  \n            android:layout_height=\"wrap_content\"  \n            android:orientation=\"horizontal\" >  \n            <ImageView  \n                android:id=\"@+id/logo\"  \n                style=\"@style/logo\"  \n                android:contentDescription=\"@string/title\" />  \n            <LinearLayout  \n                android:layout_width=\"fill_parent\"  \n                android:layout_height=\"wrap_content\"  \n                android:orientation=\"vertical\" >  \n                <TextView style=\"@style/title\" />  \n                <TextView style=\"@style/copyright\" />  \n            </LinearLayout>  \n        </LinearLayout>  \n        <View style=\"@style/hr\" />  \n        <TextView style=\"@style/intro\" />  \n        <EditText  \n            android:id=\"@+id/editbox\"  \n            style=\"@style/editbox\"  \n            android:inputType=\"textMultiLine\"  \n            />  \n    </LinearLayout> \n\nThe things to note in the above layout are the ImageView and the EditText widgets.  The ImageView widget will effectively act as a button which can be used to toggle the scanner instead of pressing the trigger button on the device. The EditText widget will be used to display the data that we receive in the intent.\n \n## Intent Strings\nThe intent we will receive from DataWedge will contain a bundle of data which we will be retrieving using the Intent.getStringtExtra() and Intent.getSerializableExtra() methods.  \n\n### Data Items\nThe following is a list of the data item names that the bundle could contain.\n\n* String SOURCE_TAG = \"com.motorolasolutions.emdk.datawedge.source\";\n* String contains the source of the data i.e. scanner or MSR\n* String DATA_STRING_TAG = \"com.motorolasolutions.emdk.datawedge.data_string\";\n    * String contains the output data as a String. In the case of concatenated bar codes, the decode data is concatenated and sent out as a single string. In the case of MSR output, the data from the MSR tracks is concatenated and sent out as a single string.\n* String LABEL_TYPE_TAG = \"com.motorolasolutions.emdk.datawedge.label_type\";\n* String contains the label type of the bar code.\n* String DECODE_DATA_TAG = \"com.motorolasolutions.emdk.datawedge.decode_data\";\n    * Decode data returned as a list of byte arrays. In most cases there will be one byte array per decode. For bar-code symbologies that support concatenation e.g. Codabar, Code128, MicroPDF, etc., the decoded data is stored in multiple byte arrays (one byte array per bar code). Clients can get data in each byte array by passing an index.\n\n### MSR Intent Names\nLet's list the MSR intent names (in case we want to use these in the future).\nThe MSR related data added to the intent's bundle can be retrieved using the Intent.getStringtExtra() and Intent.getSerializableExtra() calls, using the following String tags:\n\n* String MSR_DATA_TAG = \"com.motorolasolutions.emdk.datawedge.msr_data\";\n    * The data from the MSR tracks is concatenated and sent out as a byte array.\n* String MSR_TRACK1_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track1\";\n    * MSR track 1 data is returned as a byte array.\n* String MSR_TRACK2_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track2\";\n    * MSR track 2 data is returned as a byte array.\n* String MSR_TRACK3_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track3\";\n    * MSR track 3 data is returned as a byte array.\n* String MSR_TRACK1_STATUS_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track1_status\";\n    * MSR track 1 decode status as an Integer where 0 indicates a successful decode.\n* String MSR_TRACK2_STATUS_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track2_status\";\n    * MSR track 2 decode status as an Integer where 0 indicates a successful decode.\n* String MSR_TRACK3_STATUS_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track3_status\";\n    * MSR track 3 decode status as an Integer where 0 indicates a successful decode.\n* String MSR_TRACK1_ENCRYPTED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track1_encrypted\";\n    * MSR track 1 encrypted data is returned as a byte array.\n* String MSR_TRACK2_ENCRYPTED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track2_encrypted\";\n    * MSR track 2 encrypted data is returned as a byte array.\n* String MSR_TRACK3_ENCRYPTED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track3_encrypted\";\n    * MSR track 3 encrypted data is returned as a byte array.\n* String MSR_TRACK1_HASHED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track1_hashed\";\n    * MSR track 1 hashed data is returned as a byte array.\n* String MSR_TRACK2_HASHED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track2_hashed\";\n    * MSR track 2 hashed data is returned as a byte array.\n* String MSR_TRACK3_HASHED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track3_hashed\";\n    * MSR track 3 hashed data is returned as a byte array.\n\n### Soft Scan Trigger Intent Names\nHere are the API intent names for the soft scan trigger:\n\n* String ACTION_SOFTSCANTRIGGER = \"com.motorolasolutions.emdk.datawedge.api.ACTION_SOFTSCANTRIGGER\";\n    * This is the intent action for the soft scan trigger.\n* String EXTRA_PARAM = \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PARAMETER\";\n    * Parameter passed in the intent to specify the action the soft scan trigger should perform.  The following actions are recognized:\n* String DWAPI_START_SCANNING = \"START_SCANNING\";\n    * Start scanning.\n* String DWAPI_STOP_SCANNING = \"STOP_SCANNING\";\n    * Stop scanning.\n* String DWAPI_TOGGLE_SCANNING = \"TOGGLE_SCANNING\";\n    * Toggle scanning.\n\n>In the code that follows we will just be using the SOURCE_TAG, DATA_STRING_TAG and LABEL_TYPE_TAG intent data to display the intent data in the EditText widget.\n \n## Handling Intents\nIncoming intents can be handled by overriding the onNewIntent method.\n\n    :::java\n    @Override  \n    public void onNewIntent(Intent i) {  \n        handleDecodeData(i);  \n    }  \n\nOur *handleDecodeData()* method will responsible for getting the data from the intent, formatting it and adding it to the end of the edit box; something like this:\n\n    :::java\n    private void handleDecodeData(Intent i) {  \n        // check the intent action is for us  \n        if ( i.getAction().contentEquals(com.motorolasolutions.emdk.sample.dwdemosample.RECVR) ) {       \n            // define a string that will hold our output  \n      \n      \n            String out = \"\";  \n            // get the source of the data  \n            String source = i.getStringExtra(SOURCE_TAG);  \n            // save it to use later  \n            if (source == null) source = \"scanner\";  \n            // get the data from the intent  \n            String data = i.getStringExtra(DATA_STRING_TAG);  \n            // let's define a variable for the data length  \n            Integer data_len = 0;  \n            // and set it to the length of the data  \n            if (data != null) data_len = data.length();  \n            // check if the data has come from the barcode scanner  \n            if (source.equalsIgnoreCase(\"scanner\")) {  \n                // check if there is anything in the data  \n                if (data != null && data.length() > 0) {  \n                  // we have some data, so let's get it's symbology  \n                    String sLabelType = i.getStringExtra(LABEL_TYPE_TAG);  \n                    // check if the string is empty  \n                    if (sLabelType != null && sLabelType.length() > 0) {  \n                        // format of the label type string is LABEL-TYPE-SYMBOLOGY  \n                        // so let's skip the LABEL-TYPE- portion to get just the symbology  \n                        sLabelType = sLabelType.substring(11);  \n                    }  \n                    else {  \n                      // the string was empty so let's set it to \"Unknown\"  \n                        sLabelType = \"Unknown\";  \n                    }  \n                  // let's construct the beginning of our output string  \n                    out = \"Source: Scanner, \" + \"Symbology: \" + sLabelType + \", Length: \" + data_len.toString() + \", Data: ...\\r\\n\";  \n                }  \n            }  \n            // check if the data has come from the MSR  \n            if (source.equalsIgnoreCase(\"msr\")) {  \n                // construct the beginning of our output string  \n              out = \"Source: MSR, Length: \" + data_len.toString() + \", Data: ...\\r\\n\";  \n            }  \n      \n      \n            // let's get our edit box view  \n            EditText et = (EditText)findViewById(R.id.editbox);  \n            // and get it's text into an editable string  \n            Editable txt = et.getText();  \n            // now because we want format our output  \n          // we need to put the edit box text into a spannable string builder  \n            SpannableStringBuilder stringbuilder = new SpannableStringBuilder(txt);  \n            // add the output string we constructed earlier  \n            stringbuilder.append(out);  \n            // now let's highlight our output string in bold type  \n          stringbuilder.setSpan(new StyleSpan(Typeface.BOLD), txt.length(), stringbuilder.length(), SpannableString.SPAN_EXCLUSIVE_EXCLUSIVE);  \n      \n      \n          // then add the barcode or msr data, plus a new line, and add it to the string builder  \n          stringbuilder.append(data + \"\\r\\n\");  \n          // now let's update the text in the edit box  \n          et.setText(stringbuilder);  \n            // we want the text cursor to be at the end of the edit box  \n            // so let's get the edit box text again  \n            txt = et.getText();  \n            // and set the cursor position at the end of the text  \n            et.setSelection(txt.length());  \n            // and we are done!  \n      }  \n    } \n\n\n## Toggling The Scan Trigger\nOur activity layout has an ImageView which we will use as a button to toggle the scan trigger.  This is done by using the Data Capture API.  The following code toggles the scan trigger each time the image is tapped.\n\n    :::java\n    ImageView img = (ImageView) findViewById(R.id.dwdemo_logo);  \n    img.setOnClickListener(new OnClickListener() {  \n        @Override  \n        public void onClick(View v) {  \n            Intent i = new Intent();  \n            i.setAction(ACTION_SOFTSCANTRIGGER);  \n            i.putExtra(EXTRA_PARAM, DWAPI_TOGGLE_SCANNING);  \n            DWDemoActivity.this.sendBroadcast(i);  \n            Toast.makeText(v.getContext(), \"Soft scan trigger toggled.\", Toast.LENGTH_SHORT).show();  \n        }  \n    }); \n\n\n## Putting It All Together\nLet's put all that code together so that we can see what our final activity class should look like.\n\n    :::java\n    package com.motorolasolutions.emdk.sample.dwdemosample;  \n    import android.os.Bundle;  \n    import android.app.Activity;  \n    import android.content.Intent;  \n    import android.graphics.Typeface;  \n    import android.view.View;  \n    import android.view.View.OnClickListener;  \n    import android.widget.EditText;  \n    import android.widget.ImageView;  \n    import android.widget.Toast;  \n    import android.text.Editable;  \n    import android.text.SpannableString;  \n    import android.text.SpannableStringBuilder;  \n    import android.text.style.StyleSpan;  \n    public class MainActivity extends Activity {  \n        // Tag used for logging errors  \n        private static final String TAG = MainActivity.class.getSimpleName();  \n        // Let's define some intent strings  \n        // This intent string contains the source of the data as a string  \n        private static final String SOURCE_TAG = \"com.motorolasolutions.emdk.datawedge.source\";  \n        // This intent string contains the barcode symbology as a string  \n        private static final String LABEL_TYPE_TAG = \"com.motorolasolutions.emdk.datawedge.label_type\";  \n        // This intent string contains the barcode data as a byte array list  \n        private static final String DECODE_DATA_TAG = \"com.motorolasolutions.emdk.datawedge.decode_data\";  \n        // This intent string contains the captured data as a string  \n        // (in the case of MSR this data string contains a concatenation of the track data)  \n        private static final String DATA_STRING_TAG = \"com.motorolasolutions.emdk.datawedge.data_string\";  \n        // Let's define the MSR intent strings (in case we want to use these in the future)  \n        private static final String MSR_DATA_TAG = \"com.motorolasolutions.emdk.datawedge.msr_data\";  \n        private static final String MSR_TRACK1_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track1\";  \n        private static final String MSR_TRACK2_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track2\";  \n        private static final String MSR_TRACK3_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track3\";  \n        private static final String MSR_TRACK1_STATUS_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track1_status\";  \n        private static final String MSR_TRACK2_STATUS_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track2_status\";  \n        private static final String MSR_TRACK3_STATUS_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track3_status\";  \n        private static final String MSR_TRACK1_ENCRYPTED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track1_encrypted\";  \n        private static final String MSR_TRACK2_ENCRYPTED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track2_encrypted\";  \n        private static final String MSR_TRACK3_ENCRYPTED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track3_encrypted\";  \n        private static final String MSR_TRACK1_HASHED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track1_hashed\";  \n        private static final String MSR_TRACK2_HASHED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track2_hashed\";  \n        private static final String MSR_TRACK3_HASHED_TAG = \"com.motorolasolutions.emdk.datawedge.msr_track3_hashed\";  \n        // Let's define the API intent strings for the soft scan trigger    private static final String ACTION_SOFTSCANTRIGGER = \"com.motorolasolutions.emdk.datawedge.api.ACTION_SOFTSCANTRIGGER\";  \n        private static final String EXTRA_PARAM = \"com.motorolasolutions.emdk.datawedge.api.EXTRA_PARAMETER\";  \n        private static final String DWAPI_START_SCANNING = \"START_SCANNING\";  \n        private static final String DWAPI_STOP_SCANNING = \"STOP_SCANNING\";  \n        private static final String DWAPI_TOGGLE_SCANNING = \"TOGGLE_SCANNING\";  \n        private static String ourIntentAction = \"com.motorolasolutions.emdk.sample.dwdemosample.RECVR\";  \n      \n      \n        @Override  \n        public void onCreate(Bundle savedInstanceState) {  \n            super.onCreate(savedInstanceState);  \n            setContentView(R.layout.activity_main);  \n            // Let's set the cursor at the end of any text in the editable text field        EditText et = (EditText)findViewById(R.id.editbox);  \n            Editable txt = et.getText();  \n            et.setSelection(txt.length());  \n      \n      \n            // Since we will be using the image as a soft scan trigger toggle button        // let's handle the image on onClick event  \n            ImageView img = (ImageView) findViewById(R.id.logo);  \n            img.setOnClickListener(new OnClickListener() {  \n                @Override  \n                public void onClick(View v) {  \n                    // the image has been tapped so shoot off the intent to DataWedge                // to toggle the soft scan trigger  \n                    // Create a new intent  \n                    Intent i = new Intent();  \n                    // set the intent action using soft scan trigger action string declared earlier  \n                    i.setAction(ACTION_SOFTSCANTRIGGER);  \n                    // add a string parameter to tell DW that we want to toggle the soft scan trigger  \n                    i.putExtra(EXTRA_PARAM, DWAPI_TOGGLE_SCANNING);  \n                    // now broadcast the intent  \n                    MainActivity.this.sendBroadcast(i);  \n                    // provide some feedback to the user that we did something                Toast.makeText(v.getContext(), \"Soft scan trigger toggled.\", Toast.LENGTH_SHORT).show();  \n                }  \n            });  \n      \n      \n            // in case we have been launched by the DataWedge intent plug-in  \n            // using the StartActivity method let's handle the intent  \n            Intent i = getIntent();  \n            handleDecodeData(i);  \n        }  \n      \n      \n        // We need to handle any incoming intents, so let override the onNewIntent method  \n        @Override  \n        public void onNewIntent(Intent i) {  \n            handleDecodeData(i);  \n        }  \n      \n      \n        // This method is responsible for getting the data from the intent  \n        // formatting it and adding it to the end of the edit box  \n        private void handleDecodeData(Intent i) {  \n            // check the intent action is for us  \n            if ( i.getAction().contentEquals(ourIntentAction) ) {  \n                // define a string that will hold our output  \n                String out = \"\";  \n                // get the source of the data  \n                String source = i.getStringExtra(SOURCE_TAG);  \n                // save it to use later  \n                if (source == null) source = \"scanner\";  \n                // get the data from the intent  \n                String data = i.getStringExtra(DATA_STRING_TAG);  \n                // let's define a variable for the data length  \n      \n      \n                Integer data_len = 0;  \n                // and set it to the length of the data  \n                if (data != null) data_len = data.length();  \n                // check if the data has come from the barcode scanner  \n                if (source.equalsIgnoreCase(\"scanner\")) {  \n                    // check if there is anything in the data  \n                    if (data != null && data.length() > 0) {  \n                        // we have some data, so let's get it's symbology  \n                        String sLabelType = i.getStringExtra(LABEL_TYPE_TAG);  \n                        // check if the string is empty  \n                        if (sLabelType != null && sLabelType.length() > 0) {                        // format of the label type string is LABEL-TYPE-SYMBOLOGY  \n                            // so let's skip the LABEL-TYPE- portion to get just the symbology  \n                            sLabelType = sLabelType.substring(11);  \n                        }  \n                        else {  \n                            // the string was empty so let's set it to \"Unknown\"  \n                            sLabelType = \"Unknown\";  \n                        }  \n      \n      \n                        // let's construct the beginning of our output string  \n                        out = \"Source: Scanner, \" + \"Symbology: \" + sLabelType + \", Length: \" + data_len.toString() + \", Data: ...\\r\\n\";  \n                    }  \n                }  \n                // check if the data has come from the MSR  \n                if (source.equalsIgnoreCase(\"msr\")) {  \n                    // construct the beginning of our output string  \n                    out = \"Source: MSR, Length: \" + data_len.toString() + \", Data: ...\\r\\n\";  \n                }  \n      \n      \n                // let's get our edit box view  \n                EditText et = (EditText)findViewById(R.id.editbox);  \n                // and get it's text into an editable string  \n                Editable txt = et.getText();  \n                // now because we want format our output  \n      \n      \n                // we need to put the edit box text into a spannable string builder  \n                SpannableStringBuilder stringbuilder = new SpannableStringBuilder(txt);  \n                // add the output string we constructed earlier  \n                stringbuilder.append(out);  \n                // now let's highlight our output string in bold type  \n                stringbuilder.setSpan(new StyleSpan(Typeface.BOLD), txt.length(), stringbuilder.length(), SpannableString.SPAN_EXCLUSIVE_EXCLUSIVE);  \n                // then add the barcode or msr data, plus a new line, and add it to the string builder  \n                stringbuilder.append(data + \"\\r\\n\");  \n                // now let's update the text in the edit box  \n                et.setText(stringbuilder);  \n                // we want the text cursor to be at the end of the edit box  \n                // so let's get the edit box text again  \n                txt = et.getText();  \n                // and set the cursor position at the end of the text  \n                et.setSelection(txt.length());  \n                // and we are done!  \n            }  \n        }  \n    }  \n\n## Defining Intent Filters\nHaving dealt with the coding of our activity, we now need to inform the system which implicit intents our application can handle.  For that we need to define an intent-filter as follows.\n\n    :::xml\n    <intent-filter>  \n        <action android:name=\"com.motorolasolutions.emdk.sample.dwdemosample.RECVR\"/>  \n        <category android:name=\"android.intent.category.DEFAULT\"/>  \n    </intent-filter>  \n\n\nWe will be using the com.motorolasolutions.emdk.sample.dwdemosample.RECVR action and the android.intent.category.DEFAULT category we have just defined above later on when we come to configure our DataWedge profile.\n\nIn this article DataWedge is configured to use the startActivity() method to send the intent. The startActivity() method causes a new activity to be launched. However since we do not want another instance of our activity launched each time we receive an intent, we need to specify the launch mode of our activity as single task.\nandroid:launchMode=\"singleTask\"\n\nAfter adding the above, our AndroidManifest.xml should look something like this\n\n    :::xml\n    <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"  \n        package=\"com.motorolasolutions.emdk.sample.dwdemosample\"  \n        android:versionCode=\"1\"  \n        android:versionName=\"1.0.0\" >  \n        <uses-sdk  \n            android:minSdkVersion=\"10\"  \n            android:targetSdkVersion=\"10\" />  \n        <application  \n            android:icon=\"@drawable/ic_launcher\"  \n            android:label=\"@string/app_name\"  \n            android:theme=\"@style/AppTheme\" >  \n            <activity  \n                android:name=\".MainActivity\"  \n                android:label=\"@string/app_name\"  \n                android:launchMode=\"singleTask\" >  \n                <intent-filter>  \n                    <action android:name=\"android.intent.action.MAIN\" />  \n                    <category android:name=\"android.intent.category.LAUNCHER\" />  \n                </intent-filter>  \n                <intent-filter>  \n                    <action android:name=\"com.motorolasolutions.emdk.sample.dwdemosample.RECVR\"/>  \n                    <category android:name=\"android.intent.category.DEFAULT\"/>  \n                </intent-filter>  \n                </activity>  \n        </application>  \n    </manifest>  \n\n## Configuring DataWedge\nNow we need to configure DataWedge to send the desired intent to our application.\n\nThe following steps will help you get started\n\n* Launch DataWedge\n* Create a new profile and give it a name such as \"dwdemosample\"\n* Edit the profile\n* Go into Associated apps, tap the menu button, and add a new app/activity\n* For the application select com.motorolasolutions.emdk.sample.dwdemosample\n* For the activity select com.motorolasolutions.emdk.sample.dwdemosample.MainActivty\n* Go back and disable the keystroke output plug-in\n* Enable the intent output plug-in\n* For the intent action enter com.motorolasolutions.emdk.sample.dwdemosample.RECVR\n* For the intent category enter android.intent.category.DEFAULT\n \n## Summary\nThat's it.  You should now be able to scan a bar-code and see it appear in the sample application.\nIn this article, we covered:\n\n* DataWedge intent strings\n* Handling intents from Data Capture\n* Receiving barcode/MSR data\n* Sending intents to Data Capture\n* Toggling of the soft scan trigger\n* Defining intent filters\n* Configuring DataWedge to send intents to our application\n\n## Sample Code\nDownload the source for this project in the [associated sample](#guide-sample-sampledatacaptureintent)."},{"key":"guide-tutorial-tutdatacaptureprofile","name":" Data Capture Profile Feature Tutorial","md":"# Data Capture Profile Feature Tutorial\n## Developing an EMDK for Android Application Part 1\n\nThis guide will walk you through creating an EMDK For Android application that will use [Data Capture Profiles](#guide-profiles-profilebarcode) to get barcode data into your application using the [KeyStroke output](#guide-profiles-profilekeystroke) feature of [EMDK Profiles](#guide-profiles-usingwizard).\n\n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.  \n    ![img](images/setup/image019.jpg)\n2.  Assign names for the application and package. \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".  \n    ![img](images/setup/image021.jpg)\n4.  Click \"Next\".  \n    ![img](images/setup/image023.jpg)  \n5.  Click \"Next\".  \n    ![img](images/setup/image025.jpg)  \n6.  Click \"Next\".  \n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/setup/image100.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/setup/image102.jpg)  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/setup/image031.jpg)  \n\n## Enabling the EMDK\n9.  Select the project.  \n10. Select \"File -> Properties\" or right click on the project and select \"Properties\".  \n    ![img](images/setup/image033.jpg)   \n    ![img](images/setup/image035.jpg)   \n11.    Click \"Android\" from the left pane.  \n    ![img](images/setup/image037.jpg) \n12. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n13. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/setup/image041.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/setup/image098.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/setup/image101.jpg) \n\n## Adding a DataCapture Profile\n1. Select \"EMDKSample\" project from Package Explorer.    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/setup/image043.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/setup/image045.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: DataCaptureProfile). \n \n    ![img](images/setup/image047.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/setup/image049.jpg)\n  \n6. The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. USB Manager, Settings Manager, App Manager etc.) for configuring your Symbol device based on requirements.  \n\n\tSelect any feature from the list and click \"Right Arrow\" (Ex: \"ActivitySelection\" has been selected. By using this feature Activities can be associated with the application. Then the data capture feature will be enabled automatically when the specified activity is in foreground).\n  \n    ![img](images/setup/image051.jpg)\n  \n7. Click on the selected feature. The parameter list will be populated. \n\n\t> Note:\n\t> The field \"Name\" contains user defined name to identify a particular feature. This is required when editing any specific feature programmatically, which is outside the scope of this tutorial. So we will keep the \"Name\" field empty. \n  \n    ![img](images/setup/image053.jpg)\n  \n8. Click \"ActivitySelection\" under parameters.\n  \n    ![img](images/setup/image055.jpg)  \n\n9. Specify the applications package name and click \"Apply\".\n  \n    ![img](images/setup/image057.jpg)\n  \n10. Specify an Activity inside the application and click \"Apply\".\n  \n    ![img](images/setup/image059.jpg)\n  \n11. Click \"OK\".\n  \n    ![img](images/setup/image061.jpg)\n  \n12. Select any data capture feature and click Right Arrow (Ex: \"Barcode\" has been selected).\n  \n    ![img](images/setup/image063.jpg)\n  \n13. Click on the \"Barcode\" feature. The parameter list will be populated.\n\t> Note: \n\t> The field \"Name\" contains user defined name to identify a particular Barcode feature. This is required when editing any specific Barcode feature programmatically, which is outside the scope of this tutorial. So we will keep the \"Name\" field empty.\n  \n    ![img](images/setup/image065.jpg)\n  \n14. Enable the feature and change some parameters.\n    ![img](images/setup/image067.jpg)\n    ![img](images/setup/image069.jpg)\n    ![img](images/setup/image071.jpg)\n  \n15.    Click \"Apply\". \n16.    Select the Keystroke feature and click \"Right Arrow\" (Ex: \"Keystroke\" has been selected).\n\t> Note:\n\t> The field \"Name\" contains user defined name to identify a particular Keystroke feature. This is required when editing any specific Keystroke feature programmatically, which is outside the scope of this tutorial. So we will keep the \"Name\" field empty.\n    ![img](images/setup/image073.jpg)\n  \n17. Enable the feature and change some parameters.\n  \n    ![img](images/setup/image075.jpg)\n  \n    ![img](images/setup/image077.jpg)\n  \n18. Click \"Apply\" and \"Finish\".\n  \n    ![img](images/setup/image079.jpg)\n  \n19.    Click \"Close\".  \n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    ![img](images/setup/image081.jpg)\n  \n20. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/setup/image083.jpg)\n   \n    ![img](images/setup/image085.jpg)   \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/setup/image087.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\" />\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/setup/image089.jpg)  \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n    \n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager that we will use throughout the code:  \n    \n        :::java\n        //Assign the profile name used in EMDKConfig.xml  \n        private String profileName = \"DataCaptureProfile\";  \n          \n        //Declare a variable to store ProfileManager object  \n        private ProfileManager mProfileManager = null;  \n          \n        //Declare a variable to store EMDKManager object  \n        private EMDKManager emdkManager = null;     \n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n        if(results.statusCode == STATUS_CODE.FAILURE)  \n        {  \n                //Failed to create EMDKManager object  \n                \n        }  \n\n    So far your code should look like:\n     \n     ![img](images/setup/image091.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. This must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `mProfileManager`. This is how we will interface with the APIs in the rest of the code:  \n\n        :::java\n        this.emdkManager = emdkManager;  \n        //Get the ProfileManager object to process the profiles  \n        mProfileManager = (ProfileManager) emdkManager.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:  \n\n        :::java\n        if(mProfileManager != null)  \n        {  \n            try{\n\n                String[] modifyData = new String[1];  \n                //Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.  \n             \n                EMDKResults results = mProfileManager.processProfile(profileName, ProfileManager.PROFILE_FLAG.SET, modifyData);  \n                 if(results.statusCode == STATUS_CODE.FAILURE)  \n                 {  \n                     //Failed to set profile  \n                 }  \n             }catch (Exception ex){\n                // Handle any exception\n            }\n\n        }  \n\n    Your onOpened method should now look like this:\n    \n    ![img](images/setup/image095.jpg)  \n    \n3. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/setup/image093.jpg)  \n\n4. Remove the default \"TextView\", inside \"res/layout/activity_main.xml\".\n\n5. Add an EditText Field in the UI called \"editTextBarcode\", inside \"res/layout/activity_main.xml\".\n    \n        :::xml\n        <EditText  \n            android:id=\"@+id/editTextBarcode\"  \n            android:layout_width=\"wrap_content\"  \n            android:layout_height=\"wrap_content\"  \n            android:layout_marginTop=\"200dp\"  \n            android:layout_marginLeft=\"50dp\"  \n            android:ems=\"10\" >  \n\n6. Connect the device (having the latest EMDK runtime) to USB port.\n    >Note:   \n    >Make sure the device is in USB debug.\n7. Run the application.\n  \n\t![img](images/setup/image103.png)\n  \n8. Press the trigger button and scan a barcode.\n9. The scanned data will be populated in the Edit Text field added to the UI.\n  \n\t![img](images/setup/image104.png)  \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. When using the \"Barcode\" feature in EMDK Wizard, the specified value for \"Scanner\" is not supported on the device, it will be considered as \"Auto\" during runtime (Ex: BT_LASER1, BT_IMAGER1 and BT_CAMERA1).\n3. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device. \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned the basics of an EMDK for Android application, the [next tutorial](#guide-tutorial-tutdatacaptureprofilePt2)</a> will show you how to use the [Intent Output](#guide-profiles-profileintent) feature of EMDK Profiles to handle Data Capture output programatically.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/EMDK-DataCapture-ProfileManagerTutorial.zip)."},{"key":"guide-tutorial-tutdatacaptureprofilePt2","name":" Using Intent Output With DataCapture Profiles","md":"# Using Intent Output With DataCapture Profiles\n## Developing an EMDK for Android Application Part 2\n\nThis tutorial will walk you through adding [Intent Output](#guide-profiles-profileintent) support to the EMDK For Android application you made using [Developing an EMDK for Android Application Part 1](#guide-tutorial-tutdatacaptureprofile). This tutorial will assume your project is at the state of the end of that tutorial and build on top of it. You can follow the tutorial in the previous step of download the source from the previous step and start from there.\n\nThe tutorial uses EMDK V 2.1 that has organized existing features as well as got some new features that would be discussed later in the tutorial.\n\n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android \n* Completion of [Developing an EMDK for Android Application Part 1](#guide-tutorial-tutdatacaptureprofile)\n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Adding Intents to the DataCapture Profile\n1. Select \"EMDKSample\" project from Package Explorer.    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/setup/image043.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/setup/image105.jpg)\n  \n4. select \"DataCaptureProfile\" and click \"Edit\".\n5. Select \"Intent\" from the list of \"Available Features\" and add it to \"Selected Features\".\n\n\t> Note: \n\t> The field \"Name\" contains user defined name to identify a particular Intent Output feature. This is required when editing any specific Intent Output feature programmatically, which is outside the scope of this tutorial. So we will keep the \"Name\" field empty.\n\n\t![img](images/setup/image106.jpg)\n  \n6. Select \"Intent\" from the list of \"Selected Features\". \n7. Now we will configure the \"Intent\" parameters.  \n\t* Switch \"Intent Output Enable\" to Enable\". \n\t* For \"Intent Output Action\" enter \"com.symbol.emdksample.RECVR\".\n\t* For \"Intent Output Category\" enter \"android.intent.category.DEFAULT\".\n\t* Switch \"Intent Output Delivery\" to \"Send via startActivity\".  \n\t* Switch \"Basic data formatting Enable\" to Enable\". \n\t* Switch \"Basic data formatting Send Data\" to Enable\". \t\n\n\tYour Intent configuration should now look like this:\n  \n\t![img](images/setup/image107.jpg)  \n\n7. Click \"Apply\" and \"Finish\".\n  \n    ![img](images/setup/image079.jpg)\n  \n8. Click \"Close\".  \n    >Note:  \n    >Now the \"EMDKConfig.xml\" under \"\\assets\" folder will be updated with your changes.\n\n##Adding the Intent Filter\n1. Open your application's \"Manifest.xml\" file.\n  \n\t![img](images/setup/image211.jpg)\n\n2. Make the following changes to your application's\"Manifest.xml\" file.  \n\n\tAdd the following parameter to your activity settings to enable \"singleTask\" mode.\n\t\n        :::xml\n        android:launchMode=\"singleTask\"  \n\t\n\tAdd the following lines to receive EMDK Intents in your application: \n\n        :::xml\n        <intent-filter>  \n                <action android:name=\"com.symbol.emdksample.RECVR\"/>  \n                <category android:name=\"android.intent.category.DEFAULT\"/>  \n        </intent-filter>     \n\n    When done, your manifest.xml should look like this:\n\n    ![img](images/setup/image108.jpg)  \n\n\t>Note:  \n\t>\n\t>* The intent action name should match the value of \"Intent Output Action\" in the EMDK Profile Manager. \n\t>* The intent category name should match the value of \"Intent Output Category\" in the EMDK Profile Manager.\n\n##Adding the Intent code\n1. Add the following imports to your program.\n\n        :::java\n        import android.content.Intent;  \n        import android.widget.TextView; \n\n\t![img](images/setup/image109.jpg)\n \n2. Add the following function to your program for processing intents. \n\n        :::java\n        //This function is responsible for getting the data from the intent  \n        private void handleDecodeData(Intent i)  \n        {  \n          \n        }\n     \n    ![img](images/setup/image110.jpg)\n \n3. Add the following code to your \"onCreate\" function check for a possible intent; \n\n        :::java\n        //In case we have been launched by the DataWedge intent plug-in  \n        Intent i = getIntent();  \n        handleDecodeData(i); \n\n    ![img](images/setup/image112.jpg)\n  \n4. Overide \"onNewIntent\" to handle incoming intents. \n\n        :::java\n        //We need to handle any incoming intents, so let override the onNewIntent method  \n        @Override  \n        public void onNewIntent(Intent i) {  \n                handleDecodeData(i);  \n           \n        } \n     \n    ![img](images/setup/image111.jpg)\n\n5. Add a TextView in the UI called \"textViewBarcode\", inside \"res/layout/activity_main.xml\".\n    \n        :::xml\n        <TextView  \n                android:id=\"@+id/textViewBarcode\"  \n            android:layout_width=\"wrap_content\"  \n            android:layout_height=\"wrap_content\"  \n            android:layout_alignParentTop=\"true\"  \n            android:layout_centerHorizontal=\"true\"  \n            android:layout_marginTop=\"50dp\"  \n            android:text=\"@+string/hello_world\"  \n            android:textAppearance=\"?android:attr/textAppearanceMedium\" />  \n\n\t![img](images/setup/image113.jpg)\n  \n6. Add a global variable for the TextView. \n \n        :::java\n        //Declare a variable to store the textViewBarcode  \n        private TextView textViewBarcode = null;\n\t\n\t![img](images/setup/image114.jpg)\n    \n7. Add the following code to your onCreate function to get a handle on the TextView.\n \n        :::java\n        //Get the textViewBarcode  \n        textViewBarcode = (TextView) findViewById(R.id.textViewBarcode); \n\n\t![img](images/setup/image115.jpg)\n   \n8. Add the following code to your \"handleDecodeData\" function to confirm the intent was meant for us. \n\n        :::java\n        //Check the intent action is for us  \n        if (i.getAction().contentEquals(\"com.symbol.emdksample.RECVR\") ) {  \n          \n        } \n    \n    ![img](images/setup/image116.jpg)   \n    \n9. Add the following code to your \"handleDecodeData\" function to check if the intent contains Barcode data.  \n\n        :::java\n        //Get the source of the data  \n        String source = i.getStringExtra(\"com.motorolasolutions.emdk.datawedge.source\");  \n          \n        //Check if the data has come from the Barcode scanner  \n        if(source.equalsIgnoreCase(\"scanner\"))  \n        {  \n          \n        }\n\n\t![img](images/setup/image117.jpg)\n   \n10. Add the following code to your \"handleDecodeData\" function to retrieve Barcode data.  \n\n        :::java\n        //Get the data from the intent  \n        String data = i.getStringExtra(\"com.motorolasolutions.emdk.datawedge.data_string\");  \n          \n        //Check that we have received data  \n        if(data != null && data.length() > 0)  \n        {  \n          \n        } \n\n\t![img](images/setup/image118.jpg)\n\n11. Add the following code to your \"handleDecodeData\" function to populate the TextView with the revived Barcode data.\n\n        :::java\n        //Display the data to the text view  \n        textViewBarcode.setText(\"Data = \" + data); \n\n\t![img](images/setup/image119.jpg)\n \n12. Connect the device (having the latest EMDK runtime) to USB port.\n    \n    >Note:   \n    >Make sure the device is in USB debug.\n\n13. Run the application.\n  \n\t![img](images/setup/image120.png)\n \n14. Press the trigger button and scan a Barcode.\n15. The scanned data will be populated in the Edit Text field Through the previous Keystroke Intent and will appear on the Text View using the new Datawedge Intent.\n   \n\t![img](images/setup/image121.png) \n\n\n## What's Next\nThe [next tutorial](#guide-tutorial-tutdatacaptureprofilePt3) will show you how to use multiple Data Capture Profiles that are handled by multiple activities.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/EMDK-DataCaptureProfiles-Using+Intent+Output.zip)."},{"key":"guide-tutorial-tutdatacaptureprofilePt3","name":" Using Multiple Data Capture Profiles","md":"# Using Multiple Data Capture Profiles\n## Developing an EMDK for Android Application Part 3\n\nThis guide will walk you through adding MSR support and multiple profiles to the Android application you made using [Developing an EMDK for Android Application Part 2](#guide-tutorial-tutdatacaptureprofilept2). This tutorial will add some more complexity by adding a second screen as well as adding a second Data Capture Profile.\n\n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android \n* Completion of [Developing an EMDK for Android Application Part 1](#guide-tutorial-tutdatacaptureprofile)\n* Completion of [Developing an EMDK for Android Application Part 2](#guide-tutorial-tutdatacaptureprofilePt2)\n \nFor more information about setting up the EMDK please see the EMDK [Setup](#guide-setup).\n\n##Adding MSR Activity\nLet's start by defining a second activity for the application. This activity will be used to to activate a Data Capture profile that listens for MSR data.\n\n1. Select \"EMDKSample\" from \"Package Explorer\" in Eclipse.\n  \n    ![img](images/setup/image122.jpg)\n  \n2. Right Click and select \"New\" -> \"Other\".\n  \n    ![img](images/setup/image123.jpg)\n  \n3. Select \"Android\" -> \"Android Activity\" and click \"Next\".\n  \n    ![img](images/setup/image124.jpg)\n  \n4. Select \"Empty Activity\" and click \"Next\".\n  \n    ![img](images/setup/image125.jpg)\n  \n5. Change \"Activity name\" to \"MSRActivity\" and click \"Finish\".\n  \n    ![img](images/setup/image126.jpg)  \n\n##Adding MSR Completed Activity\nNext let's create a third activity that will listen for the MSR data and display the data to the user.\n\n1. Select \"EMDKSample\" from \"Package Explorer\" in Eclipse.\n  \n    ![img](images/setup/image122.jpg)\n  \n2. Right Click and select \"New\" -> \"Other\".\n  \n    ![img](images/setup/image123.jpg)\n  \n3. Select \"Android\" -> \"Android Activity\" and click \"Next\".\n  \n    ![img](images/setup/image124.jpg)\n  \n4. Select \"Empty Activity\" and click \"Next\".\n  \n    ![img](images/setup/image125.jpg)\n  \n5. Change \"Activity name\" to \"MSRCompletedActivity\" and click \"Finish\".\n  \n    ![img](images/setup/image127.jpg)  \n\n##Updating Main Activity\nNow we will update \"MainActivity\", adding a button to launch our \"MSRActivity\".\n\n1. Select \"activity_main.xml\" from \"Package Explorer\" in Eclipse.\n  \n\t![img](images/setup/image128.jpg)\n  \n2. Add the following Button to \"activity_main.xml\". This Button will be used for opening \"MSRActivity\".  \n\t\n        :::xml\n        <Button  \n        android:id=\"@+id/buttonMSR\"  \n        android:layout_width=\"wrap_content\"  \n        android:layout_height=\"wrap_content\"  \n        android:layout_alignParentBottom=\"true\"  \n        android:layout_marginBottom=\"50dp\"  \n        android:layout_marginLeft=\"50dp\"  \n        android:text=\"MSR\" />\n\n\t![img](images/setup/image129.jpg)\n  \n3. Select \"MainActivity.java\" from \"Package Explorer\" in Eclipse. \n\n\t![img](images/setup/image130.jpg)\n \n4. Add the following Imports to \"MainActivity.java\".  \n\t\n        :::java\n        import android.widget.Button;  \n        import android.view.View;  \n        import android.view.View.OnClickListener; \n\n\t![img](images/setup/image131.jpg)\n  \n5. Declare a variable inside \"MainActivity\" to store \"buttonMSR\". \n\t\n        :::java\n        //Declare a variable to store the buttonMSR  \n        private Button buttonMSR = null;  \n\n\t![img](images/setup/image132.jpg)\n  \n6. Inside \"onCreate\" get a reference to \"buttonMSR\".\n\t\n        :::java\n        //Declare a variable to store the buttonMSR  \n        private Button buttonMSR = null; \n\n\t![img](images/setup/image133.jpg)\n  \n7. Inside \"onCreate\" add an \"OnClickListener\" for \"buttonMSR\".  \n\t\n        :::java\n        //Add an OnClickListener for buttonMSR  \n        buttonMSR.setOnClickListener(buttonMSROnClick);     \n\n\t![img](images/setup/image134.jpg)  \n\n8. Add a new \"OnClickListener\" inside \"MainActivity\". \n\n        :::java\n        //OnClickListener for buttonMSR  \n        private OnClickListener buttonMSROnClick = new OnClickListener() {  \n            public void onClick(View v) {  \n          \n            }  \n        };  \n\n\t![img](images/setup/image135.jpg)\n  \n9. Add the following code to \"onClick\" to launch \"MSRActivity\". \n\n        :::java\n        //Launch MSRActivity  \n        Intent myIntent = new Intent(MainActivity.this, MSRActivity.class);  \n        startActivity(myIntent);  \n\n\t![img](images/setup/image136.jpg) \n\n##Creating MSR UI\nNext we will create the UI for \"MSRActivity\". \n\n1. Select \"activity_msr.xml\" from \"Package Explorer\" in Eclipse.\n  \n\t![img](images/setup/image137.jpg)\n \n2. Remove the default \"TextView\". \n3. Add the following TextView. \n\n        :::xml\n        <TextView  \n            android:id=\"@+id/textViewInfo\"  \n            android:layout_width=\"wrap_content\"  \n            android:layout_height=\"wrap_content\"  \n            android:layout_alignParentTop=\"true\"  \n            android:layout_centerHorizontal=\"true\"  \n            android:layout_marginTop=\"50dp\"  \n            android:text=\"Please swipe a card to continue.\"  \n            android:textAppearance=\"?android:attr/textAppearanceLarge\" /> \n\n\t![img](images/setup/image138.jpg) \n\n##Creating our MSR Profile\nNext we will create a Data Capture profile that will activate the MSR on \"MSRActivity\" and send the data via a startActivity Intent to \"MSRCompletedActivity\".  \n\n1. Select \"EMDKSample\" project from Package Explorer.    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](https://launchpad-images.s3-us-west-1.amazonaws.com/emdk/setup/image043.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/setup/image139.jpg)\n  \n4. click \"Create\".\n  \n    ![img](images/setup/image140.jpg)\n  \n5. Enter the Profile Name \"DataCaptureProfileMSR\" and click \"Create\".\n  \n    ![img](images/setup/image141.jpg)\n  \n6. select \"ActivitySelection\" from the list of \"Available Features\" and add it to \"Selected Features\" using the arrow.\n\n\t> Note: \n\t> The field \"Name\" contains user defined name to identify a particular feature. This is required when editing any specific feature programmatically, which is outside the scope of this tutorial. So we will keep the \"Name\" field empty.\n  \n    ![img](images/setup/image142.jpg)\n  \n7. Select \"Activity Selection\".\n  \n    ![img](images/setup/image143.jpg)\n  \n8. Enter \"com.symbol.emdksample\" as the application name and click apply.\n  \n    ![img](images/setup/image144.jpg)\n  \n9. Enter \"MSRActivity\" as the activity name and click apply.\n  \n    ![img](images/setup/image145.jpg)  \t\n\n10. Click Okay.  \n11. select \"MSR\" from the list of \"Available Features\" and add it to \"Selected Features\" using the arrow.\n\n\t> Note: \n\t> The field \"Name\" contains user defined name to identify a particular Data Input MSR feature. This is required when editing any specific Data Input MSR feature programmatically, which is outside the scope of this tutorial. So we will keep the \"Name\" field empty.\n \n    ![img](images/setup/image146.jpg)  \t\n\n12. Change \"MSR Input Enable\" to \"Enable\".\n  \n\t![img](images/setup/image147.jpg)\n \n13. select \"Intent\" from the list of \"Available Features\" and add it to \"Selected Features\" using the arrow.\n \n\t![img](images/setup/image148.jpg)\n \n14. Now we will configure the \"Intent\" parameters.  \n\t* Switch \"Intent Output Enable\" to Enable\". \n\t* For \"Intent Output Action\" enter \"com.symbol.emdksample.RECVRMSR\".\n\t* For \"Intent Output Category\" enter \"android.intent.category.DEFAULT\".\n\t* Switch \"Intent Output Delivery\" to \"Send via startActivity\".  \n\t* Switch \"Basic data formatting Enable\" to Enable\". \n\t* Switch \"Basic data formatting Send Data\" to Enable\". \t\n\n\tYour Intent configuration should now look like this:\n  \n\t![img](images/setup/image149.jpg)  \n\n15. Click \"Apply\" and \"Finish\".\n  \n    ![img](images/setup/image150.jpg)\n  \n16. Click \"Close\".  \n    >Note:  \n    >Now the \"EMDKConfig.xml\" file under the \"\\assets\" folder will be updated with your changes.\n\n##Adding the MSR Intent Filter\nNow will add an Intent filter to our Manifest file to allow \"MSRCompletedActivity\" to listen for our new Data Capture Intent. \n\n1. Open your application's \"Manifest.xml\" file.\n  \n\t![img](images/setup/image151.jpg)\n\n2. Add the following configuration to the activity \"com.symbol.emdksample.MSRCompletedActivity\" to revive our MSR intent.  \n\n        :::xml\t \n        <intent-filter>  \n                <action android:name=\"com.symbol.emdksample.RECVRMSR\"/>  \n                <category android:name=\"android.intent.category.DEFAULT\"/>  \n        </intent-filter>  \n\n    When done, your manifest.xml should look like this:\n\n    ![img](images/setup/image152.jpg)  \n\n\t>Note:  \n\t>\n\t>* The intent action name should match the value of \"Intent Output Action\" in the EMDK Profile Manager. \n\t>* The intent category name should match the value of \"Intent Output Category\" in the EMDK Profile Manager.\n\n##Registering the MSR EMDK profile\nNext we will register our new Data Capture profile from \"MainActivity\".\n\n1. Select \"MainActivity.java\" from \"Package Explorer\" in Eclipse. \n\n\t![img](images/setup/image153.jpg)\n \n2. Inside \"MainActivity\" add the following code to hold the name of our MSR profile.  \n\n        :::java\n        //Assign the profile name used in EMDKConfig.xml  for MSR handling  \n        private String profileNameMSR = \"DataCaptureProfileMSR\";  \n\n    ![img](images/setup/image154.jpg)\n  \n3. Inside \"onOpened\" add the following code to register the MSR EMDK profile. \n\n        :::java\n        //Call processPrfoile for profile MSR  \n        results = mProfileManager.processProfile(profileNameMSR, ProfileManager.PROFILE_FLAG.SET, modifyData);  \n          \n        if(results.statusCode == STATUS_CODE.FAILURE)  \n        {  \n        //Failed to set profile MSR  \n        }  \n\n    ![img](images/setup/image155.jpg)  \n\n##Creating MSR Completed UI\nNow we will create the UI for \"MSRCompletedActivity\". This UI will allow us to display the MSR data to the user.\n\n1. Select \"activity_msr.xml\" from \"Package Explorer\" in Eclipse.  \n\t![img](images/setup/image156.jpg)\n \n2. Remove the default \"TextView\". \n3. Add the following TextView. \n\n\t    :::xml\n    \t<TextView  \n        android:id=\"@+id/textViewMSRData\"  \n        android:layout_width=\"wrap_content\"  \n        android:layout_height=\"wrap_content\"  \n        android:layout_alignParentTop=\"true\"  \n        android:layout_centerHorizontal=\"true\"  \n        android:layout_marginTop=\"50dp\"  \n        android:text=\"Data = \"  \n        android:textAppearance=\"?android:attr/textAppearanceMedium\" />  \n\n\t![img](images/setup/image157.jpg) \n\n##Handling MSR Intents\nNext will will add the code to \"MSRCompletedActivity\" for capturing the startActivity Intent and displaying the result data to the user. \n\n1. Select \"MSRCompletedActivity.java\" from \"Package Explorer\" in Eclipse. \n\n\t![img](images/setup/image158.jpg)\n \n2. Add the following imports.  \n\n        :::java\n        import android.content.Intent;  \n        import android.widget.TextView; \n\n\t![img](images/setup/image159.jpg)\n  \n3. Add the following function for processing intents.  \n\n        :::java\n        //This function is responsible for getting the data from the intent  \n        private void handleDecodeData(Intent i)  \n        {  \n          \n        }  \n     \n    ![img](images/setup/image160.jpg)\n  \n4. Add the following code to your \"onCreate\" function to check for a possible intent;  \n\n        :::java\n        //In case we have been launched by the DataWedge intent plug-in  \n        Intent i = getIntent();  \n        handleDecodeData(i);\n     \n    ![img](images/setup/image161.jpg)\n  \n5. Overide \"onNewIntent\" to handle incoming intents.  \n\n        :::java\n        //We need to handle any incoming intents, so let override the onNewIntent method  \n        @Override  \n        public void onNewIntent(Intent i) {  \n            handleDecodeData(i);  \n           \n        }\n     \n    ![img](images/setup/image162.jpg)\n  \n6. Add a global variable for the TextView. \n\n        :::java\n        //Declare a variable to store the textViewMSRData  \n        private TextView textViewMSRData = null; \n\t\n\t![img](images/setup/image163.jpg)\n  \n7. Add the following code to your onCreate function to get a handle on the TextView.\n \n        :::java\n        //Get the textViewBarcode  \n        textViewMSRData = (TextView) findViewById(R.id.textViewMSRData); \n\n\t![img](images/setup/image164.jpg)\n   \n8. Add the following code to your \"handleDecodeData\" function to confirm the intent was meant for us. \n\n        :::java\n        //Check the intent action is for us  \n        if (i.getAction().contentEquals(\"com.symbol.emdksample.RECVRMSR\"))  \n        {  \n          \n        }\n    \n    ![img](images/setup/image165.jpg)\n   \n9. Add the following code to your \"handleDecodeData\" function to check if the intent contains MSR data.  \n\n        :::java\n        //Get the source of the data  \n        String source = i.getStringExtra(\"com.motorolasolutions.emdk.datawedge.source\");  \n          \n             \n        //Check if the data has come from the msr  \n        if(source.equalsIgnoreCase(\"msr\"))  \n        {  \n          \n        }  \n\n\t![img](images/setup/image166.jpg)\n  \n10. Add the following code to your \"handleDecodeData\" function to retrieve MSR data.  \n\n        :::java\n        //Get the data from the intent  \n        String data = i.getStringExtra(\"com.motorolasolutions.emdk.datawedge.data_string\");  \n          \n        //Check that we have received data  \n        if(data != null && data.length() > 0)  \n        {  \n          \n        }\n\n\t![img](images/setup/image167.jpg)\n\n11. Add the following code to your \"handleDecodeData\" function to populate the TextView with the revived MSR data.\n\n        :::java\n        //Display the data to textViewMSRData  \n        textViewMSRData.setText(\"Data = \" + data);  \n\n\t![img](images/setup/image168.jpg) \n\n##Running the Application\nLastly we will run and test our application. \n\n1. Connect the device (having the latest EMDK runtime) to USB port.\n\n    >Note:   \n    >Make sure the device is in USB debug.\n\n2. Run the application.  \n\n\t![img](images/setup/image169.png)\n \n3. Press the trigger button and scan a Barcode. \n4. Like before the scanned data will be populated in the Edit Text field Through the previous Keystroke Intent and will appear on the Text View using the previous Datawedge Intent.   \n\n\t![img](images/setup/image170.png)\n \n5. Press the button \"MSR\".  \n\n\t![img](images/setup/image171.png)\n\n6. Swipe a cad through the MSR.  \n\n\t![img](images/setup/image172.png)\n\n7. Press return to go back to the MSR where you can swipe another card, or hit return again to go back to the main screen. \n\n## What's Next\nThe [next tutorial](#guide-tutorial-tutdatacaptureprofilePt4) will show you how to use the Intent Output as a Broadcast instead of starting an activity.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/EMDK-UsingMultipleDataCaptureProfiles.zip)."},{"key":"guide-tutorial-tutdatacaptureprofilePt4","name":" Using Broadcast Intent in DataCapture Profiles","md":"# Using Broadcast Intent in DataCapture Profiles\n## Developing an EMDK for Android Application Part 4\n\nThis guide will walk you through adding broadcast intent support to the Android application you made using [Developing an EMDK for Android Application Part 3](#guide-tutorial-tutdatacaptureprofilept3).\n\n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android \n* Completion of [Developing an EMDK for Android Application Part 1](#guide-tutorial-tutdatacaptureprofile)\n* Completion of [Developing an EMDK for Android Application Part 2](#guide-tutorial-tutdatacaptureprofilePt2)\n* Completion of [Developing an EMDK for Android Application Part 3](#guide-tutorial-tutdatacaptureprofilePt3)\n \nFor more information about setting up the EMDK please see the EMDK [Setup](#guide-setup).\n\n##Using EMDK Wizard and EMDK for Android Broadcast Intents.\n\n###Adding Broadcast Intent Activity\nFirst we will add a new activity that will be used for listening and displaying Barcode data to the user. \n\n1. Select \"EMDKSample\" from \"Package Explorer\" in Eclipse.  \n    ![img](images/setup/image122.jpg)  \n2. Right Click and select \"New\" -> \"Other\".  \n    ![img](images/setup/image123.jpg)  \n3. Select \"Android\" -> \"Android Activity\" and click \"Next\".  \n    ![img](images/setup/image124.jpg)  \n4. Select \"Empty Activity\" and click \"Next\".  \n    ![img](images/setup/image125.jpg)  \n5. Change \"Activity name\" to \"BroadcastIntentActivity\" and click \"Finish\".  \n    ![img](images/setup/image169.jpg)  \n\n###Updating Main Activity\nNext we will update \"MainActivity\", adding a button to launch our \"BroadcastIntentActivity\".\n\n1. Select \"activity_main.xml\" from \"Package Explorer\" in Eclipse.  \n\t![img](images/setup/image170.jpg)  \n2. Add the following Button to \"activity_main.xml\". This Button will be used for opening \"BroadcastIntentActivity\".  \n\n\t\t:::xml\n\t\t<Button  \n\t\t     \n\t\t    android:id=\"@+id/buttonBroadcastIntent\"  \n\t\t    android:layout_width=\"wrap_content\"  \n\t\t    android:layout_height=\"wrap_content\"  \n\t\t    android:layout_alignParentBottom=\"true\"  \n\t\t    android:layout_marginBottom=\"50dp\"  \n\t\t    android:layout_marginLeft=\"120dp\"  \n\t\t    android:text=\"Broadcast Intent\" \" /> \n\n\t![img](images/setup/image171.jpg)  \n3. Select \"MainActivity.java\" from \"Package Explorer\" in Eclipse. \n\n\t![img](images/setup/image172.jpg) \n4. Declare a variable inside \"MainActivity\" to store \"buttonBroadcastIntent\". \n\n\t\t:::java\n\t\t//Declare a variable to store the buttonBroadcastIntent  \n\t\tprivate Button buttonBroadcastIntent = null;  \n\n\t![img](images/setup/image173.jpg)  \n5. Inside \"onCreate\" get a reference to \"buttonBroadcastIntent\".\n\n\t\t:::java\n\t\t//Get the buttonBroadcastIntent  \n\t\tbuttonBroadcastIntent = (Button) findViewById(R.id.buttonBroadcastIntent); \n\n\t![img](images/setup/image174.jpg)  \n6. Inside \"onCreate\" add an \"OnClickListener\" for \"buttonMSR\".  \n\n\t\t:::java\n\t\t//Add an OnClickListener for buttonBroadcastIntent  \n\t\tbuttonBroadcastIntent.setOnClickListener(buttonBroadcastIntentOnClick);  \n\n\t![img](images/setup/image175.jpg)  \n7. Add a new \"OnClickListener\" inside \"MainActivity\".  \n\n\t\t:::java\n\t\t//OnClickListener for buttonBroadcastIntent  \n\t\tprivate OnClickListener buttonBroadcastIntentOnClick = new OnClickListener() {  \n\t\t    public void onClick(View v) {  \n\t\t  \n\t\t    }  \n\t\t};  \n\n\t![img](images/setup/image176.jpg)  \n8. Add the following code to \"onClick\" to launch \"BroadcastIntentActivity\". \n\n\t\t:::java\n\t\t//Launch BroadcastIntentActivity  \n\t\tIntent myIntent = new Intent(MainActivity.this, BroadcastIntentActivity.class);  \n\t\tstartActivity(myIntent);  \n\n\t![img](images/setup/image177.jpg) \n\n###Creating Broadcast Intent UI\nThen we will create the UI for displaying Barcode data to the user. \n\n1. Select \"activity_msr.xml\" from \"Package Explorer\" in Eclipse.  \n\n\t![img](images/setup/image178.jpg) \n2. Remove the default \"TextView\". \n3. Add the following TextView. \n\n\t\t:::xml\n\t\t<TextView  \n\t\t    android:id=\"@+id/textViewData\"  \n\t\t    android:layout_width=\"wrap_content\"  \n\t\t    android:layout_height=\"wrap_content\"  \n\t\t    android:layout_alignParentTop=\"true\"  \n\t\t    android:layout_centerHorizontal=\"true\"  \n\t\t    android:layout_marginTop=\"50dp\"  \n\t\t    android:text=\"Please Scan a Barcode.\"  \n\t\t    android:textAppearance=\"?android:attr/textAppearanceMedium\" />  \n\n\t![img](images/setup/image179.jpg) \n\n###Creating our Broadcast Intent Profile\nNext will will create a Data Capture profile that will be active on \"BroadcastIntentActivity\" and send Barcode data using a Broadcast Intent. \n\n1. Select \"EMDKSample\" project from Package Explorer.    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/setup/image043.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/setup/image180.jpg)\n  \n4. click \"Create\".\n  \n    ![img](images/setup/image181.jpg)\n  \n5. Enter the Profile Name \"DataCaptureProfileBroadcastIntent\" and click \"Create\".\n  \n    ![img](images/setup/image182.jpg)\n  \n6. select \"ActivitySelection\" from the list of \"Available Features\" and add it to \"Selected Features\" using the arrow.\n\n\t> Note: \n\t> The field \"Name\" contains user defined name to identify a particular feature. This is required when editing any specific feature programmatically, which is outside the scope of this tutorial. So we will keep the \"Name\" field empty.\n  \n    ![img](images/setup/image142.jpg)\n  \n7. Select \"Activity Selection\".\n  \n    ![img](images/setup/image143.jpg)\n  \n8. Enter \"com.symbol.emdksample\" as the application name and click apply.\n  \n    ![img](images/setup/image144.jpg)\n  \n9. Enter \"BroadcastIntentActivity\" as the activity name and click apply.\n  \n    ![img](images/setup/image183.jpg)  \t\n\n10. Click Okay.  \n11. select \"Barcode\" from the list of \"Available Features\" and add it to \"Selected Features\" using the arrow.\n \n    ![img](images/setup/image184.jpg)  \t\n\n12. Change \"Barcode Scanner Input Enable\" to \"Enable\".\n\n\t> Note: \n\t> The field \"Name\" contains user defined name to identify a particular Barcode Scanner Input feature. This is required when editing any specific Barcode Scanner Input feature programmatically, which is outside the scope of this tutorial. So we will keep the \"Name\" field empty.\n  \n\t![img](images/setup/image185.jpg)\n  \n13. select \"Intent\" from the list of \"Available Features\" and add it to \"Selected Features\" using the arrow. \n\n\t![img](images/setup/image186.jpg)\n \n14. Now we will configure the \"Intent\" parameters.  \n\t* Switch \"Intent Output Enable\" to Enable\". \n\t* For \"Intent Output Action\" enter \"com.symbol.emdksample.RECVRBI\".\n\t* Switch \"Intent Output Delivery\" to \"Broadcast Intent\".  \n\t* Switch \"Basic data formatting Enable\" to Enable\". \n\t* Switch \"Basic data formatting Send Data\" to Enable\". \t\n\n\tYour Intent configuration should now look like this:\n  \n\t![img](images/setup/image187.jpg)  \n\n15. Click \"Apply\" and \"Finish\".\n  \n    ![img](images/setup/image188.jpg)\n  \n16. Click \"Close\".  \n    >Note:  \n    >Now the \"EMDKConfig.xml\" file under the \"\\assets\" folder will be updated with your changes.\n\n###Registering for the Broadcast Intent profile\nNow will register our new Data Capture profile in \"MainActivity\".\n\n1. Select \"MainActivity.java\" from \"Package Explorer\" in Eclipse. \n\n\t![img](images/setup/image189.jpg)\n \n2. Inside \"MainActivity\" add the following code to hold the name of our Broadcast Intent profile.  \n\n\t\t:::java\n\t\t//Assign the profile name used in EMDKConfig.xml  for Broadcast Intent handling  \n\t\tprivate String profileNameBroadcastIntent = \"DataCaptureProfileBroadcastIntent\";\n\t\n    ![img](images/setup/image190.jpg)\n  \n3. Inside \"onOpened\" add the following code to register the Broadcast Intent EMDK profile. \n\n\t\t:::java\n\t\t//Call processPrfoile for profile Broadcast Intent.  \n\t\tresults = mProfileManager.processProfile(profileNameBroadcastIntent, ProfileManager.PROFILE_FLAG.SET, modifyData);  \n\t\t  \n\t\tif(results.statusCode == STATUS_CODE.FAILURE)  \n\t\t{  \n\t\t//Failed to set profile  \n\t\t}  \n\n    ![img](images/setup/image191.jpg)  \n\n###Handling Broadcast Intents\nNewt we will add the code to listen for our Broadcast Intent and display the Barcode data to the user in side \"BroadcastIntentActivity\". \n\n1. Select \"BroadcastIntentActivity.java\" from \"Package Explorer\" in Eclipse. \n\n\t![img](images/setup/image192.jpg)\n  \n2. Add the following imports.  \n\n\t\t:::java\n\t\timport android.content.BroadcastReceiver;  \n\t\timport android.content.Context;  \n\t\timport android.content.Intent;  \n\t\timport android.content.IntentFilter;  \n\t\timport android.widget.TextView;  \n\n\t![img](images/setup/image193.jpg)\n  \n3. Add a global variable for the TextView. \n\n\t\t:::java\n\t\t//Declare a variable to store the textViewData  \n\t\tprivate TextView textViewData = null;  \n\t\n\t![img](images/setup/image194.jpg)\n\n4. Add the following code to your onCreate function to get a handle on the TextView.\n\n\t\t:::java\n\t\t//Get the textViewData  \n\t\ttextViewData = (TextView) findViewById(R.id.textViewData);  \n\n\t![img](images/setup/image195.jpg)\n  \n5. Add a global variable to BroadcastIntentActivity to hold our Broadcast Receiver.\n\n\t\t:::java\n\t\t//Declare a variable to store our Broadcast Receiver.  \n\t\tprivate BroadcastReceiver EMDKReceiver;  \n     \n    ![img](images/setup/image196.jpg)\n  \n6. Override \"onResume\".  \n\n\t\t:::java\n\t\t@Override  \n\t\tprotected void onResume() {  \n\t\t// TODO Auto-generated method stub  \n\t\t    super.onResume();  \n\t\t} \n\n    ![img](images/setup/image197.jpg)  \n7. Override \"onPause\".  \n\n\t\t:::java\n\t\t@Override  \n\t\tprotected void onPause() {  \n\t\t    // TODO Auto-generated method stub  \n\t\t    super.onPause();  \n\t\t} \n\n    ![img](images/setup/image198.jpg)\n   \n8. Add the following code to \"onResume\" to create an Intent filter.  \n\n\t\t:::java\n\t\t//Create an Intent Filter  \n\t\tIntentFilter intentFilter = new IntentFilter(\"com.symbol.emdksample.RECVRBI\");\n\n\t![img](images/setup/image199.jpg)\n \n9. Add the following code to \"onResume\" to create a Broadcast Receiver.  \n\n\t\t:::java\n\t\t//Create a our Broadcast Receiver.  \n\t\tEMDKReceiver = new BroadcastReceiver() {  \n\t\t  \n\t\t};  \n\n\t![img](images/setup/image200.jpg)\n   \n10. Override \"onReceive\" inside the Broadcast Receiver.  \n\n\t\t:::java\n\t\t@Override  \n\t\tpublic void onReceive(Context context, Intent intent) {  \n\t\t  \n\t\t} \n\n\t![img](images/setup/image201.jpg)\n  \n11. Add the following code to \"onReceive\" to check if the data is coming from the Barcode scanner.  \n\n\t\t:::java\n\t\t//Get the source of the data  \n\t\tString source = intent.getStringExtra(\"com.motorolasolutions.emdk.datawedge.source\");  \n\t\t  \n\t\t//Check if the data has come from the barcode scanner  \n\t\tif(source.equalsIgnoreCase(\"scanner\")){  \n\t\t  \n\t\t} \n\n\t![img](images/setup/image202.jpg)\n  \n12. Add the following code to get the data from the intent.  \n\n\t\t:::java\n\t\t//Get the data from the intent  \n\t\tString data = intent.getStringExtra(\"com.motorolasolutions.emdk.datawedge.data_string\");  \n\t\t  \n\t\t//Check that we have received data  \n\t\tif(data != null && data.length() > 0){  \n\t\t  \n\t\t}\n\n\t![img](images/setup/image203.jpg)\n  \n13. Add the following code to display the data to the TextView.  \n\n\t\t:::java\n\t\t//Display the data to the text view  \n\t\ttextViewData.setText(\"Data = \" + data);  \n\n\t![img](images/setup/image204.jpg)\n  \n14. Add the following code to \"onResume\" to register our receiver.  \n\n\t\t:::java\n\t\t//Register our receiver.\n\t\tthis.registerReceiver(EMDKReceiver, intentFilter);\n\n\t![img](images/setup/image205.jpg)\n  \n15. Add the following code to \"onPause\" to unregister our receiver.  \n\n\t\t:::java\n\t\t//Register our receiver.\n\t\tthis.registerReceiver(EMDKReceiver, intentFilter);\n\n\t![img](images/setup/image206.jpg)  \n\n###Running the Application###\nLastly we will run and test our application. \n\n1. Connect the device (having the latest EMDK runtime) to USB port.\n\n    >Note:   \n    >Make sure the device is in USB debug.\n\n2. Run the application.  \n\n\t![img](images/setup/image207.png)\n  \n3. Press the trigger button and scan a Barcode.  \n\n\t![img](images/setup/image208.png)\n  \n4. Like before the scanned data will be populated in the Edit Text field Through the previous Keystroke Intent and will appear on the TextView using the previous Datawedge Intent.   \n5. Press the button \"Broadcast Intent\".  \n\n\t![img](images/setup/image209.png)\n  \n6. Scan a Barcode.  \n\n\t![img](images/setup/image210.png)\n  \n8. The TextView will be populated by the Broadcast Intent.\n7. Press the back button to rerun to the main screen.  \n\n\t![img](images/setup/image208.png)\n  \n9. Press the button \"MSR\", like before the MSR screen will come up.  \n\n\t![img](images/setup/image171.png)\n\n10. Swipe a cad through the MSR.  \n\n\t![img](images/setup/image172.png)\n\n11. Press return to go back to the MSR where you can swipe another card, or hit return again to go back to the main screen. \n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/EMDK-UsingBroadcastIntentinDataCaptureProfiles.zip)."},{"key":"guide-tutorial-tutModifyBarcodeProfileSettings","name":" Modifying Profiles With ProfileConfig API","md":"# Modifying Profiles With ProfileConfig API\n\n## Overview\nThis guide will walk you through creating an EMDK For Android application that will make use [Profile Config](#api-ProfileConfig) object to modify Profile Settings programatically in order to get barcode data into your application using the [KeyStroke output](#guide-profiles-profilekeystroke) feature of [EMDK Profiles](#guide-profiles-usingwizard).\n\n###Prerequisites###\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android 2.0 and above\n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.Create new Android Application project.\n  \n![img](images/modify_profile_settings_images/create_android_project.jpg)\n\n2.Assign names for the application and package. \n\n3.Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n![img](images/modify_profile_settings_images/provide_project_name.jpg)\n\n4.Click \"Next\".  \n\n![img](images/modify_profile_settings_images/configure_project.jpg)  \n\n5.Click \"Next\".  \n\n![img](images/modify_profile_settings_images/configure_launcher_icon.jpg) \n \n6.Click \"Next\".  \n7.Select \"Empty Activity\" Click \"Next\".  \n\n![img](images/modify_profile_settings_images/create_activity.jpg)  \n\n   >Note :  \n   >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n8.Click \"Next\".  \n\n![img](images/modify_profile_settings_images/empty_activity.jpg)  \n\n9.Click \"Finish\".\n\n   >Note:  \n   >Currently there is nothing under \"\\assets\" folder.  \n    \n![img](images/modify_profile_settings_images/main_activity.jpg)  \n\n## Enabling the EMDK\n1.Select the project.  \n2.Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n![img](images/modify_profile_settings_images/project_propertiies_button1.jpg)   \n\n![img](images/modify_profile_settings_images/project_propertiies_button2.jpg)\n   \n3.Click \"Android\" from the left pane. \n \n![img](images/modify_profile_settings_images/project_properties.jpg) \n\n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5.Click \"Apply\" and \"OK\".  \n   >Note:  \n   >The EMDK library will be \n   >added to the project.  \n    \n![img](images/modify_profile_settings_images/emdk_library_added.jpg) \n\n   >Note:\n   >If you are using Java 1.7 as the compiler, you may see this error\n    \n![img](images/modify_profile_settings_images/java_compiler_error.jpg) \n\n   > To correct this, you will need to change the compiler to use 1.6\n    \n   > * Click on the Java Compiler\n   > * Click Enable project specific settings\n   > * Select 1.6 for Compiler compliance level\n    \n![img](images/modify_profile_settings_images/change_java_compiler_settings.jpg) \n\n## Adding a DataCapture Profile\n1.Select \"ModifyBarcodeProfileTutorial\" project from Package Explorer.    \n2.Click \"EMDK\" menu and select \"Profile Manager\".\n  \n![img](images/modify_profile_settings_images/emdk_manager_button.jpg)\n  \n3.The EMDK Profile Manager Window will appear.\n  \n![img](images/modify_profile_settings_images/profile_manager_create.jpg) \n \n4.Click \"Create\" and assign a name for the profile (Ex: ModifyBarcodeProfile).\n  \n![img](images/modify_profile_settings_images/create_new_profile.jpg)\n  \n5.Click \"Create\". The Profile Editor window will appear.\n\nThe Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Clock Manager, Wireless Manager, Access Manager etc.) for configuring your Symbol device based on requirements.\n \n  \n![img](images/modify_profile_settings_images/profile_editor.jpg)\n  \n6.Select any feature from the list and click \"Right Arrow\" (Ex: \"ActivitySelection\" has been selected. By using this feature Activities can be associated with the application. Then the data capture feature will be enabled automatically when the specified activity is in foreground).\n  \n![img](images/modify_profile_settings_images/activity_selection.jpg)\n  \n7.Provide the name to identify each feature (Ex: DataCaptureActivity). This is required while editing features programatically.  \n\n![img](images/modify_profile_settings_images/activity_selection_parameters.jpg)\n  \n8.Click \"ActivitySelection\" under parameters.  \n\n![img](images/modify_profile_settings_images/activity_selection_parameter_package_name.jpg)  \n\n9.Specify the applications package name and click \"Apply\".  \n\n![img](images/modify_profile_settings_images/activity_selection_parameter_activity_name.jpg) \n \n10.Specify an Activity inside the application and click \"Apply\".  \n\n![img](images/modify_profile_settings_images/activity_selection_done.jpg)  \n\n11.Click \"OK\".  \n12.Select any data capture feature and click Right Arrow (Ex: \"Barcode\" has been selected).\n  \n![img](images/modify_profile_settings_images/barcode.jpg)\n  \n13.Click on the \"Barcode\" feature in the \"Data Input\" section. The parameter list will be populated. \n \n![img](images/modify_profile_settings_images/barcode_profile_editor.jpg)\n  \n14.Provide name to Barcode Scanner Input so as to modify it programatically (Ex: DataInputBarcode). Enable the feature and change some parameters.\n  \n![img](images/modify_profile_settings_images/barcode_select_scanner_type.jpg)\n  \n![img](images/modify_profile_settings_images/barcode_select_decoders.jpg)\n  \n15.Click \"Apply\". \n\n16.Select the Keystroke feature in the \"Data Delivery\" section and click \"Right Arrow\" (Ex: \"Keystroke\" has been selected).\n  \n![img](images/modify_profile_settings_images/keystroke_editor.jpg)  \n\n17.Provide name to Keystroke output (Ex: DataDeliveryKeystroke). This is required when editing the features programatically. Enable the feature and change some parameters. \n \n![img](images/modify_profile_settings_images/enable_keystroke.jpg)\n  \n![img](images/modify_profile_settings_images/enable_keystroke_data_formatting.jpg)\n  \n18.Click \"Apply\" and \"Finish\".  \n\n![img](images/modify_profile_settings_images/profile_editing_done.jpg) \n \n19.Click \"Close\".  \n\n   > Note: \n   > Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n![img](images/setup/image081.jpg)\n  \n20.You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n![img](images/modify_profile_settings_images/emdk_config_activity_selection_changes.jpg)\n   \n![img](images/modify_profile_settings_images/emdk_config_keystroke_changes.jpg)   \n\n## Enabling Android Permissions\n1.Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK. \n \n![img](images/modify_profile_settings_images/manifest_file_default.jpg)\n\nYou must first enable permissions for 'com.symbol.emdk.permission.EMDK':\n\n    :::xml\n    <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n\nThen you must enable the library:\n  \n    :::xml\n    <uses-library android:name=\"com.symbol.emdk\" />\n\nWhen done, your manifest.xml should look like:\n\n![img](images/modify_profile_settings_images/manifest_file_updated.jpg)  \n\n##Adding Some Code    \n1.Now we will start to add some code. \n\nFirst you must add references to the libraries:\n  \n    :::java\n    import com.symbol.emdk.*;\n    import com.symbol.emdk.EMDKManager.EMDKListener;\n\nThen you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n    :::java\n    public class MainActivity extends Activity implements EMDKListener {\n         .. .. .. .. .. .. ...\n\n        @Override\n        public void onClosed() {\n\n               // TODO Auto-generated method stub\n\n        }\n        @Override\n        public void onOpened(EMDKManager emdkManager) {\n\n               // TODO Auto-generated method stub\n\n         }\n    }\t\t    \n\n    \n We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager that we will use throughout the code:\n\n    :::java\n    //Assign the profile name used in EMDKConfig.xml\n    private String profileName = \"ModifyBarcodeProfile\";\n\n    //Declare a variable to store ProfileManager object\n    private ProfileManager profileManager = null;\n\n    //Declare a variable to store EMDKManager object\n    private EMDKManager emdkManager = null;\n\t\t\nIn the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n    :::java\n    // The EMDKManager object creation\n    // The EMDKManager object will be returned in the callback.\n    EMDKResults results = EMDKManager.getEMDKManager(\n    \t\tgetApplicationContext(), this);\n\n    // Check the return status of processProfile\n    if (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n      // EMDKManager object creation success\n\n    \t} else {\n\n      // EMDKManager object creation failed\n    \t}\n    \nSo far your code should look like:\n     \n![img](images/modify_profile_settings_images/main_activity_declare_profile_name.jpg) \n\n2.Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. This must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n  \n    :::java\n    this.emdkManager = emdkManager;\n\n        //Get the ProfileManager object to process the profiles\n        profileManager = (ProfileManager) emdkManager.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);\n\n> Note: \n> Sometimes the default parameter in `onOpened` method is `arg0`. So you have to rename that parameter to `emdkManager`.\n    \nNow that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\nSo the `onOpened` method now looks like:\n\n    :::java\n    @Override\n    public void onOpened(EMDKManager emdkManager) {\n     this.emdkManager = emdkManager;\n\n      // Get the ProfileManager object to process the profiles\n      profileManager = (ProfileManager) emdkManager\n    \t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);\n\n      String[] modifyData = new String[1];\n\n      // Call processPrfoile with profile name and SET flag to create the\n      // profile. The modifyData can be null.\n      EMDKResults results = profileManager.processProfile(profileName,\n    \t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n      // Check the return status of processProfile\n      if (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n    \tToast.makeText(MainActivity.this, \"Profile initilization Success\",\n    \t\t\tToast.LENGTH_SHORT).show();\n\n      } else {\n    \tToast.makeText(MainActivity.this, \"Profile initilization failed\",\n    \t\t\tToast.LENGTH_SHORT).show();\n      }\n\n    }   \n \nYour onOpened method should now look like this:\n    \n![img](images/modify_profile_settings_images/onopened_method.jpg)  \n    \n3.Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:\n\n    :::java\n    @Override\n    protected void onDestroy() {\n    \t// TODO Auto-generated method stub\n    \tsuper.onDestroy();\n\n    \t// Clean up the objects created by EMDK manager\n    \temdkManager.release();\n    }\n\nYour onDestroy method should now look like this: \n\n![img](images/modify_profile_settings_images/on_destroy_method.jpg) \n\n4.Now lets add some of the string values in \"res/values/strings.xml\" that we would be using in our layout files.\n\n    :::xml\n    <string name=\"code128_string\">Code128</string>\n      <string name=\"code39_string\">Code39</string>\n      <string name=\"EAN8_string\">EAN8 </string>\n      <string name=\"EAN13_string\">EAN13 </string>\n      <string name=\"UPCE_string\">UPCA </string>\n      <string name=\"UPCE0_string\">UPCE0 </string>\n      <string name=\"button_set_string\">Update Settings </string>\n\nYour strings.xml file should now look like this:  \n\n![img](images/modify_profile_settings_images/declare_strings.jpg)\n\n5.Remove the default code, inside \"res/layout/activity_main.xml\".\n\n6.add the following code, inside \"res/layout/activity_main.xml\". This code contains some checkboxes that represent some of the barcode types. We will change the status of these barcode types \"Enable/Disable\" programatically.\n\nThe code also contains a Drop-Down (Spinner) that we would be using to select a specific type of barcode scanner device programatically.\n\nAt the bottom, the layout file contains a button \"Update Settings\" that is used to apply settings selected by the user.\n\n    :::xml\n    <ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      android:layout_width=\"fill_parent\"\n      android:layout_height=\"fill_parent\" >\n\n        <RelativeLayout\n          android:layout_width=\"match_parent\"\n          android:layout_height=\"wrap_content\"\n          android:padding=\"10dip\" >\n\n          <Button\n            android:id=\"@+id/btn_barcode\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_centerHorizontal=\"true\"\n            android:layout_margin=\"10dip\" />\n\n          <Spinner\n            android:id=\"@+id/scanner_type_spinner\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@+id/btn_barcode\" />\n\n          <CheckBox\n            android:id=\"@+id/checkBoxEAN8\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentLeft=\"true\"\n            android:layout_below=\"@+id/scanner_type_spinner\"\n            android:layout_marginBottom=\"5dip\"\n            android:layout_marginLeft=\"5dip\"\n            android:layout_marginRight=\"5dip\"\n            android:layout_marginTop=\"20dp\"\n            android:checked=\"true\"\n            android:enabled=\"true\"\n            android:text=\"@string/EAN8_string\" />\n\n          <CheckBox\n            android:id=\"@+id/checkBoxEAN13\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_below=\"@+id/scanner_type_spinner\"\n            android:layout_marginBottom=\"5dip\"\n            android:layout_marginLeft=\"5dip\"\n            android:layout_marginRight=\"12dip\"\n            android:layout_marginTop=\"20dip\"\n            android:text=\"@string/EAN13_string\" />\n\n          <CheckBox\n            android:id=\"@+id/checkBoxUPCA\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentLeft=\"true\"\n            android:layout_below=\"@+id/checkBoxEAN8\"\n            android:layout_margin=\"5dip\"\n            android:checked=\"true\"\n            android:enabled=\"true\"\n            android:text=\"@string/UPCE_string\" />\n\n          <CheckBox\n            android:id=\"@+id/checkBoxUPCE0\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_below=\"@+id/checkBoxEAN13\"\n            android:layout_marginBottom=\"5dip\"\n            android:layout_marginLeft=\"5dip\"\n            android:layout_marginRight=\"12dip\"\n            android:layout_marginTop=\"5dip\"\n            android:text=\"@string/UPCE0_string\" />\n\n          <CheckBox\n            android:id=\"@+id/checkBoxCode128\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentLeft=\"true\"\n            android:layout_below=\"@+id/checkBoxUPCA\"\n            android:layout_margin=\"5dip\"\n            android:checked=\"true\"\n            android:enabled=\"true\"\n            android:text=\"@string/code128_string\" />\n\n          <CheckBox\n            android:id=\"@+id/checkBoxCode39\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_below=\"@+id/checkBoxUPCE0\"\n            android:layout_margin=\"5dip\"\n            android:text=\"@string/code39_string\" />\n\n          <EditText\n            android:id=\"@+id/editText\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@+id/checkBoxCode39\"\n            android:layout_margin=\"10dip\"\n            android:ems=\"5\"\n            android:inputType=\"none\"\n            android:scrollbars=\"vertical\" />\n\n          <Button\n            android:id=\"@+id/btn_set\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@+id/editText\"\n            android:layout_centerHorizontal=\"true\"\n            android:layout_margin=\"20dip\"\n            android:text=\"@string/button_set_string\" />\n      </RelativeLayout>\n    </ScrollView>\t\t\n\t\nYour activity_main.xml file should now look like this:\n\n![img](images/modify_profile_settings_images/create_layout.jpg)\n    \n7.Next, we will declare these UI elements in our activity class by writing following code in \"MainActivity.java\" class.\n  \n    :::java\n    // CheckBox for Barcode type 128\n    private CheckBox checkBoxCode128;\n    // CheckBox for Barcode type 39\n    private CheckBox checkBoxCode39;\n    // CheckBox for Barcode type EAN8\n    private CheckBox checkBoxEAN8;\n    // CheckBox for Barcode type EAN13\n    private CheckBox checkBoxEAN13;\n    // CheckBox for Barcode type UPCA\n    private CheckBox checkBoxUPCA;\n    // CheckBox for Barcode type UPCE0\n    private CheckBox checkBoxUPCE0;\n\n    // Drop down that displays a list of available types of scanners\n    private Spinner scannerTypeSpinner;\n\n    // Button for updating changes made in the barcode types.\n    private Button setButton;\n\n    // Button to specify current status of the Barcode.\n    private Button barcodeStatusButton;\n\t\t\n\n   >Note:\n   >Press CTRL+SHIFT+O or CMD+SHIFT+O for organizing imports.\n\nSo declaration of UI elements would look like:\n\n![img](images/modify_profile_settings_images/declare_ui_elements.jpg)\n\n\n8.We will now get reference of these UI elements in the 'onCreate()' method of 'MainActivity.java' class as follows:\n\n\n    :::java\n    // Get references of the checkboxes declared in the UI\n    checkBoxCode128 = (CheckBox) findViewById(R.id.checkBoxCode128);\n    checkBoxCode39 = (CheckBox) findViewById(R.id.checkBoxCode39);\n    checkBoxEAN8 = (CheckBox) findViewById(R.id.checkBoxEAN8);\n    checkBoxEAN13 = (CheckBox) findViewById(R.id.checkBoxEAN13);\n    checkBoxUPCA = (CheckBox) findViewById(R.id.checkBoxUPCA);\n    checkBoxUPCE0 = (CheckBox) findViewById(R.id.checkBoxUPCE0);\n\n    // Get references of all the buttons declared in the UI\n    setButton = (Button) findViewById(R.id.btn_set);\n    barcodeStatusButton = (Button) findViewById(R.id.btn_barcode);\n\n    // Get the reference scanner type spinner\n    scannerTypeSpinner = (Spinner) findViewById(R.id.scanner_type_spinner);\n\t\t\nThe onCreate() method at this point should look like this:\n\n![img](images/modify_profile_settings_images/references_of_ui_elements.jpg)\n\n9.In the next step, we will set the list of scanning devices in the drop down [Spinner](http://developer.android.com/guide/topics/ui/controls/spinner.html)\n\nIn order to implement that, we have created an 'Arraylist' of Strings that contains the list of scanner devices that the user can select to scan Barcodes. This list will be set in an Array Adapter.\n\nWe have implemented an 'on item selected listener' for this spinner, which would select respective type of scanning device programatically.\n\nAdd the following code in the onCreate() method after references of UI elements:\n\n    :::java\n    // List that contains supported scanning device types\n      List<String> scannerTypeList = new ArrayList<String>();\n    scannerTypeList.add(\"AUTO\");\n    scannerTypeList.add(\"INTERNAL_LASER1\");\n    scannerTypeList.add(\"INTERNAL_IMAGER1\");\n    scannerTypeList.add(\"INTERNAL_CAMERA1\");\n\n    // Adapter to hold the list of scanning device types.\n    ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this,\n    \t\tandroid.R.layout.simple_spinner_item, scannerTypeList);\n    dataAdapter\n    \t\t.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\n    // Set the dapater to the spinner\n    scannerTypeSpinner.setAdapter(dataAdapter);\n\n    // On Item Selected Listener of Spinner items.\n    scannerTypeSpinner\n    \t\t.setOnItemSelectedListener(new OnItemSelectedListener() {\n\n    @Override\n    public void onItemSelected(AdapterView<?> parent,\n    \t\t\t\t\tView view, int position, long id) {\n\n    \t// Set the user selected device type as scanning device.\n    \tsetDeviceType(parent.getItemAtPosition(position)\n    \t\t\t\t\t\t.toString());\n\n    }\n\n    @Override\n    public void onNothingSelected(AdapterView<?> parent) {\n    \t// TODO Auto-generated method stub\n\n    \t}\n    });\n\n        \nThe onCreate() method should now look like this:\n\n![img](images/modify_profile_settings_images/drop_down_details.jpg)\n\n\n10.The method 'setDeviceType()' takes the position of the user selected device type from the drop down and modifies the profile settings by accessing Profile Manager API.\n \nIn order to get access to the Profile Manager's API, EMDK provides three ways:   \n    \n* Document - data will be handled as a XML Document\n* String - data will be handled as a raw string\n* ProfileConfig - data will be handled as a ProfileConfig class \n      \nThe preferred way is to use the profileConfig option and the examples below present using such option. Using the Document or String methods may not work if the XML is not structured properly.\n\nSo, we will create reference of 'ProfileConfig' in the MainActivity.java class.\n\n    :::java\n    // Profile Config reference for modifying Profiles.\n    private ProfileConfig profileConfigObj = null;\t\t\n\nThis would look like:\n\n![img](images/modify_profile_settings_images/profile_config_declaration.jpg)\n\n11.In the 'setDeviceType method, we create an object of 'ProfileConfig' class. To modify a profile, we would:\n  * Use the PROFILE_FLAG.GET option to retrieve the profile (if it exists)\n  * Use the profileConfig Object and APIs to modify the settings\n  * Use the PROFILE_FLAG.SET option to save the settings.\nThe user would be notified via [Toast](http://developer.android.com/guide/topics/ui/notifiers/toasts.html) if the profile does not exist.\n\nThe method accepts a String argument, which is the type of scanning device selected by the user from drop down. Based on this parameter, the problemConfig object would be modified and set to the user selected device type.\n\nHere's the code for selecting specific type of scanning device programatically by  modifying the profileConfig object in 'setDeviceType' method.  \n\n    :::java\n    // Sets the scanner device type selected by user from the spinner\n    public void setDeviceType(String deviceType) {\n     // Create the ProfileConfig object\n     profileConfigObj = new ProfileConfig();\n     // Get the ProfileConfig from the profile XML\n     EMDKResults results = profileManager.processProfile(profileName,\n    \t\tProfileManager.PROFILE_FLAG.GET, profileConfigObj);\n\n     // Check the return status of processProfile\n     if (results.statusCode == EMDKResults.STATUS_CODE.FAILURE) {\n    \tToast.makeText(MainActivity.this, \"Failed to get Profile\",\n    \t\t\tToast.LENGTH_SHORT).show();\n    \treturn;\n     }\n     // Set the profile config object to the user selected device type from\n     // the spinner\n     if (deviceType.equalsIgnoreCase(\"AUTO\")) {\n    \tprofileConfigObj.dataCapture.barcode.scannerSelection = DEVICETYPES.AUTO;\n     } else if (deviceType.equalsIgnoreCase(\"INTERNAL_LASER1\")) {\n    \tprofileConfigObj.dataCapture.barcode.scannerSelection = DEVICETYPES.INTERNAL_LASER1;\n     } else if (deviceType.equalsIgnoreCase(\"INTERNAL_CAMERA1\")) {\n    \tprofileConfigObj.dataCapture.barcode.scannerSelection = DEVICETYPES.INTERNAL_CAMERA1;\n     } else {\n    \tprofileConfigObj.dataCapture.barcode.scannerSelection = DEVICETYPES.INTERNAL_IMAGER1;\n     }\n     // Call processPrfoile with profile name, SET flag and config data\n     // to update the profile\n     results = profileManager.processProfile(profileName,\n    \t\tProfileManager.PROFILE_FLAG.SET, profileConfigObj);\n\n     // Check the return status of processProfile\n     if (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n    \t// Device type selected\n\n     } else {\n\n    \t// Failed to select device type\n     }\n    }\n\n\nSo the method would look like:\n\n![img](images/modify_profile_settings_images/set_device_type_method.jpg)\n\n12.Similarly we would now use this 'profileConfig' object for modifying other parameters. one of these will be to check the status of the barcode (Enable/Disable)\n\nOnce the profile is retrieved using 'PROFILE_FLAG.GET', we will check 'profileConfigObj.dataCapture.barcode.scanner_input_enabled' parameter in the 'checkBarcodeStatus' method and set the status on the 'barcodeStatusButton'. This method is called when the EMDK Manager is ready in the 'onOpened()' method of the 'MainActivity.java' file.\n\ncall 'checkBarcodeStatus()' method from 'onOpened()' method\n\n    :::java\n    checkBarcodeStatus();\n\nSo the complete onOpened() method looks like this:\n\n![img](images/modify_profile_settings_images/check_barcode_status_method_call.jpg)\n\nThe code for checkBarcodeStatus() method looks like this:\n\n    :::java\n    // Check and display the status of the Barcode on the button\n    // (Enable/Disable)\n    public void checkBarcodeStatus() {\n     // Create the ProfileConfig object\n     profileConfigObj = new ProfileConfig();\n\n     // Get the ProfileConfig from the profile XML\n     EMDKResults results = profileManager.processProfile(profileName,\n    \t\tProfileManager.PROFILE_FLAG.GET, profileConfigObj);\n\n     // Check the return status of processProfile\n     if (results.statusCode == EMDKResults.STATUS_CODE.FAILURE) {\n\n    \tToast.makeText(MainActivity.this, \"Failed to get Profile\",\n    \t\t\tToast.LENGTH_SHORT).show();\n    \treturn;\n\n     }\n\n     if (profileConfigObj.dataCapture.barcode.scanner_input_enabled == ENABLED_STATE.FALSE) {\n    \tbarcodeStatusButton.setText(\"Enable Barcode\");\n     } else {\n    \tbarcodeStatusButton.setText(\"Disable Barcode\");\n     }\n\n    }\t\t\n\nThe checkBarcodeStatus() method finally looks like:\n\n![img](images/modify_profile_settings_images/check_barcode_status_method.jpg)\n  \n\n13.Apart from this, we have few checkboxes that represent different types of barcode and two buttons 'Barcode' and 'Update Settings'.\n    \nLets concentrate on the top button that allows user to Enable/Disable Barcode scanning programatically using profileConfig object. If the scanning is enabled, the user can disable it by pressing 'Disable Barcode' button so that the application will not be able to scan any barcode. If the scanning is disabled, the user can enable it by pressing 'Enable Barcode' button.\n\nThe checkboxes represent different types of barcode types that can be scanned using this application. The user can select the desired types of barcodes that need to be scanned by the application.\n\nOnce the checkboxes have been selected, the user will press 'Update Profile' button that would update the profile settings based on users selection.\n\nSo we will implement both of these functionalities using 'profileConfig' object. \n\nIn order to implement this, we need to implement 'on click listener' of both of these buttons. We can do it by writing a common 'on click' method and perform operations based on the button ID's.\n\nSo we will set the 'on click listener' on these two buttons using following code:\n\n    :::java\n    // Set the on click listeners on buttons\n    setButton.setOnClickListener(onClickListener);\n    barcodeStatusButton.setOnClickListener(onClickListener);\t\t\n\nThis makes the onCreate() method looks like:\n\n![img](images/modify_profile_settings_images/button_on_click_declaration.jpg)\n\nWe would now write the on click listener that has the common onclick method in which we have called the respective operations based on button ID's.\n\n    :::java\n    // Common on Click Listener for all buttons\n    private OnClickListener onClickListener = new OnClickListener() {\n\n    @Override\n    public void onClick(View view) {\n    \tint id = view.getId();\n    \tswitch (id) {\n    \t// On Click Listener for Set Button\n    \tcase R.id.btn_set:\n    \t\t// Create the ProfileConfig object\n    \t\tif (profileConfigObj.dataCapture.barcode.scanner_input_enabled == ENABLED_STATE.FALSE)\n    \t\t\tToast.makeText(MainActivity.this,\n    \t\t\t\t\t\"Please Enable Barcode to update settings...\",\n    \t\t\t\t\tToast.LENGTH_SHORT).show();\n    \t\telse\n    \t\t\tupdateProfile();\n    \t\tbreak;\n    \t// On Click Listener for Barcode Button\n    \tcase R.id.btn_barcode:\n    \t\tsetBarcodeStatus();\n    \t\tbreak;\n\n    \tdefault:\n    \t\tbreak;\n    \t}\n      }\n    };\t\t \n\nSo the on click listener would finally look like:\n\n![img](images/modify_profile_settings_images/button_on_click_defination.jpg)\n\n   >Note:   \n   >We have shown Toast messages wherever necessary to inform user about the operations being performed.\n\n14.As explained earlier, the button Barcode is used for updating the Barcode status using profileConfig object by calling 'setBarcodeStatus' method.\n\nSo the 'setBarcodeStatus()' method can be implemented as:\n\n    :::java\n    // Sets the status of the Barcode (Enable/Disable)\n    public void setBarcodeStatus() {\n     // Create the ProfileConfig object\n     profileConfigObj = new ProfileConfig();\n\n     // Get the ProfileConfig from the profile XML\n     EMDKResults results = profileManager.processProfile(profileName,\n    \t\tProfileManager.PROFILE_FLAG.GET, profileConfigObj);\n\n     // Check the return status of processProfile\n     if (results.statusCode == EMDKResults.STATUS_CODE.FAILURE) {\n\n    \tToast.makeText(MainActivity.this, \"Failed to get Profile\",\n    \t\t\tToast.LENGTH_SHORT).show();\n    \treturn;\n\n     }\n\n     if (barcodeStatusButton.getText().toString()\n    \t\t.equalsIgnoreCase(\"Enable Barcode\")) {\n    \t//Barcode is enabled so disable it.\n    \tprofileConfigObj.dataCapture.barcode.scanner_input_enabled = ENABLED_STATE.TRUE;\n    \tbarcodeStatusButton.setText(\"Disable Barcode\");\n\n     } else {\n    \t//Barcode is disabled so enable it.\n    \tprofileConfigObj.dataCapture.barcode.scanner_input_enabled = ENABLED_STATE.FALSE;\n    \tbarcodeStatusButton.setText(\"Enable Barcode\");\n\n     }\n\n     // Call processPrfoile with profile name, SET flag and config data\n     // to update the profile\n     results = profileManager.processProfile(profileName,\n    \t\tProfileManager.PROFILE_FLAG.SET, profileConfigObj);\n\n     // Check the return status of processProfile\n     if (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n    \tToast.makeText(MainActivity.this, \"Barcode Status updated\",\n    \t\t\tToast.LENGTH_SHORT).show();\n\n     } else {\n    \tToast.makeText(MainActivity.this, \"Barcode status update failed\",\n    \t\t\tToast.LENGTH_SHORT).show();\n     }\n\n    }\n\nsetBarcodeStatus() method would look like:\n\n![img](images/modify_profile_settings_images/set_barcode_status_method.jpg)\n \n\n15.Finally, we would implement the on click listener for 'Update Profile' by calling 'updateProfile' method. This method would update the status of all the checkboxes (Enable/Disable) that represent the various barcode types.\n\nSo if a particular barcode checkbox is unchecked, the user will not be able to scan that specific type of barcode and vice-versa.\n\nWe will define the 'updateProfile' method as follows:\n\n    :::java\n    // Updates the profile based on user selected attributes\n    public void updateProfile() {\n      String resultString = \"\";\n      try {\n\n    \t// Create the ProfileConfig object\n    \tprofileConfigObj = new ProfileConfig();\n\n    \t// Get the ProfileConfig from the profile XML\n    \tEMDKResults results = profileManager.processProfile(profileName,\n    \t\t\tProfileManager.PROFILE_FLAG.GET, profileConfigObj);\n\n    \t// Check the return status of processProfile\n    \tif (results.statusCode == EMDKResults.STATUS_CODE.FAILURE) {\n\n    \t\tToast.makeText(MainActivity.this, \"Failed to get Profile\",\n    \t\t\t\tToast.LENGTH_SHORT).show();\n    \t\treturn;\n\n    \t }\n\n    \t // Set the code128\n    \t if (checkBoxCode128.isChecked()) {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.code128 = ENABLED_STATE.TRUE;\n\n    \t  } else {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.code128 = ENABLED_STATE.FALSE;\n    \t  }\n\n    \t // set code39\n    \t if (checkBoxCode39.isChecked()) {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.code39 = ENABLED_STATE.TRUE;\n\n    \t } else {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.code39 = ENABLED_STATE.FALSE;\n    \t }\n\n    \t // set EAN8\n    \t if (checkBoxEAN8.isChecked()) {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.ean8 = ENABLED_STATE.TRUE;\n\n    \t } else {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.ean8 = ENABLED_STATE.FALSE;\n    \t }\n\n    \t // set ENA13\n    \t if (checkBoxEAN13.isChecked()) {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.ean13 = ENABLED_STATE.TRUE;\n\n    \t } else {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.ean13 = ENABLED_STATE.FALSE;\n    \t }\n\n    \t // set upca\n    \t if (checkBoxUPCA.isChecked()) {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.upca = ENABLED_STATE.TRUE;\n\n    \t } else {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.upca = ENABLED_STATE.FALSE;\n    \t }\n\n    \t // set upce0\n    \t if (checkBoxUPCE0.isChecked()) {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.upce0 = ENABLED_STATE.TRUE;\n\n    \t } else {\n\n    \t\tprofileConfigObj.dataCapture.barcode.decoders.upce0 = ENABLED_STATE.FALSE;\n    \t }\n\n    \t // Call processPrfoile with profile name, SET flag and config data\n    \t // to update the profile\n    \t results = profileManager.processProfile(profileName,\n    \t\t\tProfileManager.PROFILE_FLAG.SET, profileConfigObj);\n\n    \t // Check the return status of processProfile\n    \t if (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n    \t\tToast.makeText(MainActivity.this,\n    \t\t\t\t\"Profile successfully updated\", Toast.LENGTH_SHORT)\n    \t\t\t\t.show();\n\n    \t } else {\n    \t\tToast.makeText(MainActivity.this, \"Profile update failed\",\n    \t\t\t\tToast.LENGTH_SHORT).show();\n    \t}\n\n      } catch (Exception ex) {\n    \tresultString = ex.getMessage();\n    \tToast.makeText(MainActivity.this, resultString, Toast.LENGTH_SHORT)\n    \t\t\t.show();\n      }\n    }\n\nSo the updateProfile method looks like:\n\n![img](images/modify_profile_settings_images/update_profile_method.jpg)\n\n16.So now we are done with the coding part. Lets test our application.\n\n17.Connect the device (having the latest EMDK runtime) to USB port.\n   >Note:   \n   >Make sure the device is in USB debug.\n\n18.Run the application.  \n\n![img](images/modify_profile_settings_images/initial_screen.png)\n\n19.Enable/Disable Barcode scanning by pressing Barcode button on top of the screen. \n\n   >Note: If the barcode disabled, you will not be able to scan any type of barcode.\n\n![img](images/modify_profile_settings_images/update_barcode_status.png)\n\n20.Choose the specific type of barcode scanning device from the drop down.\n\n![img](images/modify_profile_settings_images/drop_down_for_device_type.png)  \n\n21.Now select the desired barcode types from the checkboxes and press the Update Settings button. This will modify the profile settings.\n\n![img](images/modify_profile_settings_images/update_settings.png)\n\nNow press trigger button to scan the respective types of barcodes.\n\n22.The scanned data will be populated in the Edit Text field added to the UI.\n   >Note:\n   > Only those typs of barcodes will be scanned that are checked in the checkboxes.\n  \n![img](images/modify_profile_settings_images/scan_data.png)  \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n  >Note:\n  >* Include the permission for EMDK:  \n  \n    \t:::xml\n    \t<uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n  >Note:\n  >* Use the EMDK library:  \n    \n    \t:::xml\n    \t<uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. When using the \"Barcode\" feature in EMDK Wizard, the specified value for \"Scanner\" is not supported on the device, it will be considered as \"Auto\" during runtime (Ex: BT_LASER1, BT_IMAGER1 and BT_CAMERA1).\n3. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device. \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/EMDK-ModifyBarcodeProfileTutorial.zip)."},{"key":"guide-tutorial-tutMxAccessManager","name":" Controlling Application Access using Access Manager","md":"# Controlling Application Access using Access Manager\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on controlling access to the device's applications using [Access Manager](#guide-profiles-refAccessManager) feature of Mx. The [Access Manager](#guide-profiles-refAccessManager) feature allows you to configure a set of applications that will be allowed to run and install on the device. When a profile with this feature is enabled, the device will only allow user installed applications on the Whitelist to be executed and/or installed (some applications that are part of the default operating system will still be available). To disable the Whitelist, you would select \"Single User Without Whitelist\". Overall, the Access Manager supports following features.\n\n   > Note: \"Enable Whitelist\" refers to \"Single User Mode with Whitelist\". \"Disable Whitelist\" refers to \"Single User Mode without Whitelist\" options in the wizard.\n\n**1. Enable/Disable single user mode white list:**\n\nThis feature allows user to Enable or Disable the single user mode white list. When the single user white list mode is enabled, user can see only those apps that have been added to the white list and have access restrictions. The user can see all the applications when single user mode white list is disabled.   \n\n**2. Add packages to the white list:**\n\nWhen the single user mode white list is enabled, user can add application package to the white list and set restricted access to that particular application (Ex. com.symbol.emdkmxaccessmanagertutorial). user can also add multiple applications to the white list separated by commas to control access across multiple applications (Ex. com.symbol.emdkmxaccessmanagertutorial,com.symbol.emdkmxclocktutorial,com.symbol.mxgprstutorial). \n\n   > Note: Make sure to add executing EMDK application to the white list in order to set access restrictions on other applications. otherwise your application will lose control of the Whitelist configuration and you will not be able to change the behavior until you perform Enterprise Reset on the device to get the default settings back.  \n\n**3. Remove specific packages from the white list:**  \n\nUser can remove specific package(s) from the white list. If we want to remove multiple applications from white list, we need to specify their package names separated by commas (Ex. com.testapp1, com.testapp2, com.testapp3).\n\n   > Note: Package names are unique identifiers of Android applications. Hence the API requires package names to refer any specific application.   \n\n**4. Remove all packages from the white list:**\n\nWhen the device has lots of applications in the white list and if we want to remove all applications from white list then we can use this feature of Access Manager. It prevents user from adding all the package names manually, which could be time consuming.\n\n**5. Control the behavior of the system settings menu when in single user mode white list:**\n\nWhen the single user mode white list is enabled, user can control the behavior of the system settings menu that lets user control the level of access to the applications added in the white list. The user can either provide \"Full Access\" or \"Reduced Access\" to the applications that have been added to the white list.\n\nSo now we will create a tutorial to demonstrate how to Add/Remove applications to/from single user mode white list and observe the difference when the single user white list mode is changed (Enabled/Disabled) programmatically. \n  \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 2.1 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxAccessManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxAccessManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxAccessManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxAccessManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxAccessManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxAccessManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxAccessManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxAccessManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxAccessManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxAccessManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxAccessManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxAccessManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxAccessManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The Access Manager Profile Feature\n1. Select \"MxAccessManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxAccessManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxAccessManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: AccessManagerProfile).\n  \n    ![img](images/MxAccessManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxAccessManagerTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Access Manager, Touch Manager, Persist Manager etc.) for configuring your Symbol device based on requirements. \n  \n6. So you can see all the MX features on the left hand side of the Profile Editor window. Because this is Access Manager Tutorial, select the \"Access Manager\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/MxAccessManagerTutorialImages/access_manager_feature.jpg)\n\n    As mentioned earlier you can see the drop down showing two options in the operation Mode. First one is Single user without whitelist and second is single user with whitelist. We would demonstrate both of these feature programatically using Access Manager API later in this tutorial. But for now, lets us configure one of these two operation modes from the wizard. This is to show you that we can modify any Mx feature both programmatically as well as using wizrad. Hence select Operation mode as \"Single User Without Whitelist\". Provide some name to refer this feature programmatically in order to modify it (Ex. MyAccessMgr).    \n\n    ![img](images/MxAccessManagerTutorialImages/access_mgr_details.jpg)   \n \n7. Click Apply to apply the settings we provided. This setting would display all the applications that have not been added to the whitelist.    \n  \n    ![img](images/MxAccessManagerTutorialImages/access_profile_applied.jpg)\n\n8. Click Finish and your Access Manager profile is created that would display all applications, which are not in the whitelist. We would configure rest of the features programmatically later in this tutorial.\n\n    ![img](images/MxAccessManagerTutorialImages/access_manager_profile_created.jpg) \n  \n9. Click \"Close\".\n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxAccessManagerTutorialImages/emdk_config_file.jpg)\n  \n10. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/MxAccessManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxAccessManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxAccessManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"AccessManagerProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxAccessManagerTutorialImages/on_create_added.jpg)\n\n2. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxAccessManagerTutorialImages/on_destroy_method.jpg) \n\n3. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:  \n\n        :::java\n        if (profileManager != null) {\n\t\t    String[] modifyData = new String[1];\n\t\t\n\t\t  // Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t  EMDKResults results = profileManager.processProfile(profileName,\n\t\t            ProfileManager.PROFILE_FLAG.SET, modifyData);\n\t\t\n\t\t  if (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\t\t\n\t\t\n\t\t  } else {\n\t\t    // Show dialog of Failure\n\t\t      AlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t      builder.setTitle(\"Failure\");\n\t\t      builder.setMessage(\"Failed to apply profile...\")\n\t\t              .setPositiveButton(\"OK\",\n\t\t                    new DialogInterface.OnClickListener() {\n\t\t                            public void onClick                                                 \t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t                                    int id) {\n\t\t\n\t\t                            }\n\t\t                        });\n\t\t      AlertDialog alert = builder.create();\n\t\t      alert.show();\n\t\t   }\n\t\t}\n\n\tThis `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\tNow we will call a method `handleEMDKResult` in case of `CHECK_XML` status to handle this [EMDKResults](#api-EMDKResults), which we will create in the next step.\n\n\t\t:::java\n\t\t// Method call to handle EMDKResult\n\t\thandleEMDKResult(results);    \n\n    Your complete `onOpened` method should now look like this:\n    \n    ![img](images/MxAccessManagerTutorialImages/on_opened_method.jpg)\n\n4. It shows error as we have not yet declared `handleEMDKResult` method. So let us create this method, which would get the XML String response from [EMDKResults](#api-EMDKResults), call the `parseXML` method to parse it and eventually call `displayResults` method to display output in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html), which we would be declaring in coming steps. \n\n\t\t:::java\n\t\t// Method to handle EMDKResult by extracting response and parsing it\n\t\tpublic void handleEMDKResult(EMDKResults results) {\n\t\t\t// Get XML response as a String\n\t\t\tString statusXMLResponse = results.getStatusString();\n\t\n\t\t\ttry {\n\t\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t\t// for the parser\n\t\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t\t// Call method to parse the response\n\t\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\n\t\t\t// Method call to display results in a dialog\n\t\t\tdisplayResults();\n\t\t}\n\n\tYour `handleEMDKResult` method should now look like this:\n    \n    ![img](images/MxAccessManagerTutorialImages/handle_emdk_result.jpg)\n\n5. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxAccessManagerTutorialImages/parse_xml.jpg) \n\n6. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxAccessManagerTutorialImages/build_failure_message.jpg)\n\n7. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxAccessManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.    \n    \n8. If you run the application at this moment, whatever the settings you made in the wizard would be applied to the device. But we are not done yet. We also have to implement a way to modify Access Manager settings programmatically using Mx API as it could be annoying to change the wizard settings repetitively and then run the application each time to see the changes. So let us implement that using following steps.\n\n9. Declare some global variables for User Interfaces such as Drop-down (Spinner), Button, Edit Text, Radio Group and Relative Layout. Now declare some global variables for drop-down (Spinner) adapter that holds lists for various drop downs such as system settings, add package, remove package. We will also declare some global integers that would contain position of an item clicked by the user in each of the three drop-downs (Spinners).\n\n        :::java\n        // Relative Layout that contains entire view when the single user mode with\n\t    // white list is enabled\n\t    private RelativeLayout whiteListLayout;\n\n\t    // Boolean that indicates whether single user mode with/without white list\n\t    // (False for without and True for with white list)\n\t    private boolean isWhiteListActive = false;\n\n\t    // Drop Down that contains options for settings menu of the Access Manager\n\t    private Spinner settingsAccessSpinner;\n\n\t    // Drop Down that contains options for deleting packages from white list\n\t    private Spinner deletePackageSpinner;\n\n\t    // Edit Text that contains comma separated package names to be removed from\n\t    // white list\n\t    private EditText deletePackageEditText;\n\n\t    // Drop Down that contains options for Adding packages to white list\n\t    private Spinner addPackageSpinner;\n\n\t    // Edit Text that contains comma separated package names to be added in the\n\t    // white list\n\t    private EditText AddPackageEditText;\n\n\t    // Array Adapter to hold arrays that are used in various drop downs\n\t    private ArrayAdapter<String> dataAdapter;\n\n\t    // Radio Group for holding Radio Buttons that enable user to select option\n\t    // for single user mode with or without white list\n\t    private RadioGroup radioGroup;\n\n\t    // Holds the position of user selected option in the settings drop down\n\t    private int settingsSpinnerPosition = 0;\n\n\t    // Holds the position of user selected option in the delete package drop\n\t    // down\n\t    private int deletePackageSpinnerPosition = 0;\n\n\t    // Holds the position of user selected option in the add package drop down\n\t    private int addPackageSpinnerPosition = 0;\n\n\t    // Set Button that is used to implement changes made by user in the\n\t    // Access Manager\n\t    private Button setButton;\n\n    So far the variables declared look like:   \n\n    ![img](images/MxAccessManagerTutorialImages/global_variables.jpg)\n\n10. We will now add the layout for this application. This layout contains required View of this application. The view contains various drop downs for system settings menu, add package and drop package features. The view also contains two Radio Buttons to enable/disable white list mode. The layout also contains two Edit Texts that allow user to enter the package names to Add and Delete applications from the white list respectively when user enables the white list option from radio button. Finally the view contains a set button that implements all the changes made by the user.\n\n>Remove all the code, inside \"res/layout/activity_main.xml\" and add following code to form a view described above.\n\n    :::xml\n    <ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"fill_parent\"\n    android:layout_height=\"fill_parent\" >\n\n    <RelativeLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_margin=\"10dip\" >\n\n      <RadioGroup\n        android:id=\"@+id/radioGroupAccess\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\" >\n\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"10dip\"\n            android:text=\"Choose your Access Manager Option:\"\n            android:textSize=\"14sp\"\n            android:textStyle=\"bold\" />\n\n        <RadioButton\n            android:id=\"@+id/radio_without_whitelist\"\n            android:layout_width=\"279dp\"\n            android:layout_height=\"wrap_content\"\n            android:checked=\"true\"\n            android:text=\"Single User Without Whitelist\"\n            android:textSize=\"14sp\" />\n\n        <RadioButton\n            android:id=\"@+id/radio_with_whitelist\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Single User With Whitelist\"\n            android:textSize=\"14sp\" />\n      </RadioGroup>\n\n      <RelativeLayout\n        android:id=\"@+id/whitelist_layout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@+id/radioGroupAccess\"\n        android:visibility=\"gone\" >\n\n        <Spinner\n            android:id=\"@+id/settings_access_spinner\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"8dip\" />\n\n        <Spinner\n            android:id=\"@+id/delete_package_spinner\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@+id/settings_access_spinner\"\n            android:layout_margin=\"8dip\" />\n\n        <EditText\n            android:id=\"@+id/et_delete_package\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@+id/delete_package_spinner\"\n            android:layout_margin=\"8dip\"\n            android:hint=\"package names separated by commas\"\n            android:textSize=\"14sp\"\n            android:visibility=\"gone\" />\n\n        <Spinner\n            android:id=\"@+id/add_package_spinner\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@+id/et_delete_package\"\n            android:layout_margin=\"8dip\" />\n\n        <EditText\n            android:id=\"@+id/et_add_package\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_below=\"@+id/add_package_spinner\"\n            android:layout_margin=\"8dip\"\n            android:hint=\"package names separated by commas\"\n            android:textSize=\"14sp\"\n            android:visibility=\"gone\" />\n      </RelativeLayout>\n\n       <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@+id/whitelist_layout\"\n        android:paddingBottom=\"20dip\" >\n\n        <Button\n            android:id=\"@+id/buttonSet\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentBottom=\"true\"\n            android:layout_centerHorizontal=\"true\"\n            android:layout_marginTop=\"30dp\"\n            android:text=\"Set\" />\n       </RelativeLayout>\n     </RelativeLayout>\n\n    </ScrollView>\n\n11. We have three drop-downs (spinners) in the UI for system settings, Add Package and Remove Package respectively. These spinners show arrays based on their selections. We need to declare these arrays in order to set them to array adapters, which are held by spinners in the next step.\n\n    Go to \"res/values\" in the project. Right Click on \"values\" and create a new Android XML file.\n\n    ![img](images/MxAccessManagerTutorialImages/right_click_value.jpg) \n\n    Provide the file name (Ex. arrays)\n\n    ![img](images/MxAccessManagerTutorialImages/new_xml_file.jpg)\n\n    Click Finish and \"arrays.xml\" file will be created under \"res/values\".\n\n    ![img](images/MxAccessManagerTutorialImages/arrays_xml_file.jpg)\n\n    Add the following code that declare arrays in `<resources>` tag.\n\n        :::xml\n        <!-- Array for System Settings Menu -->\n        <string-array name=\"system_settings_array\">\n        <item>Full Access</item>\n        <item>Reduced Access</item>\n        </string-array>\n\n        <!-- Array for delete packages options -->\n        <string-array name=\"delete_packages_array\">\n        <item>Delete NO Packages</item>\n        <item>Delete Specified Packages(s)</item>\n        <item>Delete ALL Packages</item>\n        </string-array>\n\n        <!-- Array for Add packages options -->\n        <string-array name=\"add_packages_array\">\n        <item>Add NO Packages</item>\n        <item>Add Specified Packages(s)</item>\n        </string-array>\n\n12. Let us refer UI elements with their respective on click listeners in the `onCreate` method.\n\n        :::java\n        // Reference of Set Button\n\t\tsetButton = (Button) findViewById(R.id.buttonSet);\n\n\t\t// On Click Listener Call for Set Button\n\t\tsetButton.setOnClickListener(onClickListsner);\n\n\t\t// Reference for White List Layout\n\t\twhiteListLayout = (RelativeLayout) findViewById(R.id.whitelist_layout);\n\n\t\t// Reference for Radio Group that has Radio Buttons\n\t\tradioGroup = (RadioGroup) findViewById(R.id.radioGroupAccess);\n\n\t\t// On Checked Change Listener for Radio Buttons in a Radio Group\n\t\tradioGroup.setOnCheckedChangeListener(onCheckedChangeListener);\n\n\t\t// Reference for Add and Delete Package Edit Texts\n\t\tdeletePackageEditText = (EditText) findViewById(R.id.et_delete_package);\n\t\tAddPackageEditText = (EditText) findViewById(R.id.et_add_package);\n\n\t\t// Reference for settings, Add Package and Delete Package drop downs\n\t\tsettingsAccessSpinner = (Spinner) findViewById(R.id.settings_access_spinner);\n\t\tdeletePackageSpinner = (Spinner) findViewById(R.id.delete_package_spinner);\n\t\taddPackageSpinner = (Spinner) findViewById(R.id.add_package_spinner);\n\n\t\t// Adapter to hold the list system settings menu options\n\t\tdataAdapter = new ArrayAdapter<String>(this,\n\t\t\t\tandroid.R.layout.simple_spinner_item, getResources()\n\t\t\t\t\t\t.getStringArray(R.array.system_settings_array));\n\t\tdataAdapter\n\t\t\t\t.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\t\t// Set adapter to settings drop down\n\t\tsettingsAccessSpinner.setAdapter(dataAdapter);\n\n\t\t// Adapter to hold the list delete package options\n\t\tdataAdapter = new ArrayAdapter<String>(this,\n\t\t\t\tandroid.R.layout.simple_spinner_item, getResources()\n\t\t\t\t\t\t.getStringArray(R.array.delete_packages_array));\n\t\tdataAdapter\n\t\t\t\t.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\t\t// Set adapter to delete package drop down\n\t\tdeletePackageSpinner.setAdapter(dataAdapter);\n\n\t\t// Adapter to hold the list add package options\n\t\tdataAdapter = new ArrayAdapter<String>(this,\n\t\t\t\tandroid.R.layout.simple_spinner_item, getResources()\n\t\t\t\t\t\t.getStringArray(R.array.add_packages_array));\n\t\tdataAdapter\n\t\t\t\t.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\t\t// Set adapter to add package drop down\n\t\taddPackageSpinner.setAdapter(dataAdapter);\n\n\t\t// Call to common On Item Selected Listener for all drop downs based on\n\t\t// view ID.\n\t\tsettingsAccessSpinner.setOnItemSelectedListener(onItemSelectedListener);\n\t\tdeletePackageSpinner.setOnItemSelectedListener(onItemSelectedListener);\n\t\taddPackageSpinner.setOnItemSelectedListener(onItemSelectedListener);\n\n    So we have completed the `onCreate` method. Here is the screen capture of part of this method.\n\n    > Note: Please read detailed comments in the code to get significance of each attribute. \n\n    ![img](images/MxAccessManagerTutorialImages/complete_on_create.jpg)\n\n13. At this point, you will see few of errors. This is because we have not implemented respective on click listeners yet. Let us implement them one by one.\n\n    First, we will implement `OnCheckedChangeListener` on Radio Group that is used to enable/disable white list mode. So when it is enabled, the user will see a whitelist layout, which is a view that has some spinners to perform further configurations. When whitelist is disbaled, the whitelist layout is hidden to the user.\n\n        :::java\n        // On checked change listener for Radio Buttons of Radio Group\n\t    private OnCheckedChangeListener onCheckedChangeListener = new OnCheckedChangeListener() {\n\n\t\t @Override\n\t\t public void onCheckedChanged(RadioGroup group, int checkedId) {\n\t\t\tswitch (checkedId) {\n\t\t\t// Single User Mode Without White List\n\t\t\tcase R.id.radio_without_whitelist:\n\t\t\t\t// Set the white list flag to false\n\t\t\t\tisWhiteListActive = false;\n\t\t\t\t// Clear all the edit texts\n\t\t\t\tdeletePackageEditText.setText(\"\");\n\t\t\t\tAddPackageEditText.setText(\"\");\n\t\t\t\t// Hide the White List Layout\n\t\t\t\twhiteListLayout.setVisibility(View.GONE);\n\t\t\t\tbreak;\n\t\t\t// Single User Mode With White List\n\t\t\tcase R.id.radio_with_whitelist:\n\t\t\t\t// Set the white list flag to false\n\t\t\t\tisWhiteListActive = true;\n\t\t\t\t// Show the White List Layout\n\t\t\t\twhiteListLayout.setVisibility(View.VISIBLE);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t }\n\t    };\n\n    > Note: While importing, select Radio Group and not compound button widget.\n\n    The `OnCheckedChangeListener` for Radio Group looks like:\n\n    ![img](images/MxAccessManagerTutorialImages/on_checked_change_listener.jpg)\n\n14. We have implemented a `onItemSelectedListener` for all three spinners that will take respective actions based on the spinner ID.\n\n        :::java\n        // Common On Item Selected Listener for all drop downs based on View ID\n\t    private OnItemSelectedListener onItemSelectedListener = new OnItemSelectedListener() {\n\n\t\t@Override\n\t\tpublic void onItemSelected(AdapterView<?> parent, View view,\n\t\t\t\tint position, long id) {\n\t\t\t// Get View Id of user selected drop down\n\t\t\tint spinnerID = parent.getId();\n\t\t\tswitch (spinnerID) {\n\t\t\t// System Settings drop down is selected\n\t\t\tcase R.id.settings_access_spinner:\n\t\t\t\tsettingsSpinnerPosition = ++position;\n\t\t\t\tbreak;\n\t\t\t// Delete Package drop down is selected\n\t\t\tcase R.id.delete_package_spinner:\n\t\t\t\tdeletePackageSpinnerPosition = position;\n\t\t\t\t// Show/Hide delete package Edit Text based on user selection\n\t\t\t\tif (deletePackageSpinnerPosition == 1)\n\t\t\t\t\t// Show the delete package Edit Text\n\t\t\t\t\tdeletePackageEditText.setVisibility(View.VISIBLE);\n\t\t\t\telse\n\t\t\t\t\t// Hide the delete package Edit Text\n\t\t\t\t\tdeletePackageEditText.setVisibility(View.GONE);\n\t\t\t\tbreak;\n\t\t\t// Add Package drop down is selected\n\t\t\tcase R.id.add_package_spinner:\n\t\t\t\taddPackageSpinnerPosition = position;\n\t\t\t\t// Show/Hide Add package Edit Text based on user selection\n\t\t\t\tif (addPackageSpinnerPosition == 1)\n\t\t\t\t\t// Show the Add package Edit Text\n\t\t\t\t\tAddPackageEditText.setVisibility(View.VISIBLE);\n\t\t\t\telse\n\t\t\t\t\t// Hide the Add package Edit Text\n\t\t\t\t\tAddPackageEditText.setVisibility(View.GONE);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\t @Override\n\t\t public void onNothingSelected(AdapterView<?> arg0) {\n\t\t\t// TODO Auto-generated method stub\n\n\t\t }\n\t    };\n\n    The `onItemSelectedListener` for spinners looks like:\n\n    ![img](images/MxAccessManagerTutorialImages/on_item_slected_listener.jpg)\n\n15. Now we will implement the `onClickListener` for the set Button. this listener will call method `modifyAccessManagerProfileXML` that forms an XML based on users selection and sets the changes to the Profile.\n\n        :::java\n        // On Click Listener for Set Button\n\t    private OnClickListener onClickListsner = new OnClickListener() {\n\n\t\t@Override\n\t\tpublic void onClick(View view) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\tint id = view.getId();\n\t\t\tswitch (id) {\n\t\t\tcase R.id.buttonSet:\n\t\t\t\t// Call modifyAccessManagerProfileXML method to set the user\n\t\t\t\t// selected changes\n\t\t\t\tmodifyAccessManagerProfileXML(isWhiteListActive);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t }\n\t    };\n\n    The `onClickListener` for set Button looks like:\n\n    ![img](images/MxAccessManagerTutorialImages/on_click_listener.jpg)\n\n16. Finally, we will implement `modifyAccessManagerProfileXML` method. This is the method that actually implements Access Manager configurations set by the user. It prepares an xml input for the `processProfile` method based on \"value\" attribute of different Access Manager configurations. It then calls the `handleEMDKResult` method that we have already created to handle the [EMDKResults](#api-EMDKResults) and display the output.\n\n    > Note: Please refer to code comments of `modifyAccessManagerProfileXML` method to understand more about \"value\" attribute.\n    > The global integres hold these \"value\" attributes based on user selection of various Access Manager features (Enable/Disable Whitelist, System Settings, Add/Delete Packages to/from whitelist etc.).\n\n    So these global integer variables are set to the respective Access Manager attributes while forming the XML input, which is then passed to the `processProfile` method.\n\n        :::java\n        // Method to modify Access Manager settings based on user selection and set\n\t    // them in Profile Manager\n\t    private void modifyAccessManagerProfileXML(boolean isWhiteListActive) {\n\n\t\t\t// Prepare XML to modify the existing profile settings\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Check if the user has selected with/without white list option\n\t\t\t// from radio group in order to form modifyData xml accordingly.\n\t\t\tif (isWhiteListActive) {\n\t\t\t\t// User has selected Single User Mode With White list\n\t\t\t\tmodifyData[0] = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n\t\t\t\t\t\t+ \"<characteristic type=\\\"Profile\\\">\"\n\t\t\t\t\t\t+ \"<parm name=\\\"ProfileName\\\" value=\\\"AccessManagerProfile\\\"/>\"\n\t\t\t\t\t\t+ \"<characteristic type=\\\"AccessMgr\\\">\"\n\t\t\t\t\t\t+ \"<parm name=\\\"OperationMode\\\" value=\\\"2\\\"/>\"\n\t\t\t\t\t\t+ \"<parm name=\\\"SystemSettings\\\" value=\\\"\"\n\t\t\t\t\t\t+ settingsSpinnerPosition + \"\\\"/>\";\n\n\t\t\t\t// Set the delete package settings to the xml based on user\n\t\t\t\t// selection from\n\t\t\t\t// delete package drop down stored in\n\t\t\t\t// deletePackageSpinnerPosition integer\n\t\t\t\t// deletePackageSpinnerPosition = 0 -> Delete No Package\n\t\t\t\t// deletePackageSpinnerPosition = 1 -> Delete Specific\n\t\t\t\t// Packages(s)\n\t\t\t\t// deletePackageSpinnerPosition = 2 -> Delete All Packages\n\t\t\t\tif (deletePackageSpinnerPosition == 1) {\n\t\t\t\t\t// Get package names to be deleted from white list\n\t\t\t\t\tmodifyData[0] = modifyData[0]\n\t\t\t\t\t\t\t+ \"<parm name=\\\"DeletePackagesAction\\\" value=\\\"1\\\"/>\"\n\t\t\t\t\t\t\t+ \"<parm name=\\\"DeletePackageNames\\\" value=\\\"\"\n\t\t\t\t\t\t\t+ deletePackageEditText.getText().toString()\n\t\t\t\t\t\t\t+ \"\\\"/>\";\n\t\t\t\t} else {\n\t\t\t\t\t// Delete No Package or Delete All Package based on\n\t\t\t\t\t// deletePackageSpinnerPosition integer\n\t\t\t\t\tmodifyData[0] = modifyData[0]\n\t\t\t\t\t\t\t+ \"<parm name=\\\"DeletePackagesAction\\\" value=\\\"\"\n\t\t\t\t\t\t\t+ deletePackageSpinnerPosition + \"\\\"/>\";\n\t\t\t\t}\n\n\t\t\t\t// Set the Add package settings to the xml based on user\n\t\t\t\t// selection from\n\t\t\t\t// Add package drop down stored in\n\t\t\t\t// addPackageSpinnerPosition integer\n\t\t\t\t// addPackageSpinnerPosition = 0 -> Add No Package\n\t\t\t\t// addPackageSpinnerPosition = 1 -> Add Specific\n\t\t\t\t// Packages(s)\n\t\t\t\tif (addPackageSpinnerPosition == 1) {\n\t\t\t\t\t// Get package names to be added in the white list\n\t\t\t\t\tmodifyData[0] = modifyData[0]\n\t\t\t\t\t\t\t+ \"<parm name=\\\"AddPackagesAction\\\" value=\\\"1\\\"/>\"\n\t\t\t\t\t\t\t+ \"<parm name=\\\"AddPackageNames\\\" value=\\\"\"\n\t\t\t\t\t\t\t+ AddPackageEditText.getText().toString() + \"\\\"/>\";\n\t\t\t\t} else {\n\t\t\t\t\t// Add No Package\n\t\t\t\t\tmodifyData[0] = modifyData[0]\n\t\t\t\t\t\t\t+ \"<parm name=\\\"AddPackagesAction\\\" value=\\\"\"\n\t\t\t\t\t\t\t+ addPackageSpinnerPosition + \"\\\"/>\";\n\t\t\t\t}\n\n\t\t\t\tmodifyData[0] = modifyData[0] + \"</characteristic>\"\n\t\t\t\t\t\t+ \"</characteristic>\";\n\t\t\t} else {\n\t\t\t\t// User has selected Single User Mode Without White list\n\t\t\t\tmodifyData[0] = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n\t\t\t\t\t\t+ \"<characteristic type=\\\"Profile\\\">\"\n\t\t\t\t\t\t+ \"<parm name=\\\"ProfileName\\\" value=\\\"AccessManagerProfile\\\"/>\"\n\t\t\t\t\t\t+ \"<characteristic type=\\\"AccessMgr\\\">\"\n\t\t\t\t\t\t+ \"<parm name=\\\"OperationMode\\\" value=\\\"1\\\"/>\"\n\t\t\t\t\t\t+ \"</characteristic>\" + \"</characteristic>\";\n\t\t\t}\n\n\t\t\t// Call process profile to modify the Access Manager Profile of\n\t\t\t// specified profile\n\t\t\t// name based on modifyData XML formed above\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\t\t\t// Method call to handle EMDKResult\n\t\t\thandleEMDKResult(results);\n\n\t\t\t} else {\n\t\t\t// Show dialog of Failure\n\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\tbuilder.setMessage(\"Failed to set device clock...\")\n\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\tAlertDialog alert = builder.create();\n\t\t\talert.show();\n\t\t  }\n\t    }\n\n    The `modifyAccessManagerProfileXML` method looks like:\n\n    ![img](images/MxAccessManagerTutorialImages/modify_profile_method.jpg)\n\n    You can see all the errors are gone now. The sample XML for \"without Whitelist\" feature, which is passed to `processProfile` method looks like:\n\n        :::java\n        modifyData[0] = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n\t\t+ \"<characteristic type=\\\"Profile\\\">\"\n\t\t+ \"<parm name=\\\"ProfileName\\\" value=\\\"MxAccessManagerProfile\\\"/>\"\n\t\t+ \"<characteristic type=\\\"AccessMgr\\\">\"\n\t\t+ \"<parm name=\\\"OperationMode\\\" value=\\\"1\\\"/>\"\n\t\t+ \"</characteristic>\" + \"</characteristic>\";         \n\nThat's it!!! We are done with all the coding and configuration part that will allow us to implement Access Manager both programmatically as well as using wizard. Now let us run and test the application.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug. \n\n2. Run the application.\n\n    ![img](images/MxAccessManagerTutorialImages/home_screen.png)\n\n\tYou can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message, which indicates that the app has successfully implemented settings that we had configured in the wizard. You won't see any change as we had disabled the whitelist in the wizard. \n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.  \n  \n\tNow you can see the two Radio Buttons of which first is checked. It means we are in a single user mode without whitelist. \n\n3. Click the Radio Button Single user mode with whitelist and the respective view will be visible to user\n\n    ![img](images/MxAccessManagerTutorialImages/with_whitelist.png)\n\n    Now you have enabled whitelist. It means you can now add/remove applications to/from the whitelist. Let us add few applications to the whitelist. \n\n5. Select \"Add No Packages\" drop-down and select \"Add specified packages\" option to add few applications to the whitelist.\n\n    ![img](images/MxAccessManagerTutorialImages/add_package_spinner.png)\n\n    It will display an Edit Text to provide the package names of the applications that you want to add to whitelist.\n   \n    ![img](images/MxAccessManagerTutorialImages/add_package_edit_text.png)\n\n    Provide package names of few applications separated by commas. (Ex. com.symbol.mxaccessmanagertutorial, com.allinstalledapps, com.symbol.mxgprstutorial).\n\n    ![img](images/MxAccessManagerTutorialImages/add_packages.png)\n\n    > Note: Make sure to add current application to the white list in order to set access restrictions on other applications. Otherwise user won't be able to access the current application that has access restrictions on other applications and eventually user has to perform Enterprise Reset on the device to get the default settings back.\n\n    Keep the Full Access and press the \"Set\" button. \n\n    ![img](images/MxAccessManagerTutorialImages/whitelist_mode.png)\n\n    You can see that the device is in single user mode with whitelist. It shows the three applications in the whitelist whose package names we had provided in Add Package Edit Text. The other developed apps are not visible in this mode.\n\n6. Now let us remove one application from the whitelist by going to our app and adding the package name in the delete package Edit Text.\n\n    But if you start the application, it will disable whitelist as we have set that feature in the wizard. So we have to comment some code to ensure delete package from the whitelist feature works fine.\n\n    Go to `onOpened` method and comment the highlighted code in the following snapshot.\n \n    ![img](images/MxAccessManagerTutorialImages/commented_code.jpg) \n\n    > Note: You can uncomment this code later after verifying \"Delete Package from Whitelist\" feature.   \n\n7. Run the application again.\n    Check the Radio Button \"Single User with Whitelist\" -> click \"Delete No Packages\" drop down -> Select \"Delete Specified Packages(s)\" option -> Add name of the application package in Edit Text that you want to remove from whitelist (Ex. com.allinstalledapps).\n\n    ![img](images/MxAccessManagerTutorialImages/delete_package.png)\n\n    Click \"Set\" button.\n\n    ![img](images/MxAccessManagerTutorialImages/delete_package.png)\n\n    You can see that the application with package name \"com.allinstalledapps\" has been removed from the whitelist as there are only two application whereas we had added three application previously in the whitelist.\n\n8. In this way, you can configure and test various features of Mx Access Manager on your Symbol device.      \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure access to different applications on your device through your application using Mx Access Manager, let us try to understand and implement some of the other Mx features. So in the next tutorial, we will concentrate on the \"Certificate Manager\" Mx feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/MxAccessManagerTutorial.zip)."},{"key":"guide-tutorial-tutMxAppManager","name":" Application Management with AppManger Profile Feature","md":"# Application Management with AppManger Profile Feature\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will help configuring and managing device applications using the [AppManager](#guide-profiles-refAppManager) feature of EMDK Profiles. \n\nUsing this feature, a user can perform various App Management operations such as:\n \n* **Install:** - It allows you to install an android application with the user provided apk file location.\n* **Uninstall:** - This will remove the specified application from the device.\n* **Upgrade:** - This will upgrade/downgrade the specified application. The application must already exists on the device or you will receive an error (Use the Install parameter instead.\n* **Default Launcher:** - You can provide a different application launcher to enable. The launcher application must reside on the device already.\n* **Enable and Disable Application:** - Provide a package name of the applications that you want to enable or disable. Disabling an application will disable the ability to launch the application.\n* **Clear App List:** - It will clear the list of recent apps that you opened.\n* **Manage Protected List:** - You can manage which applications are on the protected list by adding and removing application from protected list.\n* **Enable and Disable App Info:** - The application info dialog shows detailed information about the application as well as allow you to perform actions like: Force Stop, Enable/Disable, Clear Data, Clear Cache. Specify the application's package name that you would like to enable or disable this feature for. \n\n    > Note: Please refer the compatibility matrix to check availability these features across various symbol devices [here](#guide-profiles-refAppManager).   \n\n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 2.1 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxAppManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxAppManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxAppManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxAppManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxAppManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxAppManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxAppManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxAppManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxAppManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxAppManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxAppManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxAppManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxAppManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The AppManager Profile Feature\n1. Select \"EMDKMxAppManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxAppManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxAppManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: MxAppManagerProfile).\n  \n    ![img](images/MxAppManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxAppManagerTutorialImages/profile_editor.jpg)\n  \n6. Select the \"App Manager\" feature from the list and click \"Right Arrow\". Using this feature you can perform various operations in your apps on the Symbol Android device. These operations could be installing apps, uninstalling apps, upgrading apps etc. as mentioned in the beginning. \n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. App Manager, Settings Manager, Wireless Manager etc.) for configuring your Symbol device based on requirements.      \n \n \n7. Click on the App Manager feature. The parameter list will be populated. \n  \n    ![img](images/MxAppManagerTutorialImages/select_app_manager_feature.jpg)\n  \n8. Provide name for this feature in order to modify this feature programatically (Ex. AppManager). Now let us install an application using the install parameter of the app manager by providing the apk path and name of the application in the specified field. (For example: /storage/sdcard1/Herald.apk)\n\n\t> Note: The path of apk could be different on different devices.\n  \n    ![img](images/MxAppManagerTutorialImages/app_manager_install_value.jpg)\n  \n9.  Click Apply and Finish. \n\n    ![img](images/MxAppManagerTutorialImages/app_manager_profile_created.jpg)  \n\n10. Click \"Close\".   \n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxAppManagerTutorialImages/emdk_config_file.jpg)\n  \n11. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager. So you can see the entry of the install feature of App Manager and its path on SD card as parameter that we entered earlier in the profile creation.\n\n    ![img](images/MxAppManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxAppManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxAppManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code.  \n    \n        :::java\n        //Assign the profile name used in EMDKConfig.xml  \n        private String profileName = \"MxAppManagerProfile\";  \n          \n        //Declare a variable to store ProfileManager object  \n        private ProfileManager profileManager = null;  \n          \n        //Declare a variable to store EMDKManager object  \n        private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\t\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\t\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\t\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\t\t     \n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxAppManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. This must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:  \n\n        :::java\n        this.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxAppManagerTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxAppManagerTutorialImages/on_opened_method_2.jpg)\n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxAppManagerTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxAppManagerTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxAppManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.  \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxAppManagerTutorialImages/on_destroy_method.jpg) \n\n## Running the Application\n\n1. That's it, We are done with the configurations and coding. Now let's run the application.\n\n2. Connect the device (having the latest EMDK runtime) to USB port. The Herald application is not present on the device before running this application.\n\n    >Note:   \n    >Make sure the device is in USB debug.\n3. Run the application. The app displays a Toast with a success message.\n  \n\t![img](images/MxAppManagerTutorialImages/app_run.png)\n  \n4. You can see that the Herald app has now been installed on the device whose apk path we had provided earlier during profile creation.\n  \n\t![img](images/MxAppManagerTutorialImages/app_installed.png)\n\n5. Similarly we can leverage the other features (uninstall, upgrade, set as default launcher) of the App Manager by setting appropriate parameters while creating the profile.\n\n\t![img](images/MxAppManagerTutorialImages/other_app_manager_features.jpg)  \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device. \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure applications in the device using Mx App Manager feature, let us try some configuring some of the other Mx feature through profile creation. So in the next tutorial, we will concentrate on the \"Power Manager\" feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/EMDKMxAppManagerTutorial.zip)."},{"key":"guide-tutorial-tutMxCertificateManager","name":" Install CA Certificate using Certificate Manager","md":"# Install CA Certificate using Certificate Manager\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use some new Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on installing certificates on your Symbol device using [Certificate Manager](#guide-profiles-refCertManager).\n\nYou can use these installed digital certificates to identify your device for a variety of purposes, including VPN or Wi-Fi network access as well as authentication to servers by apps such as Email or Chrome. Let us create a tutorial using [Certificate Manager](#guide-profiles-refCertManager) and install a sample CA certificate that would be useful when using WiFiConfig to configure a profile that uses EAP-TLS while adding a Wi-Fi network.\n\n>Note:  \n>We can install different types of certificates (Ex. .PEM, .PFX, .P12 etc. ) but for this tutorial, we will install a sample CA certificate (.PEM file). \n        \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 3.0 and above\n* Download the sample CA Certificate from [here]() and put it on the SD card of Symbol Android device to refer it later in this tutorial.  \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxCertManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxCertManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxCertManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxCertManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxCertManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxCertManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxCertManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxCertManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxCertManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxCertManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxCertManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxCertManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxCertManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding the Certificate Manager Profile Feature\n1. Select \"CertManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxCertManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxCertManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: CertificateProfile).\n  \n    ![img](images/MxCertManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxCertManagerTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Certificate Manager, Wireless Manager, Access Manager etc.) for configuring your Symbol device based on requirements. \n  \n6. So you can see all these MX features on the left hand side of the Profile Editor window. Select the \"Certificate Manager\" feature from the list and click \"Right Arrow\".\n\n\t![img](images/MxCertManagerTutorialImages/certificate_keystore.jpg) \n\n7. Now, We have to add the feature to install our sample CA certificate on Symbol device. But, we need to make sure that before installing or uninstalling certificates, a keystore must exist. It means, we need to initialize Android Keystore on our Symbol device. When you initialize the Android keystore you create a new keystore replacing any previously existing one. You can choose to perform this action as a separate EMDK profile or include the Certificate Manager feature multiple times in one profile. We will use Certificate Manager feature multiple times with the same profile in this tutorial. This Certificate Manager feature will be used to initialize Android Keystore.\n\n\tProvide some name in the \"Name\" field (Ex. \"MyKeystore\"). The \"Name\" field is used to identify each feature, which is required when editing features programmatically. You can also keep the \"Name\" field empty.\n\n8. Click the \"Certificate Action\" drop-down and select \"Initialize Android Keystore\" option.\n\n\t![img](images/MxCertManagerTutorialImages/initialize_android_keystore.jpg)\n\n9. Provide the password required to initialize the Android Keystore in \"Keystore Password\" field (Ex. 1234).\n\n\t![img](images/MxCertManagerTutorialImages/keystore_password.jpg)\n\n10. As mentioned, we will add another Certificate Manager feature in the same profile to install our sample CA Certificate on Symbol device. Select the \"Certificate Manager\" feature from the list and click \"Right Arrow\". This Certificate Manager will be use to install CA Certificate on Symbol device.\n\n\t![img](images/MxCertManagerTutorialImages/certificate_feature.jpg)  \n\n    Provide some name in the \"Name\" field (Ex. MyCertificateManager). The \"Name\" field is used to identify each feature, which is required when editing features programmatically. You can also keep the \"Name\" field empty.\n\n    So as discussed, you can install different types of certificates (.PEM, .PFX, .P12 etc. ) on your Symbol device using Certificate Manager. Here, we will install a sample CA certificate (.PEM file) that would be useful when using WiFiConfig to configure a profile that uses EAP-TLS while adding a Wi-Fi network. \n\n    Execute following steps to proceed:\n \n\t* Click on \"Certificate Action\" drop-down in the wizard and select the option \"Install Certificate\".    \n\n    ![img](images/MxCertManagerTutorialImages/install_cert.jpg)\n\n    >Note:  \n    >To uninstall any installed certificate, select \"Uninstall Certificate\" option from \"Certificate Action\" drop-down and provide the appropriate alias name of certificate you want to uninstall.  \n\n\t* Provide some name in \"Certificate Alias\" field to refer your certificate while performing different actions on it such as uninstall (Ex. Test-Certificate).\n\n\t* Click on \"Certificate Type\" drop-down in the wizard and select the option \"CA Certificate (.PEM file)\".\n\n\t![img](images/MxCertManagerTutorialImages/cert_type.jpg)\n\n\t* Provide the SD Card path of the Sample CA Certificate that we put in the beginning (/storage/sdcard1/test.pem).\n\n\t> Note: SD Card Path may vary based on where you put your certificate.\n\n\t* Keep rest of the fields as it is and your profile wizard for Certificate Manager should look like:  \n \n    ![img](images/MxCertManagerTutorialImages/cert_manager_wizard.jpg)   \n \n11. Click Apply to apply the settings we provided    \n  \n    ![img](images/MxCertManagerTutorialImages/certificate_profile_created.jpg)\n\n\t> Note: As you can see, we have added two Certificate Manager features in the same profile to Initialize Android Keystore and Install sample CA Certificate respectively on the Symbol device.\n\n12. Click Finish and your Certificate profile for initializing Android Keystore and installing CA Certificate is created.\n\n    ![img](images/MxCertManagerTutorialImages/certificate_manager_profile_created.jpg) \n  \n13. Click \"Close\".\n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxCertManagerTutorialImages/emdk_config_file.jpg)\n  \n14. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/MxCertManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxCertManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxCertManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"CertificateProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n\tSo this is how variable declaration looks like:\n\n\t![img](images/MxCertManagerTutorialImages/variables_added.jpg)\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxCertManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxCertManagerTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxCertManagerTutorialImages/on_opened_method_2.jpg) \n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxCertManagerTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxCertManagerTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxCertManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.\n           \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxCertManagerTutorialImages/on_destroy_method.jpg) \n\nThat's it!!! We are done with all the coding and configuration part that will let us install the sample CA certificate on Symbol Android device. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n    Before running the application, it is recommended that the key store be cleared. (Settings -> Security -> Clear Credentials) \n\n    ![img](images/MxCertManagerTutorialImages/clear_credentials.png)\n\n\t> Note: If \"Clear Credentials\" option is disabled, you don't need to clear it.  \n\n2. Run the application.\n\n    ![img](images/MxCertManagerTutorialImages/home_screen.png)\n\n    You can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message, which indicates that the sample CA certificate with alias name \"Test-Certificate\" has been installed.\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n  \n3. Let us verify this by executing following steps on your Symbol device:\n\n\t* Navigate to Settings -> Wi-Fi. \n\t* Press \"+\" button to add a Wi-Fi network.\n\n\t![img](images/MxCertManagerTutorialImages/add_network.png)\n\n\t* Tap the \"Security\" drop-down and select \"802.1x EAP\" option. \n\n    ![img](images/MxCertManagerTutorialImages/security_option.png)\n\n\t* Now scroll down and tap on \"EAP method\" drop-down. Select \"TLS\" option.\n\n\t![img](images/MxCertManagerTutorialImages/tls.png)\n\n\t* Scroll down and tap on \"CA Certificate\" option and you should see the alias name (Test-Certificate) of the Sample CA certificate that we installed using Profile wizard.\n\n\t![img](images/MxCertManagerTutorialImages/ca_certificate_installed.png)\n\n\tThe alias listed can become the value to use as the certificate when using Wi-Fi Config to configure a profile that uses EAP-TLS.\n\n4. You can also uninstall the installed certificates through Profile Manager wizard by simply selecting \"Uninstall Certificate\" option in the \"Certificate Action\" and proceed.\n\n\t![img](images/MxCertManagerTutorialImages/uninstall_certificate.jpg)\n\n5. This is how Certificate Manager lets us configure different types of certificate on the Symbol Android device using Profile Wizard. \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure various types of certificates using Certificate Manager on your Symbol devices through applications, let us try to understand and implement some of the other new Mx features introduced in V 3.0. So in the next tutorial, we will concentrate on the \"XML Manager\" Mx feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](Link for Certificate Manager Source Code)"},{"key":"guide-tutorial-tutMxClock","name":" Setting The Clock With ProfileManager","md":"# Setting The Clock With ProfileManager\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will configure the device's date and time using the [Mx Clock](#guide-profiles-refClockManager) feature through Profile Manager of the EMDK for Android.\n\nThis feature expects following attributes from user to set Clock on the symbol Android device:\n\n* **Timezone:** - TimeZone in Android supported format\n* **Date:** - UTC Date to set on the device.\n* **Time:** - UTC Time to set on Symbol device.\n* **AutoTime:** - Select this feature to use network provided time on the symbol device. \n\n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 2.1 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxClockTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxClockTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxClockTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxClockTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxClockTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxClockTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxClockTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxClockTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxClockTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxClockTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxClockTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxClockTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxClockTutorialImages/java_compiler_settings.jpg) \n\n## Adding an Clock Profile\n1. Select \"EMDKMxClockTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxClockTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxClockTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: MxClockProfile).\n  \n    ![img](images/MxClockTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxClockTutorialImages/profile_editor.jpg)\n  \n6. \tSelect the \"Clock\" feature from the list and click \"Right Arrow\". Using this feature you can configure the date and time of the Symbol device. \n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Clock Manager, GPRS Manager, Certificate Manager etc.) for configuring your Symbol device based on requirements.        \n\n7. Click on Clock feature. The parameter list will be populated.\n  \n    ![img](images/MxClockTutorialImages/clock_feature_parameters.jpg)\n  \n8. Enter the TimeZone, Date and Time you wish to enter. All the timings need to be in UTC. It means if you want to set the Timezone to PST, you will need to set the clock to GMT time and it will automatically change it to the local time for you. The AutoTime feature lets you use network provided time on the Symbol Android device. Keep it unchecked for this tutorial.\n\n    > Note: It means the time you enter always has to be in GMT.  \n  \n    ![img](images/MxClockTutorialImages/clock_parameters_values.jpg)\n  \n\tForEample:  \n\t* **Name**: MxClock\n\t* **TimeZone**: GMT-07:00\n\t* **Date**: 2014-12-22\n\t* **Time**: 20:00:00\n\t* **AutoTime**: Unchecked\n\n    Here , we have set the Timezone as GMT-07:00. It means if we want to set the PST time of 1PM, we have to set the GMT time as 8PM (20:00:00 in 24 hour format) and it will automatically set the PST time of 1PM for us. \n\n9.  Click Apply and Finish. \n\n    ![img](images/MxClockTutorialImages/clock_profile_created.jpg)  \n\n10. Click \"Close\".   \n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxClockTutorialImages/emdk_config_file.jpg)\n  \n11. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager. So you can see the entry of the clock feature and its parameters that we entered earlier in the profile creation.\n\n    ![img](images/MxClockTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxClockTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\" />\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxClockTutorialImages/manifest_permissions_added.jpg)\n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code.\n\n\t>Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.  \n    \n        :::java\n        //Assign the profile name used in EMDKConfig.xml  \n        private String profileName = \"MxClockProfile\";  \n          \n        //Declare a variable to store ProfileManager object  \n        private ProfileManager profileManager = null;  \n          \n        //Declare a variable to store EMDKManager object  \n        private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";     \n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxClockTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. This must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:  \n\n\t> Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`\n\n        :::java\n        this.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to set device clock...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxClockTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxClockTutorialImages/on_opened_method_2.jpg)\n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxClockTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxClockTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Device Clock set successfully...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxClockTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.  \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxClockTutorialImages/on_destroy_method.jpg)  \n\n## Running the Application\n\n1. That's it, We are done with the configurations and coding. Now let's run the application.\n2. Connect the device (having the latest EMDK runtime) to USB port.\n    >Note:   \n    >Make sure the device is in USB debug.\n3. Note the date and time of the device before running the application.\n\n\t![img](images/MxClockTutorialImages/date_time_before_running.png)\n\n4. Run the application. If everything goes well, the app will show a success message. You can now see the time of the device has been changed to the PST timezone of 1PM as we had set it to the GMT-07:00, 8PM (20:00:00 in 24 hour format) in the wizard.\n  \n\t![img](images/MxClockTutorialImages/time_after_running_app.png)\n\n\tYou can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message.\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n  \n5. Notice that the date and time of the device has now been changed accordingly when you open the notification bar.\n  \n\t![img](images/MxClockTutorialImages/date_time.png)  \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n    >Note: * Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device. \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure date and time using Mx feature, let us try some configuring some of the other Mx feature through profile creation. So in the next tutorial, we will concentrate on the \"App Manager\" feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/EMDKMxClockTutorial.zip)."},{"key":"guide-tutorial-tutMxDefaultLauncher","name":" Set Default Launcher Application Using App Manager ","md":"# Set Default Launcher Application Using App Manager \n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on one of the functions of App Manager API, which allows user to set any launcher application as a default launcher application using App Manager API.\n\nThe tutorial would enable user to set an application as default launcher using:\n\n**1.  EMDK Profile Manager wizard:** \n\nInitially, we will configure EHS (Enterprise Home Screen) launcher application as the default launcher application using Profile Manager wizard. [Enterprise Home Screen (EHS)](https://developer.motorolasolutions.com/docs/DOC-1875) is a replacement application launcher, for Symbol Android devices, designed to allow only specified applications to be launched. So this launcher will replace the existing launcher application in the device.\n\n**2. App Manager API:**\n\nOnce the EHS has been set as the dafault launcher application, we will modify this setting by setting another application as default launcher through the code using App Manager API for default launcher. You can use any applicable launcher application. We will use [Galaxy Launcher](http://www.appsapk.com/galaxy-launcher/) application to set  as default launcher application through code in this tutorial.\n\nThis allows you to understand how to configure parameters using Profile Manager and modify it using App Manager API.   \n\t\n \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 2.1 and above\n* Download and install the required launcher applications before getting started with the tutorial. \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Downloading required Launcher Applications:\nAs discussed above, we will now download and install the two launcher applications ([EHS](https://developer.motorolasolutions.com/docs/DOC-1875) and [Galaxy Launcher](http://www.appsapk.com/galaxy-launcher/)).\n\n* You can download Enterprise Home Screen application [here](https://portal.motorolasolutions.com/Support/US-EN/Resolution?solutionId=92627&redirectForm=search&searchQuery=%3FsearchType%3Dsimple%26searchTerm%3DDownload%20EHS). Unzip the file to get the APK to install.\n* You can download Galaxy Launcher application [here](http://www.appsapk.com/galaxy-launcher/).\n\nOnce downloaded, you can put them in SD card of the the device and install both of these launcher applications.\n\nThe App Manager API requires the Android *package name* of the application that you want to set as default launcher. If we know the package name then we can specify it in the field, but in this case we don't know as we have downloaded theses APK files from different sources.\n\n   >Note:\n   >Android device does not provide package names of the installed applications.\n\nSo we have [created an application](https://s3.amazonaws.com/emdk/Tutorials/AllInstalledApps-Source.zip) that finds all the installed applications programmatically and displays their package names along with the application name in a list.\n\nYou can [download](https://s3.amazonaws.com/emdk/Tutorials/AllInstalledApps.apk) the application and install it - or modify the [source](https://s3.amazonaws.com/emdk/Tutorials/AllInstalledApps-Source.zip) to your liking. Once installed, open the app and you can find the package names of both the applications.\n\nSo, the Package name for EHS Launcher App is **com.motorolasolutions.enterprisehomescreen**\n\n   ![img](images/MxDefaultLauncherTutorialImages/ehs_app.jpg) \n\nPackage name for Galaxy Launcher App is **com.epic.launcher.tw**\n\n   ![img](images/MxDefaultLauncherTutorialImages/galaxy_launcher_app.jpg) \n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxDefaultLauncherTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxDefaultLauncherTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxDefaultLauncherTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxDefaultLauncherTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxDefaultLauncherTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxDefaultLauncherTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxDefaultLauncherTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxDefaultLauncherTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxDefaultLauncherTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxDefaultLauncherTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxDefaultLauncherTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxDefaultLauncherTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxDefaultLauncherTutorialImages/java_compiler_settings.jpg) \n\n## Adding The AppManager Profile \n1. Select \"MxDefaultLauncherTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxDefaultLauncherTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxDefaultLauncherTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: DefaultLauncherProfile).\n  \n    ![img](images/MxDefaultLauncherTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxDefaultLauncherTutorialImages/profile_editor.jpg)\n  \n6. Select the \"App Manager\" feature from the list and click \"Right Arrow\". Using this feature you can perform various operations in your apps on the Symbol Android device. These operations could be installing apps, uninstalling apps, upgrading apps and setting specific app as default launcher. We will be concentrating on Default Launcher feature in this tutorial. \n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. USB Manager, Settings Manager, UI Manager etc.) for configuring your Symbol device based on requirements.      \n \n \n7. Click on the App Manager feature. The parameter list will be populated.  \n  \n    ![img](images/MxDefaultLauncherTutorialImages/select_app_manager_feature.jpg)\n\n8. Now Click on the drop-down of the action field to see the supported features by App Manager. Select \"Set as Default Launcher\" feature.\n\n    ![img](images/MxDefaultLauncherTutorialImages/app_manager_features.jpg)\n\n    ![img](images/MxDefaultLauncherTutorialImages/feature_default_launcher.jpg)\n  \n9. Keep the 'Name' field empty. Now let us set earlier installed EHS launcher application as default launcher application. So provide the previously found package name of EHS application (com.motorolasolutions.enterprisehomescreen).\n\n\t> Note: If you have a different launcher application then provide the package name accordingly.\n  \n    ![img](images/MxDefaultLauncherTutorialImages/app_manager_install_value.jpg)\n  \n10. Click Apply and Finish. \n\n    ![img](images/MxDefaultLauncherTutorialImages/app_manager_profile_created.jpg)\n  \n11. Click \"Close\".   \n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxDefaultLauncherTutorialImages/emdk_config_file.jpg)\n  \n12. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager. So you can see the entry of the 'Set Default Launcher' feature of App Manager and the package name of the launcher application that we entered earlier in the profile creation.\n\n    ![img](images/MxDefaultLauncherTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxDefaultLauncherTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxDefaultLauncherTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code.\n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        //Assign the profile name used in EMDKConfig.xml  \n        private String profileName = \"DefaultLauncherProfile\";  \n          \n        //Declare a variable to store ProfileManager object  \n        private ProfileManager profileManager = null;  \n          \n        //Declare a variable to store EMDKManager object  \n        private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\t\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\t\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\t\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";     \n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxDefaultLauncherTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. This must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    >Note:\n    >Set the name of the method argument to `emdkManager`  \n\n        :::java\n        this.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:  \n\n        :::java\n        if (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the\n\t\t\t// profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t    if (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\t\t\t} else {\n\t\t\t\t// Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to set Default Launcher...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t    (DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\t\t}\n\n\tThis `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method. So we will call a method `handleEMDKResult` to handle this [EMDKResults](#api-EMDKResults), which we will create in the next step.\n\n\t\t:::java\n\t\t// Method call to handle EMDKResult\n\t\thandleEMDKResult(results);  \n\n    Your onOpened method should now look like this:\n    \n    ![img](images/MxDefaultLauncherTutorialImages/on_opened_method.jpg)\n\n3. It shows error as we have not yet declared `handleEMDKResult` method. So let us create this method, which would get the XML String response from [EMDKResults](#api-EMDKResults), call the `parseXML` method to parse it and eventually call `displayResults` method to display output in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html), which we would be declaring in coming steps. \n\n\t\t:::java\n\t\t// Method to handle EMDKResult by extracting response and parsing it\n\t\tpublic void handleEMDKResult(EMDKResults results) {\n\t\t\t// Get XML response as a String\n\t\t\tString statusXMLResponse = results.getStatusString();\n\t\n\t\t\ttry {\n\t\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t\t// for the parser\n\t\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t\t// Call method to parse the response\n\t\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\n\t\t\t// Method call to display results in a dialog\n\t\t\tdisplayResults();\n\t\t}\n\n\tYour `handleEMDKResult` method should now look like this:\n    \n    ![img](images/MxDefaultLauncherTutorialImages/handle_emdk_result.jpg)\n\n4. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxDefaultLauncherTutorialImages/parse_xml.jpg) \n\n5. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxDefaultLauncherTutorialImages/build_failure_message.jpg)\n\n6. In this step, we will add `displayResults` method to display the result of profile operation. If the Profile is successfully applied, we will display a [Toast](http://developer.android.com/guide/topics/ui/notifiers/toasts.html) with a success message and in case of any errors, we will display a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with the corresponding error details.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\n\t\t\t Toast.makeText(MainActivity.this,\n\t\t\t\t\t\"Default Launcher changed successfully...\",\n\t\t\t\t\tToast.LENGTH_SHORT).show();\n\n\t\t  } else {\n\t\t\t // Alert Dialog to display the error details while Profile creation\n\t\t\t // operation of MX features\n\t\t\t AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\t\tMainActivity.this);\n\t\t\t // set title\n\t\t\t alertDialogBuilder.setTitle(status);\n\t\t\t // call buildFailureMessage() method to set failure message in\n\t\t\t // dialog\n\t\t\t alertDialogBuilder.setMessage(buildFailureMessage());\n\t\t\t alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t // create alert dialog\n\t\t\t AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t\t // show it\n\t\t\t alertDialog.show();\n\t\t  }\n\t    }\n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxDefaultLauncherTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.  \n    \n7. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxDefaultLauncherTutorialImages/on_destroy_method.jpg) \n\n    Settings at this point would allow you to apply EHS (Enterprise Home Screen) as the default launcher of your Mototrola Android device when we run the application.\n\n    But we also want to set the another launcher application (Galaxy Launcher) as the default launcher programmatically. So we will add the required code to implement it.\n\n8. Remove the default \"TextView\", inside \"res/layout/activity_main.xml\".\n\n9. Add the following code that has an Edittext to enter the package name of the launcher application and a button to implement operation.\n\n        :::xml\n        <TextView\n        android:id=\"@+id/label\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerInParent=\"true\"\n        android:text=\"Enter Package Name:\"\n        android:textSize=\"18sp\"\n        android:textStyle=\"bold\" />\n\n        <EditText\n        android:id=\"@+id/package_name\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@+id/label\" android:hint=\"Package Name\"\n        android:layout_margin=\"20dip\" />\n\n        <Button\n        android:id=\"@+id/btn_set_default_launcher\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_below=\"@+id/package_name\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_margin=\"5dip\"\n        android:text=\"Set Default Launcher\" />\n\n    The layout file 'activity_main.xml' should now look like:\n\n    ![img](images/MxDefaultLauncherTutorialImages/activity_main.jpg)\n\n10. Now, In the Main activity make an entry of these UI elements using following code:\n\n        :::java\n\t\t// Edit Text ro enter the package name of the launcher application\n\t    private EditText packageNameEditText;\n\t\n\t    // Button to set the application as default launcher\n\t    private Button setDefaultLauncherButton;\n\n    So far the code looks like:\n\n\t![img](images/MxDefaultLauncherTutorialImages/ui_element_reference.jpg) \n\n11. Get the reference of these UI elements in `onCreate` method.\n\n        :::java\n        packageNameEditText = (EditText) findViewById(R.id.package_name);\t\t\n\t\tsetDefaultLauncherButton = (Button) findViewById(R.id.btn_set_default_launcher);\n \n     The `onCreate` method now looks like:\n\n    ![img](images/MxDefaultLauncherTutorialImages/reference_on_create.jpg)\n\n12. In this step, we will write a function that takes package name of the launcher application as input parameter and programmatically sets that application as the default launcher application.\n\n    This method prepares the xml input for the `processProfile` method by accepting the package name of the launcher application provided by the user. It then calls the `handleEMDKResult` method that we have already created to handle the [EMDKResults](#api-EMDKResults) and display the output.\n\n    The `processProfile` method then sets the changes to `Profile Manager` and returns the result to the `EMDKResults` as follows:\n\n        :::xml\n        // Method that takes package name of the launcher application and\n\t    // programmatically sets that application as the default launcher.\n\t    public void setLauncherApplication(String packageName) {\n\n\t\t\t// Prepare XML to modify the existing profile\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\tmodifyData[0] = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n\t\t\t\t\t+ \"<characteristic type=\\\"Profile\\\">\"\n\t\t\t\t\t+ \"<parm name=\\\"ProfileName\\\" value=\\\"DefaultLauncherProfile\\\"/>\"\n\t\t\t\t\t+ \"<characteristic type=\\\"AppMgr\\\">\"\n\t\t\t\t\t+ \"<parm name=\\\"Action\\\" value=\\\"SetDefaultLauncher\\\"/>\"\n\t\t\t\t\t+ \"<parm name=\\\"Package\\\" value=\\\"\" + packageName + \"\\\"/>\"\n\t\t\t\t\t+ \"</characteristic>\" + \"</characteristic>\";\n\n\t\t\t// Call process profile to modify the profile of specified profile\n\t\t\t// name\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\t\t\t// Method call to handle EMDKResult\n\t\t\thandleEMDKResult(results);\n\t\t    } else {\n\t\t\t// Show dialog of Failure\n\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\tbuilder.setMessage(\"Failed to set Default Launcher...\")\n\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\tAlertDialog alert = builder.create();\n\t\t\talert.show();\n\t\t  }\n\t    }\n\n    The method `setLauncherApplication` method should look like: \n\n    ![img](images/MxDefaultLauncherTutorialImages/set_launcher_app_method.jpg) \n\n13. Let us call this method by implementing on click listener of the `setDefaultLauncherButton` button. This listener will get the package name entered by user from the Edit Text and call the `setLauncherApplication` method for a valid package name as follows:\n\n        :::java\n        // On Click Listener for the button\n\t\tsetDefaultLauncherButton.setOnClickListener(new OnClickListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\t// TODO Auto-generated method stub\n\n\t\t\t\t// Get the package name entered by user from the Edit Text\n\t\t\t\tString packageName = packageNameEditText.getText().toString();\n\n\t\t\t\tif (TextUtils.isEmpty(packageName))\n\t\t\t\t\t// Invalid Package Name\n\t\t\t\t\tToast.makeText(MainActivity.this,\n\t\t\t\t\t\t\t\"Please enter a valid package name...\",\n\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\telse\n\t\t\t\t\t// Call the method to set launcher application as default\n\t\t\t\t\t// launcher\n\t\t\t\t\tsetLauncherApplication(packageName);\n\n\t\t\t}\n\t\t}); \n\n    Finally the `onCreate` method should look like:\n\n    ![img](images/MxDefaultLauncherTutorialImages/final_on_create_method.jpg)\n\nThat's it!!! We are done with all the coding and configuration part. Now let us run the application.\n \n\n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n    \n    The device currently has its own default launcher. Before Running the application, make sure that the two launcher applications (EHS and Galaxy Launcher) are already installed in the device.\n\n    The default launcher of TC 55 device looks like:\n\n    ![img](images/MxDefaultLauncherTutorialImages/default_launcher.png)\n\n2. Run the application. The app sets the EHS (Enterprise Home Screen) application as the default launcher application as we had provided its package name while profile creation.\n\n    The app automatically closes by displaying a success message as the launcher is changed. \n  \n\t![img](images/MxDefaultLauncherTutorialImages/ehs_launcher.png)\n  \n4. Now we will set Galaxy Launcher as the default launcher application. In order to do that, press and hold the menu key.\n\n    ![img](images/MxDefaultLauncherTutorialImages/device_home_key.png)\n\n    Select the \"MxDefaultLauncherTutorial\" app and the app will open.\n  \n\t![img](images/MxDefaultLauncherTutorialImages/mx_default_launcher_app.png)\n\n5. Enter the package name of Galaxy Launcher application that we had obtained previously **(com.epic.launcher.tw)**.\n \n\t![img](images/MxDefaultLauncherTutorialImages/enter_package_name.png)\n\n6. Click `Set Default Launcher` button. The app will now set Galaxy Launcher as the default launcher application. The app will close automatically displaying a success message.\n\n    ![img](images/MxDefaultLauncherTutorialImages/galaxy_launcher.png)\n\n    > Note:\n    > In case of failure, the app will display a failure message in an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) and no change will take place.  \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device. \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure applications in the device using Mx App Manager feature, let us try some configuring some of the other Mx feature through profile creation. So in the next tutorial, we will concentrate on the \"Power Manager\" feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/EMDKMxDefaultLauncherTutorial.zip). You can also [download](https://s3.amazonaws.com/emdk/Tutorials/AllInstalledApps.apk) the Package Name helper application and install it - or modify the [source](https://s3.amazonaws.com/emdk/Tutorials/AllInstalledApps-Source.zip) to your liking.\n"},{"key":"guide-tutorial-tutMxErrors","name":" Errors When Processing Profiles","md":"# Errors When Processing Profiles\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will analyze MX errors that we get while using MX features that are declared in Profile creation. These MX errors may occur due to some invalid input while creating a profile or some incorrect device configuration.\n\nIn this tutorial we would be deliberately producing errors by providing invalid inputs in some of the MX features while profile creation, just to see the errors using `getStatusDocument` or `getStatusString` of `EMDKResults`. We would obtain the error description by parsing the resulting XML response and compare the output with the usual working case. \n\nThe goal here is to make you understand how to find errors and correct them if there are any.\t\n \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 2.1 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxErrorsTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxErrorsTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxErrorsTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxErrorsTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxErrorsTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxErrorsTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxErrorsTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxErrorsTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxErrorsTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxErrorsTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxErrorsTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxErrorsTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxErrorsTutorialImages/java_compiler_settings.jpg) \n\n## Adding the MX Errors Profile that includes Clock feature\n\n1. Select \"MxErrorsTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxErrorsTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxErrorsTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: MxErrorsProfile).\n  \n    ![img](images/MxErrorsTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxErrorsTutorialImages/profile_editor.jpg)\n  \n6. Now select Clock feature from the list and click \"Right Arrow\". Using this feature, we will configure the device clock. But we will provide incorrect values while setting Clock parameters and in the code we will parse the XML response and display the result in a dialog.\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Wi-Fi Manager, GPRS Manager, Access Manager etc.) for configuring your Symbol device based on requirements.      \n \n \n7. Click on the Clock feature. The parameter list will be populated.  \n  \n    ![img](images/MxErrorsTutorialImages/select_clock_feature.jpg)\n\n8. Enter the Clock parameters such as Timezone, Date and Time. The parameters need to be in a certain format mentioned in the wizard for each field. But we will enter incorrect value in the \"Timezone\" field (For Example \"MMT\" which is not a valid TimeZone) and proceed.  \n\n    > Note:\n    > Keep the \"Name\" field empty and AutoTime field unchecked. \n\n    ![img](images/MxErrorsTutorialImages/clock_features.jpg)\n  \n9.  Click Apply and Finish. \n\n    ![img](images/MxErrorsTutorialImages/error_profile_created.jpg)  \n\n10. Click \"Close\".   \n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxErrorsTutorialImages/emdk_config_file.jpg)\n  \n12. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager. An entry of \"Clock\" feature is created in EMDKConfig.xml file with the attributes that we had set while profile creation. \n\n    ![img](images/MxErrorsTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxErrorsTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxErrorsTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code.\n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        //Assign the profile name used in EMDKConfig.xml  \n        private String profileName = \"MxErrorsProfile\";  \n          \n        //Declare a variable to store ProfileManager object  \n        private ProfileManager profileManager = null;  \n          \n        //Declare a variable to store EMDKManager object  \n        private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\t\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\t\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\t\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";     \n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxErrorsTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. This must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    >Note:\n    >Set the name of the method argument to `emdkManager`  \n\n        :::java\n        this.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxErrorsTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxErrorsTutorialImages/on_opened_method_2.jpg)\n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxErrorsTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxErrorsTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxErrorsTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.      \n                            \n6. Now let's override the `onDestroy` method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxErrorsTutorialImages/on_destroy_method.jpg) \n\n\nThat's it!!! We are done with all the coding and incorrect configuration. Now let us run the application and we should get the error in a dialog.\n \n\n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n2. Run the application. \n\n    We get the following XML response as a return of `results.getStatusString()` in the `onOpened` method, which was saved in a `statusXMLResponse` String.\n\n        :::xml\n\t\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<wap-provisioningdoc>\n\t      <characteristic type=\"status\">\n\t\t\t<parm name=\"code\" value=\"6\"/>\n\t\t\t<parm name=\"description\" value=\"Review the XML for details\"/>\n\t\t  </characteristic>\n\t\t  <characteristic type=\"Clock\" version=\"4.2\">\n\t\t    <parm name=\"AutoTime\" value=\"false\"/>\n\t\t\t<parm-error name=\"TimeZone\" value=\"MMT\" desc=\"Invalid TimeZone\"/>\n\t\t\t<parm name=\"Date\" value=\"2014-06-27\"/>\n\t\t\t<parm name=\"Time\" value=\"15:00:00\"/>\n\t\t  </characteristic>\n\t\t</wap-provisioningdoc>\n\n    Since the response contains `<parm-error>` tag, the EMDK fails to set the clock. This is because we had set an incorrect value for \"TimeZone\" field (\"MMT\" instead of something like \"GMT+05:30\"). So when we parsed the response we looked for this `parm-error` tag and parsed `name` and `desc` fields of this error tag. Finally we displayed these field in an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) to the user.     \n  \n\t![img](images/MxErrorsTutorialImages/failed_to_set_clock.png)\n\n3. Now let's correct the parameters and get the valid output that can change the clock settings with the parameters that we declared during profile creation.\n\n    So first we will go to profile manager and edit it with the valid \"TimeZone\" value (\"GMT+05:30\" instead of \"MMT\").\n\n    ![img](images/MxErrorsTutorialImages/correct_date.jpg)\n\n    Click \"Apply\", \"Finish\" and then \"Close\".\n\n4. Run the application again.\n\n    Now since we provided valid inputs, we get a valid XML response without errors.\n\n        :::xml\n        <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t<wap-provisioningdoc>\n\t\t  <characteristic type=\"status\">\n\t\t    <parm name=\"code\" value=\"6\"/>\n\t\t    <parm name=\"description\" value=\"Review the XML for details\"/>\n\t\t  </characteristic>\n\t\t  <characteristic type=\"Clock\" version=\"4.2\">\n\t\t\t<parm name=\"AutoTime\" value=\"false\"/>\n\t\t\t<parm name=\"TimeZone\" value=\"GMT+05:30\"/>\n\t\t\t<parm name=\"Date\" value=\"2014-06-27\"/>\n\t\t\t<parm name=\"Time\" value=\"15:00:00\"/>\n\t\t  </characteristic>\n\t\t</wap-provisioningdoc>\n\n    As you can see its a valid XML response since it does not contain any `<characteristic-error>` or `<parm-error>` tag. Moreover, the clock parameters that we set during profile creation are also applied successfully to the device. \n\n    ![img](images/MxErrorsTutorialImages/clock_settings_changed.png)\n\n7. In such a way, you can use EMDKResults API with its methods to identify any kind of errors in all the MX features that you used while profile creation. This helps in debugging your application to figure out invalid parameters.            \n  \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on a Symbol device will fail because of missing shared library on the device. \n\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/MxErrorsTutorial.zip).\n"},{"key":"guide-tutorial-tutMxGPRSManager","name":" Configure Access Points using Mx GPRS Manager","md":"# Configure Access Points using Mx GPRS Manager\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on configuring Access Points of the mobile networks present in your Symbol Android device using [GPRS Manager](#guide-profiles-refGPRS) feature of Mx. [GPRS Manager](#guide-profiles-refGPRS) allows you to perform following operations on Access Points of your device's mobile network: \n\n**1. Add/Replace named APN:**\n\nUsing this feature, user can add a new APN (Access Point Name) or replace an existing APN on your device's Mobile Network. User can also set a specific APN as default. The EMDK wizard for GPRS Manager requires various inputs such as GPRS Carrier (ATT, T-Mobile or Custom), APN Name and supply details for APN (Access Point, User Name and Password).\n\n   > Note: For ATT and T-Mobile option the user and password filed are required. \n\n**2. Remove existing named APN:**\n\nThis removes a specific named APN from the list of APN's in the device's mobile network. The user just have to provide \"APN Name\" and it will remove that particular named APN from your device's mobile network. \n\n**3. Remove all existing APN's:**  \n\nThis GPRS Manager feature allows user to remove all the existing APN's from the device's mobile network. The user does not need to provide any additional input except selecting the APN Action as \"Remove all existing APN's\".\n\n\nSo now we will create a tutorial to demonstrate how to configure Access Points in the device's mobile Network by creating GPRS Profile in the EMDK Wizard.\n\n   > Note: The device should have network carrier to test GPRS Manager Tutorial.     \n   \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 2.1 and above\n* Symbol Android Device should have Network Carrier. \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxGPRSManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxGPRSManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxGPRSManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxGPRSManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxGPRSManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxGPRSManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxGPRSManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxGPRSManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxGPRSManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxGPRSManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxGPRSManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxGPRSManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxGPRSManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The GPRS Manager Profile Feature\n1. Select \"MxGPRSTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxGPRSManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxGPRSManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: GPRSProfile).\n  \n    ![img](images/MxGPRSManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxGPRSManagerTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. GPRS Manager, Wireless Manager, Clock Manager etc.) for configuring your Symbol device based on requirements.\n  \n6. So you can see all these MX features on the left hand side of the Profile Editor window. Since this is GPRS Manager Tutorial, select the \"GPRS Manager\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/MxGPRSManagerTutorialImages/gprs_feature.jpg)\n\n    So as discussed earlier we would now try the GPRS features one by one, by changing the \"APN Action\" attribute (Add/Replace, Remove, Remove All) in the wizard. In this step let us add a named APN by performing following actions. \n\n    * Provide some name in the Name field (Ex. MyGPRS). This helps in modifying a particular GPRS Manager of that name programmatically.\n    * Select APN Action as \"Add/Replace named APN\"\n    * Select GPRS Carrier from the drop-down menu. You can choose ATT, T-Mobile or Custom Carrier. As of now select \"ATT\".\n    * Provide APN Name (Ex. ATT_APN_1)\n    * Check the checkbox \"Replace if Exixts?\". This will replace APN with the same name from the list if exists.\n    * Keep the \"Make Default APN?\" field as it is. (keep it unchecked).\n    * Provide Access Point (Ex. wap.cingular)\n    * Provide User Name (Ex. WAP@CINGULARGPRS.COM)\n    * Enter Password (Ex. CINGULAR1)\n\n    ![img](images/MxGPRSManagerTutorialImages/att_gprs_details.jpg)   \n \n7. Click Apply to apply the settings we provided    \n  \n    ![img](images/MxGPRSManagerTutorialImages/att_profile_created.jpg)\n\n8. Click Finish and your GPRS profile for adding an APN is created.\n\n    ![img](images/MxGPRSManagerTutorialImages/att_gprs_profile_created.jpg) \n  \n9. Click \"Close\".\n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxGPRSManagerTutorialImages/emdk_config_file.jpg)\n  \n10. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/MxGPRSManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxGPRSManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxGPRSManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"GPRSProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxGPRSManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxGPRSManagerTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxGPRSManagerTutorialImages/on_opened_method_2.jpg)\n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxGPRSManagerTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxGPRSManagerTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxGPRSManagerTutorialImages/display_results.jpg)\n\t\n\tYou can see that all the errors are gone.  \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxGPRSManagerTutorialImages/on_destroy_method.jpg) \n\nThat's it!!! We are done with all the coding and configuration part that will let us Add/Replace a named APN. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n    > Make sure the device has Network Carrier\n\n    Before running the application, We will see the Access Points that are already present in the device's Mobile Network.\n\n    Go to device's Settings -> More (in Wireless & Networks) -> Mobile Networks -> Access Point Names\n\n    ![img](images/MxGPRSManagerTutorialImages/existing_access_points.png)\n\n    You can see there are two T-Mobile Access Points already present. After running this application, the ATT Access Point will be added in this list that we had created in GPRS Manager Wizard earlier.  \n\n2. Run the application.\n\n    ![img](images/MxGPRSManagerTutorialImages/home_screen.png)\n\n\tYou can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message.\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n\n    Now again go to device's Settings -> More (in Wireless & Networks) -> Mobile Networks -> Access Point Names \n  \n\t![img](images/MxGPRSManagerTutorialImages/att_access_point_added.png)\n\n    You can see that the ATT Access Point that we created has been added successfully to the APN's list.\n\n    > Note: The ATT Access Point is added but not selected as default because we kept \"Make Default APN?\" field unchecked in the Profile Creation Wizard.\n  \n3. In this step we will remove an existing named APN. So select the project \"MxGPRSTutorial\" and click EMDK button to go to Profile Manager.\n\n    ![img](images/MxGPRSManagerTutorialImages/profile_manager_button.jpg)\n  \n    ![img](images/MxGPRSManagerTutorialImages/att_gprs_profile_created.jpg)  \n\n5. Click Edit button and you will see our previous configuration of Add/Replace APN:\n\n    ![img](images/MxGPRSManagerTutorialImages/first_edit.jpg)\n\n    Select \"Remove existing named APN\" option from the \"APN Action\" drop down.\n\n    ![img](images/MxGPRSManagerTutorialImages/remove_apn.jpg)\n\n    Provide the unique name of the APN that you had set while Adding that named APN (Ex. ATT_APN_1)\n\n    ![img](images/MxGPRSManagerTutorialImages/remove_att_apn.jpg)\n\n    Click Apply, Finish and then Close. The Profile has now been edited successfully to remove an existing named APN.\n\n6. Run the application again. \n \n\t![img](images/MxGPRSManagerTutorialImages/home_screen.png)\n\n\tYou can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message.\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n\n    Go to device's Settings -> More (in Wireless & Networks) -> Mobile Networks -> Access Point Names\n\n    ![img](images/MxGPRSManagerTutorialImages/existing_access_points.png)\n\n    You can see that the named APN \"ATT_APN_1\" has been successfully removed from the device's APN list. \n\n6. Finally, we would test the third feature of GPRS Manager that allows us to remove all the existing APN's.\n\n    Select the project \"MxGPRSTutorial\", go to the Profile Manager and click edit button as we did in previous steps.\n\n    Select \"Remove all existing APN's\" feature from the \"APN Action\" drop-down of GPRS Profile.\n\n    ![img](images/MxGPRSManagerTutorialImages/remove_all_apn.jpg)\n\n    Click Apply, Finish and then Close buttons.\n\n7. Now Run the application for the final time to ensure all APN's are removed from the device's APN list.\n\n    ![img](images/MxGPRSManagerTutorialImages/home_screen.png)\n\n\tYou can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message.\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n\n    To verify, go to device's Settings -> More (in Wireless & Networks) -> Mobile Networks -> Access Point Names \n  \n\t![img](images/MxGPRSManagerTutorialImages/all_apn_removed.png)\n\n    You can now see that all the APN's have been successfully removed from the device's APN list.\n\n    This is how the GPRS manager lets us configure Access Points of the Symbol device.\n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol Android device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure the Access Points on your Symbol Android devices through applications, let us try to understand and implement some of the other Mx features. So in the next tutorial, we will concentrate on the \"Access Manager\" Mx feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/MxGPRSTutorial.zip)."},{"key":"guide-tutorial-tutMxPersistManager","name":" Persist MX configurations using Persist Manager API","md":"# Persist MX configurations using Persist Manager API\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on [Persist Manager](#guide-profiles-refPersistanceManager) API, which allows user to persist configuration XML's. These XML's contain various Mx device configuration settings that user may want to persist even after performing Factory Reset or Enterprise Reset on the device. The persisted settings are applied by default when we Factory or Enterprise Reset the device so that user does not have to apply them manually again and again. This is the main purpose of Mx Persist Manager feature. Overall, the Persist Manager API supports following features:   \n\n**1. Adding XML to be Persisted:**\n\nUsing this feature, user can create a new XML to be persisted that has specific configuration settings. (Ex. Mx Clock details)\n\n   > Note: The profile feature \"Data Capture Manager\" will not be persisted.\n\n**2. Removing a Persisted XML:**\n\nUser can remove a specific persisted XML through wizard or API query.\n\n**3. Query to Receive List of all Persisted XML's:**  \n\nThis feature allows user to use EMDK V 2.1 API to query Persist Manager in order to receive a list of all persisted XML's.\n\n**4. Query based on Parameters:** \n \nUsing this feature, user can find a specific persisted XML based on Persist Manager attributes that were used while persisting the XML. These attributes are:\n\n* PersistAsVersion\n* PersistAsOrder\n* PersistIfError\n\n**5. Apply Persisted XML settings after Enterprise Reset:**\n\nThis feature re-sends the persisted XML's to the Mx Framework after an Enterprise Reset. This helps in re-applying configuration settings back to the device for which user had Persisted these XML's.\n\n   > Note: \n   > In order for associated files to survive an \"Enterprise Reset\" they must be placed in the Enterprise Folder on the device. A \"Factory Reset\" will not persist any profiles features.  \n\n\nSo now we will create a tutorial to demonstrate how the configuration XML's are persisted and retrieved using Persist Manager API. Moreover we would perform an enterprise reset on the device and see how the configuration settings are re-applied to the device by designing our tutorial in following steps:\n\n* We would store a Clock and App Manager's install configuration settings and create Persist Manager to store XML for each setting.\n* It means we would change the Clock timing using Mx Clock and install any application using App Manager install feature, which will be stored by Persist Manager. \n* We would then deliberately change the Clock timings and uninstall the application that we had installed.\n* We will then perform an Enterprise Reset on Symbol Android device (Ex. TC55 in this Tutorial)\n* Finally we will ensure how the persisted Clock and App Manager settings are re-applied automatically. It means you would see the Clock is reset to the time you had set and the application installed back to the device from the path provided.     \n   \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 2.1 and above\n* Download the APK for sample App from [here](https://s3.amazonaws.com/emdk/Tutorials/AllInstalledApps.apk)\n* Download the respective Enterprise Reset package (zip file) according to your device OS version from [here](https://portal.motorolasolutions.com/Support/US-EN/Mobile+Networks+RFID+and+BarCode+Scanners/Mobile+Computers/Handheld+Computers/TC55) and copy that file in SD card/Internal memory of the device.\n\n    > Note: This above link provides the Update Packages of TC55 device only, which we have used in this tutorial. If you are using some other Symbol Android device then download the respective update package from [here](https://portal.motorolasolutions.com/Support/US-EN/Mobile+Networks+RFID+and+BarCode+Scanners/Mobile+Computers/Handheld+Computers)\n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxPersistManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxPersistManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxPersistManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxPersistManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxPersistManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxPersistManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxPersistManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxPersistManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxPersistManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxPersistManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxPersistManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxPersistManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxPersistManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The Persist Manager Profile Feature\n1. Select \"MxPersistManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxPersistManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxPersistManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: PersistManagerProfile).\n  \n    ![img](images/MxPersistManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxPersistManagerTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Persist Manager, Touch Manager, Certificate Manager etc.) for configuring your Symbol device based on requirements.\n  \n6. Now we will persist two XML's for two Mx features in this tutorial. The first feature is Clock. So select the \"Clock\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/MxPersistManagerTutorialImages/clock_feature.jpg)\n\n    Set the Clock details by providing Timezone, Date and Time values. All the timings need to be in UTC. It means if you want to set the Timezone to PST, you will need to set the clock to GMT time and it will automatically change it to the local time for you.\n\n    > Note: It means the time you enter always has to be in GMT.\n\n    ForEample:  \n\t* **Name**: MxClock\n\t* **TimeZone**: GMT-07:00\n\t* **Date**: 2014-08-15\n\t* **Time**: 20:00:00\n\n    Here , we have set the Timezone as GMT-07:00. It means if we want to set the PST time of 1PM, we have to set the GMT time as 8PM (20:00:00 in 24 hour format) and it will automatically set the PST time of 1PM for us.\n\n    ![img](images/MxPersistManagerTutorialImages/clock_details.jpg)   \n \n7. Click Apply and your Clock profile is created.    \n  \n    ![img](images/MxPersistManagerTutorialImages/clock_profile_created.jpg)\n\n8. So now we will persist the Clock settings by creating a Persist Manager for Clock. To proceed with this, select \"Persistence Manager\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/MxPersistManagerTutorialImages/persist_manager.jpg) \n\n9. Provide some name in the Name field (Ex. PersistClock). Select Persist Action as \"Make Current XML Persistent\". Select Persist as Name field and a Name Selector dialog will appear. If you want to remove any persisted XML, select Persist Action as \"Remove Persistent XML\". \n\n    ![img](images/MxPersistManagerTutorialImages/name_selector_clock.jpg)\n\n    Select Name Type as Generic/Absolute from the drop-down option and provide Generic/Absolute Name in the field (Ex. clock_profile). \n\n    ![img](images/MxPersistManagerTutorialImages/name_selector_clock_details.jpg)\n\n10. Click OK. Enter 1 for \"Persist As Version\". Enter 1 for \"Persist As Order\". Check the \"Persist if Error\" field. This field will persist the XML even if Profile Creation returns error.\n\n    ![img](images/MxPersistManagerTutorialImages/persist_clock_completed.jpg)\n\n    Click Apply and the perist settings for the Clock feature will be added. \n\n    ![img](images/MxPersistManagerTutorialImages/clock_profile_added.jpg)\n\n11. So far we have added the Persist configurations for Clock feature. Now its time to persist App Manager feature as discussed earlier. We will follow similar steps as we did for Clock. Select App Manager feature and Click \"Right Arrow\". It will show App Manager parameter list.\n\n    ![img](images/MxPersistManagerTutorialImages/app_manager_parameter_list.jpg)\n\n12. Provide some name in the Name field (Ex. MxAppManager). Select Action as \"Install\" and Provide the APK path to the SD Card of the application that we had downloaded earlier (Ex. /storage/sdcard1/AllInstalledApps.apk). So this feature will install the app in the device from the provided APK file.\n\n    > Note: The SD Card path may be different on different devices.\n\n    ![img](images/MxPersistManagerTutorialImages/app_manager_details.jpg)\n\n13. We will add another Persist Manager to persist the App Manager settings. So select \"Persistence Manager\" from the feature list and click \"Right Arrow\".\n\n    ![img](images/MxPersistManagerTutorialImages/persist_app_manager.jpg)\n\n14. Provide some name in the Name field (Ex. PersistAppManager). Select Persist Action as \"Make Current XML Persistent\". If you want to remove any persisted XML, select Persist Action as \"Remove Persistent XML\". Select the \"Persist As Name\" field and provide Absolute/Generic path as we did earlier for the Clock (Ex. PersistAppManager). Enter 1 for \"Persist As Version\". Enter 1 for \"Persist As Order\". Check the \"Persist if Error\" field. This field will persist the XML even if Profile Creation returns error.\n\n    ![img](images/MxPersistManagerTutorialImages/persist_app_manager_completed.jpg)  \n  \n15. Click Apply and Finish. \n\n    ![img](images/MxPersistManagerTutorialImages/persist_manager_profile_created.jpg)  \n\n16. Click \"Close\". This will create our Persist Manager Profile that is ready to Persist details for Clock and App manager features of Mx.   \n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxPersistManagerTutorialImages/emdk_config_file.jpg)\n  \n17. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/MxPersistManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxPersistManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxPersistManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code.\n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"PersistManagerProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxPersistManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to persist profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxWirelessManagerTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxWirelessManagerTutorialImages/on_opened_method_2.jpg)\n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxPersistManagerTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxPersistManagerTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxPersistManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.  \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxPersistManagerTutorialImages/on_destroy_method.jpg) \n\nThat's it!!! We are done with all the coding and configuration part. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n    Check the Date-Time of the phone before running the app\n\n    ![img](images/MxPersistManagerTutorialImages/before_running_app.png)\n  \n2. Run the application. The Clock and and App Manager configurations are applied and persisted in the device. It means you can now see the Clock Date-Time has been changed to the one we had set in the wizard. You can also see that EMDK App Manager has installed the application \"AllInstalledApps\" whose APK path we had provided in the wizard earlier. \n  \n\t![img](images/MxPersistManagerTutorialImages/xml_persisted.png)\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n\n    Now check the Date-Time of the device. You could see that it has changed to the one we set in the wizard during Profile Creation.\n\n    ![img](images/MxPersistManagerTutorialImages/date_time_updated.png)\n\n    You can also see that APK path of the application we had provided in the wizard during Profile creation has been installed successfully on the device using App Manager's install feature.\n\n    ![img](images/MxPersistManagerTutorialImages/app_installed.png)\n  \n3. These configurations were implemented and applied by the respective Mx feature (Clock and App Manager) but the settings are persisted in the XML file by the Persist Manager. If you open the File browser of TC 55 and go to \"/enterprise/usr/persist/mxframework/persistmgr\", you will find the two XML's persisted that were created using Persist Manager for Clock and App Manager features of Mx. \n\n    ![img](images/MxPersistManagerTutorialImages/persist_path.png)\n\n5. Now we will see how these Clock and App Manager settings are re-applied automatically after performing Enterprise Reset on the device.\n\n    > Note: Enterprise Reset erases all the user installed applications and resets the Clock to the default time. But in our case system will read the details from Persisted XML files and apply changes to the device.\n    > Make sure that the Enterprise Reset package (zip file) is present in the device's SD Card.\n\n6. Let us perform Enterprise Reset on the TC55 Android device. Simultaneously press the Power, Programmable and Volume Up buttons \n \n\t![img](images/MxPersistManagerTutorialImages/reset_process.jpg)\n\n    The TC55 shuts down and then reboots. Now select the Enterprise Reset Package (Zip File) stored in the SD Card by navigating to the path. It will complete the Enterprise Reset by erasing data and reboot the device with the default configurations.\n\n6. Once the Enterprise Reset is completed, Persist Manager resends the persisted XML's to the Mx Framework, which is captured by the device. These settings are then re-applied to the device. This is how the Persist Manager works in order to Persist and apply the Mx device configuration features.\n\n    ![img](images/MxPersistManagerTutorialImages/after_reset.png)\n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol Android device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure and persist device configuration XML's using Persist Manager on your Symbol devices through applications, let us try to understand and implement some of the other Mx features. So in the next tutorial, we will concentrate on the \"GPRS Manager\" Mx feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/MxPersistManagerTutorial.zip)."},{"key":"guide-tutorial-tutMxPowerManager","name":" Power Management using Power Manager API","md":"# Power Management using Power Manager API\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on [Power Manager](#guide-profiles-refPowerManager) API, which allows user to perform Power Management operations on Symbol Android devices. Theses operations include setting the device in sleep mode, rebooting the device and updating device Operating System as follows:\n\n**1. Sleep Mode:**\n\nThis feature allows device to enter the sleep mode in order to conserve power.\n\n**2. Device Reboot:**\n\nDevice Reboot feature restarts the Symbol device from the app itself.\n\n**3. OS Update:**  \n\nThis Power Manager feature allows you to update the operating system of your Symbol Android device. The user needs to provide path of update package (zip file) that resides in the device's external SD Card. Based on the package (zip file), the user can perform following operations using OS Update feature:\n\n   > Note: Copy the update package to external SD Card in order to make update OS work. If you copy update package to the internal SD card of the device, the OS Update feature won't work.  \n\n* **Enterprise Reset:** Resets the device data except Mx Enterprise Packages.\n* **Factory Reset:** Resets the device data.\n* **OS Upgrade:** Upgrades/Downgrades device's Operating System.\n \nIn this tutorial, We would be implementing all three features of Power Manager to understand how they work. \n \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 2.1 and above\n* Download the respective OS update/Factory Reset/Enterprise Reset package (zip file) from [here](https://portal.motorolasolutions.com/Support/US-EN/Mobile+Networks+RFID+and+BarCode+Scanners/Mobile+Computers/Handheld+Computers/TC55) and copy that file to external SD card of the device.\n\n    > Note: This above link provides the Update Packages of TC55 device only, which we have used in this tutorial. If you are using some other Symbol Android device then download the respective update package from [here](https://portal.motorolasolutions.com/Support/US-EN/Mobile+Networks+RFID+and+BarCode+Scanners/Mobile+Computers/Handheld+Computers)\n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxPowerManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxPowerManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxPowerManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxPowerManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxPowerManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxPowerManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxPowerManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxPowerManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxPowerManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxPowerManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxPowerManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxPowerManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxPowerManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The Power Manager Profile Feature\n1. Select \"MxPowerManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxPowerManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxPowerManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: PowerManagerProfile).\n  \n    ![img](images/MxPowerManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxPowerManagerTutorialImages/profile_editor.jpg)\n  \n6. Select the \"Power Manager\" feature from the list and click \"Right Arrow\". Using this feature you can perform various Power Management operations through your apps on the Symbol device. These operations include setting the device into sleep mode , rebooting the device and updating OS of the Symbol Android devices as explained earlier.\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Power Manager, USB Manager, App Manager etc.) for configuring your Symbol device based on requirements.      \n \n7. Click on the Power Manager feature. The parameter list will be populated.  \n  \n    ![img](images/MxPowerManagerTutorialImages/select_power_manager_feature.jpg)\n\n8. Now Click on the drop-down of the action field to see the supported features by Power Manager.\n\n    ![img](images/MxPowerManagerTutorialImages/power_manager_features.jpg)\n\n    There are four features shown in the drop down, three of which have been explained earlier. As the name suggests, forth feature `Do Nothing` does nothing. We would be configuring above mentioned three features from the application itself. Hence let us select the `Reset Action` in the wizard as `Do Nothing`.\n\n    > Note: You could select any option you want in the wizard and the application will implement that feature on the launch.\n\n    ![img](images/MxPowerManagerTutorialImages/feature_do_nothing.jpg)\n\n    > Note: Provide some name in the Name field (Ex. MyPowerManager) in order to refer that specific feature of Profile.\n    > You can also keep Name field empty.\n  \n9.  Click Apply and Finish. \n\n    ![img](images/MxPowerManagerTutorialImages/power_manager_profile_created.jpg)  \n\n10. Click \"Close\".   \n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxPowerManagerTutorialImages/emdk_config_file.jpg)\n  \n12. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager. So you can see the entry of the 'Reset Action' parameter of Power Manager feature and the value assigned to it is 0.\n\n    Now there are specific values that are assigned to the parameters in Power Manager feature:\n\n    * 0 - Do Nothing\n    * 1 - Sleep Mode\n    * 4 - Reboot\n    * 8 - OS Update\n\n    Based on user selection, these values would be assigned against these parameters of the Power Manager feature in EMDKConfig file.\n\n    > Note: These values are useful when we modify Profile from the application using EMDK API, which we will see shortly in this tutorial.\n\n    ![img](images/MxPowerManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxPowerManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxPowerManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager. We will also create global variables to hold the UI elements and values that are required in this application. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"PowerManagerProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t    // Text View for displaying status of EMDK operations\n\t    private TextView statusTextView = null;\n\n\t    // Radio Group to hold Radio Buttons for Power Manager Options\n\t    private RadioGroup pwrRadioGroup = null;\n\n\t    // Edit Text that allows user to enter the path of the update package from\n\t    // external SD Card\n\t    private EditText zipFilePathEditText;\n\n\t    // String that gets the path of the OS Update Package from Edit Text\n\t    private String zipFilePath;\n\n\t    // Initial Value of the Power Manager options to be executed in the\n\t    // onOpened() method when the EMDK is ready. Default Value set in the wizard\n\t    // is 0.\n\t    // 0 -> Do Nothing\n\t    // 1 -> Sleep Mode\n\t    // 4 -> Reboot\n\t    // 8 -> OS Update\n\t    private int value = 0;\n\n\t    // Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n    So the code looks like:\n\n    ![img](images/MxPowerManagerTutorialImages/global_variable_entry.jpg)\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxPowerManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. Hence we will update the status in the `statusTextView`. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tstatusTextView.setText(\"EMDK open success.\");\n\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:  \n\n        :::java\n        if (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the\n\t\t\t// profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t    if (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\t\t\t} else {\n\t\t\t\t// Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t    (DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\t\t}\n\n\tThis `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method. So we will call a method `handleEMDKResult` to handle this [EMDKResults](#api-EMDKResults), which we will create in the next step.\n\n\t\t:::java\n\t\t// Method call to handle EMDKResult\n\t\thandleEMDKResult(results);  \n\n    Your onOpened method should now look like this:\n    \n    ![img](images/MxPowerManagerTutorialImages/on_opened_method.jpg)\n\n3. It shows error as we have not yet declared `handleEMDKResult` method. So let us create this method, which would get the XML String response from [EMDKResults](#api-EMDKResults), call the `parseXML` method to parse it and eventually call `displayResults` method to display output in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html), which we would be declaring in coming steps. \n\n\t\t:::java\n\t\t// Method to handle EMDKResult by extracting response and parsing it\n\t\tpublic void handleEMDKResult(EMDKResults results) {\n\t\t\t// Get XML response as a String\n\t\t\tString statusXMLResponse = results.getStatusString();\n\t\n\t\t\ttry {\n\t\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t\t// for the parser\n\t\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t\t// Call method to parse the response\n\t\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\n\t\t\t// Method call to display results in a dialog\n\t\t\tdisplayResults();\n\t\t}\n\n\tYour `handleEMDKResult` method should now look like this:\n    \n    ![img](images/MxPowerManagerTutorialImages/handle_emdk_result.jpg)\n\n4. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxPowerManagerTutorialImages/parse_xml.jpg)\n\n5. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxPowerManagerTutorialImages/build_failure_message.jpg)\n\n6. In this step, we will add `displayResults` method to display the result of profile operation. If the Profile is successfully applied, it will proceed with the respective power manager operation and in case of any errors, we will display a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with the corresponding error details.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog in case of any errors\n\t\tpublic void displayResults() {\n\n\t\t  // Display dialog in case of errors else proceed.\n\t\t  if (!TextUtils.isEmpty(errorDescription)) {\n\t\t   \t// Alert Dialog to display the status of the Profile creation\n\t\t\t// operation of MX features\n\t\t\tAlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\t\tMainActivity.this);\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\n\t\t\talertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t// create alert dialog\n\t\t\tAlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t\t// show it\n\t\t\talertDialog.show();\n\t\t  }\n\t    }\n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxPowerManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.  \n    \n7. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxPowerManagerTutorialImages/on_destroy_method.jpg) \n\n8. Let us set the required layout/View for this tutorial. Remove all the code, inside \"res/layout/activity_main.xml\".\n\n9. Add the following code that has three radio buttons that enable user to select a specific Power Manager feature, an Edit Text that allows user to enter the external SD Card path to the OS update package (zip file), a Text View that displays the status of every operation the user performs and a Button that triggers the user selected Power Manager feature and configures the device based on that.\n\n> Note: Copy the update package to external SD Card in order to make update OS work. If you copy update package to the internal SD card of the device, the OS Update feature won't work.  \n\n    :::xml\n    <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_margin=\"20dip\"\n    tools:context=\".MainActivity\" >\n\n      <LinearLayout\n      android:id=\"@+id/linearLayout1\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_alignParentLeft=\"true\"\n      android:layout_alignParentRight=\"true\"\n      android:layout_alignParentTop=\"true\"\n      android:orientation=\"vertical\" >\n      </LinearLayout>\n\n      <TextView\n      android:id=\"@+id/textView1\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_alignLeft=\"@+id/linearLayout1\"\n      android:layout_alignRight=\"@+id/linearLayout1\"\n      android:layout_below=\"@+id/buttonSet\"\n      android:layout_marginTop=\"20dp\"\n      android:text=\"Status:\" />\n\n      <RadioGroup\n      android:id=\"@+id/radioGroupPwr\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_alignLeft=\"@+id/linearLayout1\"\n      android:layout_alignTop=\"@+id/linearLayout1\" >\n\n      <TextView\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"10dip\"\n      android:text=\"Choose your Power Manager Option:\"\n      android:textSize=\"16sp\"\n      android:textStyle=\"bold\" />\n\n      <RadioButton\n      android:id=\"@+id/radioSuspend\"\n      android:layout_width=\"279dp\"\n      android:layout_height=\"wrap_content\"\n      android:text=\"Suspend (sleep mode)\" />\n\n      <RadioButton\n      android:id=\"@+id/radioReset\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:text=\"Perform reset (reboot)\" />\n\n      <RadioButton\n      android:id=\"@+id/radioOSUpdate\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:text=\"Perform OS Update\" />\n\n      <TextView\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_margin=\"10dip\"\n      android:text=\"Specify Path and Name of the Zip file in the file system for OS Update\"\n      android:textSize=\"16sp\" />\n\n      <EditText\n      android:id=\"@+id/et_zip_file_path\"\n      android:layout_width=\"match_parent\"\n      android:layout_height=\"wrap_content\"\n      android:hint=\"Path and Name of Zip file\"\n      android:maxLines=\"2\" />\n      </RadioGroup>\n\n      <Button\n      android:id=\"@+id/buttonSet\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_below=\"@+id/radioGroupPwr\"\n      android:layout_centerHorizontal=\"true\"\n      android:layout_marginTop=\"32dp\"\n      android:text=\"Set\" />\n\n      <TextView\n      android:id=\"@+id/textViewStatus\"\n      android:layout_width=\"wrap_content\"\n      android:layout_height=\"wrap_content\"\n      android:layout_alignLeft=\"@+id/textView1\"\n      android:layout_alignRight=\"@+id/textView1\"\n      android:layout_below=\"@+id/textView1\" />\n\n    </RelativeLayout>\n\n> The layout file 'activity_main.xml' should now look like:\n\n![img](images/MxPowerManagerTutorialImages/activity_main.jpg)\n\n10. Get the reference of UI elements and make a call to 'addSetButtonListener' method in 'onCreate' method. We would add this method in the next step. The method 'addSetButtonListener' creates on Click Listener for the Set Button that implements Power Manager settings selected by user. \n\n        :::java\n        // References of the UI elements\n\t\tstatusTextView = (TextView) findViewById(R.id.textViewStatus);\n\t\tpwrRadioGroup = (RadioGroup) findViewById(R.id.radioGroupPwr);\n\t\tzipFilePathEditText = (EditText) findViewById(R.id.et_zip_file_path);\n\n\t\t// Set on Click listener to the set button to execute Power Manager\n\t\t// operations\n\t\taddSetButtonListener();\n \n     So the complete `onCreate` method looks like:\n\n    ![img](images/MxPowerManagerTutorialImages/complete_on_create.jpg)\n\n11. It shows an error on the method call of 'addSetButtonListener' because we have not yet added this method. We would now add the 'addSetButtonListener' method that implements on click listener of the radio buttons that are assigned to each of the Power Manager feature. As explained earlier, it sets an integer code (1-Sleep, 4-Reboot or 8-OS Update) in the variable 'value' and then calls 'modifyProfile_XMLString' method that actually modifies the Profile settings based on this value and configures the device against that Power Manager feature.\n\n        :::java\n        // Method to set on click listener on the Set Button\n\t    private void addSetButtonListener() {\n\n\t\t // Get Reference to the Set Button\n\t\t Button setButton = (Button) findViewById(R.id.buttonSet);\n\n\t\t // On Click Listener\n\t\t setButton.setOnClickListener(new OnClickListener() {\n\n\t\t \t@Override\n\t\t\tpublic void onClick(View arg0) {\n\t\t\t\t// TODO Auto-generated method stub\n\n\t\t\t\t// Get Reference to the Radio Buttons that show various Power\n\t\t\t\t// Manager Options\n\t\t\t\tint radioid = pwrRadioGroup.getCheckedRadioButtonId();\n\n\t\t\t\tif (radioid == R.id.radioSuspend)\n\t\t\t\t\tvalue = 1; // 1 - Suspend/ Sleep Mode (Set device to the\n\t\t\t\t\t\t\t\t// sleep mode)\n\n\t\t\t\tif (radioid == R.id.radioReset)\n\t\t\t\t\tvalue = 4; // 4 - Perform Reset/Reboot (Reboot Device)\n\n\t\t\t\tif (radioid == R.id.radioOSUpdate)\n\t\t\t\t\tvalue = 8; // 8 - Perform OS Update\n\n\t\t\t\t// Apply Settings selected by user\n\t\t\t\tmodifyProfile_XMLString();\n\t\t\t}\n\t\t });\n\n\t    }\n\n    So the method looks like:\n\n    ![img](images/MxPowerManagerTutorialImages/add_set_button_listener.jpg)\n   \n12. The above code would display error at the call of `modifyProfile_XMLString` method as we have not added that method yet. This is the method that actually modifies the Power Manager Profile Settings and configures the device with the user selected Power Manager feature (Sleep Mode, Reboot or OS Update). This method prepares the xml input for the `processProfile` method based on \"value\" attribute. If the value is 1 or 4 (Sleep Mode or Reboot), then the XML input remains the same except value attribute. If the value is 8 (OS Update), we need to add path to the OS Update package in XML input. So the XML input for this case would be different as explained in the `If-Else` condition of the code. We would capture that path from the Edit Text and store it to the `zipFilePath` variable. It then calls `handleEMDKResult` method and sets the profile by following similar steps as explained in case of `onOpened` method.\n\n    Following is an example of XML input for OS Update feature of Power Manager where the `zipFilePath` variable contains the path of the update package.\n\n        :::java\n        modifyData[0] = <?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n\t\t+ \"<characteristic type=\\\"Profile\\\">\"\n\t\t+ \"<parm name=\\\"ProfileName\\\" value=\\\"PowerManagerProfile\\\"/>\"\n\t\t+ \"<characteristic type=\\\"PowerMgr\\\">\"\n\t\t+ \"<parm name=\\\"ResetAction\\\" value=\\\"\" + value\n\t\t+ \"\\\"/>\" + \"<characteristic type=\\\"file-details\\\">\"\n\t\t+ \"<parm name=\\\"ZipFile\\\" value=\\\"\" + zipFilePath\n\t\t+ \"\\\"/>\" + \"</characteristic>\" + \"</characteristic>\"\n\t\t+ \"</characteristic>\n\n    The `processProfile` method then sets the changes to `Profile Manager` and returns the result to the `EMDKResults`.\n\n        :::java\n        // Method that applies the modified settings to the EMDK Profile based on\n\t    // user selected options of Power Manager feature.\n\t    private void modifyProfile_XMLString() {\n\n\t\t  // Prepare XML to modify the existing profile\n\t\t  String[] modifyData = new String[1];\n\t\t  if (value == 8) {\n\t\t\tzipFilePath = zipFilePathEditText.getText().toString();\n\t\t\t// If the OS Package path entered by user is empty then display\n\t\t\t// a Toast\n\t\t\tif (TextUtils.isEmpty(zipFilePath)) {\n\t\t\t\tToast.makeText(MainActivity.this, \"Incorrect File Path...\",\n\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Modified XML input for OS Update feature that contains path\n\t\t\t// to the update package\n\t\t\tmodifyData[0] = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n\t\t\t\t\t+ \"<characteristic type=\\\"Profile\\\">\"\n\t\t\t\t\t+ \"<parm name=\\\"ProfileName\\\" value=\\\"PowerManagerProfile\\\"/>\"\n\t\t\t\t\t+ \"<characteristic type=\\\"PowerMgr\\\">\"\n\t\t\t\t\t+ \"<parm name=\\\"ResetAction\\\" value=\\\"\" + value + \"\\\"/>\"\n\t\t\t\t\t+ \"<characteristic type=\\\"file-details\\\">\"\n\t\t\t\t\t+ \"<parm name=\\\"ZipFile\\\" value=\\\"\" + zipFilePath + \"\\\"/>\"\n\t\t\t\t\t+ \"</characteristic>\" + \"</characteristic>\"\n\t\t\t\t\t+ \"</characteristic>\";\n\t\t  } else {\n\t\t\t// Modified XML input for Sleep and Reboot feature based on user\n\t\t\t// selected options of radio button\n\t\t\t// value = 1 -> Sleep Mode\n\t\t\t// value = 4 -> Rebbot\n\t\t\tmodifyData[0] = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n\t\t\t\t\t+ \"<characteristic type=\\\"Profile\\\">\"\n\t\t\t\t\t+ \"<parm name=\\\"ProfileName\\\" value=\\\"PowerManagerProfile\\\"/>\"\n\t\t\t\t\t+ \"<characteristic type=\\\"PowerMgr\\\">\"\n\t\t\t\t\t+ \"<parm name=\\\"ResetAction\\\" value=\\\"\" + value + \"\\\"/>\"\n\t\t\t\t\t+ \"</characteristic>\" + \"</characteristic>\";\n\t\t  }\n\n\t\t  // Call process profile to modify the profile of specified profile\n\t\t  // name\n\t\t  EMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t  if (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\t\t\t// Method call to handle EMDKResult\n\t\t\thandleEMDKResult(results);\n\t\t  } else {\n\t\t\t// Show dialog of Failure\n\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\tbuilder.setMessage(\"Failed to apply profile...\").setPositiveButton(\n\t\t\t\t\t\"OK\", new DialogInterface.OnClickListener() {\n\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\tAlertDialog alert = builder.create();\n\t\t\talert.show();\n\t\t  }\n\t    }\n\n    You can see that the error is gone once we add this method.\n    The method `modifyProfile_XMLString` method should look like: \n\n    ![img](images/MxPowerManagerTutorialImages/modifyProfile_XMLString.jpg) \n\n13. If the EMDK is closed abruptly, a callback method `onClosed` gets called, where you could release your `EMDKManager`.\n\nThat's it!!! We are done with all the coding and configuration part. Now let us run the application.\n \n\n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n2. Run the application. Since we have set `Do Nothing` parameter in the Profile Manager wiazrd, the app just loads and performs no operations. So you can see the main page with three radio button options (Sleep Mode, Reboot and OS Update).\n  \n\t![img](images/MxPowerManagerTutorialImages/home_screen.png)\n  \n4. Now we will select these options one by one. So select \"Suspend\" radio button and press the \"Set\" button. This will put your device into sleep mode by locking it.\n\n    ![img](images/MxPowerManagerTutorialImages/sleep_mode.png)\n\n    As you can see, the device has been locked. So unclock it and the app will be resumed.\n  \n\t![img](images/MxPowerManagerTutorialImages/sleep_mode_resumed.png)\n\n5. So now select second option (Reboot) and press the \"Set\" button. This should reboot your Symbol Android device.\n \n\t![img](images/MxPowerManagerTutorialImages/reboot_mode.png)\n\n6. As the device was rebooted in the previous step, open the app again and select the third option (OS Update). Provide the path in the Edit Text to the external SD card where the OS Update Package is located. This package should be a zip file downloaded from [this link](https://portal.motorolasolutions.com/Support/US-EN/Mobile+Networks+RFID+and+BarCode+Scanners/Mobile+Computers/Handheld+Computers/TC55) (Ex. /sdcard/T55N0JB0VRUEN17400.zip).\n\n    > Note: This above link provides the Update Packages of TC55 device only. If you are using some other Symbol Android device then download the respective update package from [here](https://portal.motorolasolutions.com/Support/US-EN/Mobile+Networks+RFID+and+BarCode+Scanners/Mobile+Computers/Handheld+Computers)\n\n    This package could be an OS upgrade, Factory Reset or Enterprise Reset package as this feature allows you to perform all these operations. We will be using an update Package that has been downloaded from above link for TC55 device. \n\n    ![img](images/MxPowerManagerTutorialImages/os_update_path.png)\n\n    Once the \"Set\" button is pressed, the phone will shut down for performing OS update with the respective update package.\n\n    > Note:\n    > In case of failure due to incorrect path, the app will display a failure message in the status Text View at the bottom.\n\n    ![img](images/MxPowerManagerTutorialImages/performing_os_update.png)\n\n    Finally the device reboots to configure and apply the OS update changes.\n\n    ![img](images/MxPowerManagerTutorialImages/after_os_update.png)   \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure and perform Power Management operations on your Symbol Android devices through applications using Mx Power Manager feature, let us try to understand and implement some of the other Mx features. So in the next tutorial, we will concentrate on the \"Persist Manager\" feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/MxPowerManagerTutorial.zip)."},{"key":"guide-tutorial-tutMxSettingsManager","name":" Invoke Enterprise Reset in Settings UI","md":"# Invoke Enterprise Reset in Settings UI\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use some new Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on the ability to configure Enterprise Reset option in Settings UI on your Symbol device using [Settings Manager](#guide-profiles-refSettingsManager) feature of Mx. \n\nSo now we will create a tutorial and disable the ability to invoke Enterprise Reset in Settings UI of your Symbol Android device using Mx [Settings Manager](#guide-profiles-refSettingsManager) feature. A typical use case for this could be to prevent user by accidentally pressing \"Enterprise Reset\" option.  \n        \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 3.0 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxSettingsManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxSettingsManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxSettingsManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxSettingsManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxSettingsManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\" or any latest version of Android SDK and ADT.\n\n7.  Click \"Next\".  \n\n    ![img](images/MxSettingsManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxSettingsManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxSettingsManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxSettingsManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxSettingsManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxSettingsManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxSettingsManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxSettingsManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The Settings Manager Profile Feature\n1. Select \"MxSettingsManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxSettingsManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxSettingsManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: SettingsManagerProfile).\n  \n    ![img](images/MxSettingsManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxSettingsManagerTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Settings Manager, Power Manager, Clock Manager etc.) for configuring your Symbol device based on requirements. \n  \n6. So you can see all these MX features on the left hand side of the Profile Editor window. Select the \"Settings Manager\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/MxSettingsManagerTutorialImages/settings_feature.jpg)\n\n    Provide some name in the \"Name\" field (Ex. MySettingsManager). The \"Name\" field is used to identify each feature, which is required when editing features programmatically. You can also keep the \"Name\" field empty.\n\n    Since we want to disable the Enterprise Reset option in Settings UI, select \"Disable\" in \"Ability to invoke Enterprise Reset in Settings UI\" drop-down.  \n\n    > Note: You can Enable, Disable or keep the existing settings based on your selection from the drop-down.     \n\n    ![img](images/MxSettingsManagerTutorialImages/settings_manager_details.jpg)\n\n    ![img](images/MxSettingsManagerTutorialImages/settings_manager_details_selected.jpg)    \n \n7. Click Apply to apply the settings we provided    \n  \n    ![img](images/MxSettingsManagerTutorialImages/settings_profile_created.jpg)\n\n8. Click Finish and your Settings Manager profile for disabling Enterprise Reset option on Settings UI is created.\n\n    ![img](images/MxSettingsManagerTutorialImages/settings_manager_profile_created.jpg) \n  \n9. Click \"Close\".\n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxSettingsManagerTutorialImages/emdk_config_file.jpg)\n  \n10. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/MxSettingsManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxSettingsManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:   \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxSettingsManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code.\n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"SettingsManagerProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxSettingsManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxSettingsManagerTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxSettingsManagerTutorialImages/on_opened_method_2.jpg)\n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxSettingsManagerTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxSettingsManagerTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxSettingsManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.  \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxSettingsManagerTutorialImages/on_destroy_method.jpg) \n\nThat's it!!! We are done with all the coding and configuration part that will let us **disable** Enterprise Reset in Settings UI on our Symbol Android device. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.  \n\n2. Now, Run the application.\n\n    ![img](images/MxSettingsManagerTutorialImages/home_screen.png)\n\n    You can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message, which indicates that the app has successfully disabled the Enterprise Reset option in Settings UI.\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n  \n3. We will now verify this by going into the device's Settings.\n\n    ![img](images/MxSettingsManagerTutorialImages/device_settings.bmp)\n\n\t![img](images/MxSettingsManagerTutorialImages/reset_disabled.bmp)\n\n\tYou can see that the Enterprise Reset option is disabled from settings UI.\n\nThis is how Settings Manager is used to configure Enterprise Reset option in Settings UI of your Symbol device using Profile Wizard. \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure Settings UI with Enterprise Reset option using Settings Manager on your Symbol Android devices through applications, let us try to understand and implement some of the other new Mx features introduced in V 3.0. So in the next tutorial, we will concentrate on the \"USB Manager\" Mx feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/MxSettingsManagerTutorial.zip)"},{"key":"guide-tutorial-tutMxTouchManager","name":" Specify Touch Mode using Mx Touch Manager","md":"# Specify Touch Mode using Mx Touch Manager\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use some new Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on configuring touch mode of your Symbol Android device using [Touch Manager](#guide-profiles-refTouchManager) feature of Mx. \n\nSo now we will create a tutorial and configure the touch of your Symbol Android device by specifying touch mode using Mx [Touch Manager](#guide-profiles-refTouchManager) feature. \n        \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 3.0 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxTouchManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxTouchManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxTouchManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxTouchManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxTouchManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\" or any latest version of Android SDK and ADT.\n\n7.  Click \"Next\".  \n\n    ![img](images/MxTouchManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxTouchManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxTouchManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxTouchManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxTouchManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxTouchManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxTouchManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxTouchManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The Touch Manager Profile Feature\n1. Select \"MxTouchManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxTouchManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxTouchManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: TouchManagerProfile).\n  \n    ![img](images/MxTouchManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxTouchManagerTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Touch Manager, Wireless Manager, Power Manager etc.) for configuring your Symbol device based on requirements. \n  \n6. So you can see all these MX features on the left hand side of the Profile Editor window. Select the \"Touch Manager\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/MxTouchManagerTutorialImages/touch_feature.jpg)\n\n    Provide some name in the \"Name\" field (Ex. MyTouchManager). The \"Name\" field is used to identify each feature, which is required when editing features programmatically. You can also keep the \"Name\" field empty.\n\n    The drop-down \"Touch Action\" provides different modes that you can choose to set the Touch of your Symbol Android device. You can select \"Stylus and Finger\", \"Glove and Finger\" or keep the existing setting. We will select \"Glove and Finger\" option as the Touch Mode. \n\n    > Note: So if we select \"Glove and Finger\" option, we will not be able to use stylus to interact with the device.     \n\n    ![img](images/MxTouchManagerTutorialImages/touch_manager_details.jpg)\n\n    ![img](images/MxTouchManagerTutorialImages/touch_manager_details_selected.jpg)    \n \n7. Click Apply to apply the settings we provided    \n  \n    ![img](images/MxTouchManagerTutorialImages/touch_profile_created.jpg)\n\n8. Click Finish and your Touch Manager profile for specifying touch mode is created.\n\n    ![img](images/MxTouchManagerTutorialImages/touch_manager_profile_created.jpg) \n  \n9. Click \"Close\".\n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxTouchManagerTutorialImages/emdk_config_file.jpg)\n  \n10. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/MxTouchManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxTouchManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxTouchManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"TouchManagerProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n        // Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxTouchManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxTouchManagerTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxTouchManagerTutorialImages/on_opened_method_2.jpg)\n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxTouchManagerTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxTouchManagerTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxTouchManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.  \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxTouchManagerTutorialImages/on_destroy_method.jpg) \n\nThat's it!!! We are done with all the coding and configuration part that will let us set the touch mode to \"Glove and Finger\" on our Symbol Android device. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n    Before running the application, We will see the existing touch mode on the Symbol Android device. \n\n    Go to device's Settings -> Display -> Touch Mode.\n\n    You can see the default Touch Mode is \"Stylus and Finger\", which we will now change to \"Glove and Finger\" using Touch Manager feature of Mx. \n\n    ![img](images/MxTouchManagerTutorialImages/touch_mode.png) \n\n2. Run the application.\n\n    ![img](images/MxTouchManagerTutorialImages/home_screen.png)\n\n    You can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message, which implies that the Touch Mode has been successfully set to \"Glove and Finger\".\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n  \n3. We will now verify this by going into the device's Settings -> Display -> Touch Mode.\n\n    ![img](images/MxTouchManagerTutorialImages/touch_mode_changed.png)\n\n    This is how Touch Manager is used to set the Touch Mode of your Symbol Android device using Profile Wizard. \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure Touch Mode using Touch Manager on your Symbol Android devices through applications, let us try to understand and implement some of the other new Mx features introduced in V 3.0. So in the next tutorial, we will concentrate on the \"Settings Manager\" Mx feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/MxTouchManagerTutorial.zip)"},{"key":"guide-tutorial-tutMxUIManager","name":" Configure Clipboard using Mx UI Manager","md":"# Configure Clipboard using Mx UI Manager\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use some new Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on configuring Clipboard of your Symbol Android device using [UI Manager](#guide-profiles-refUIManager) feature of Mx. \n\nSo now we will create a tutorial and configure the Clipboard (Enable/Disable and clear Clipboard) of your Symbol Android device using Mx [UI Manager](#guide-profiles-refUIManager) feature. \n        \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 3.0 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxUIManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxUIManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxUIManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxUIManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxUIManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\" or any latest version of Android SDK and ADT.\n\n7.  Click \"Next\".  \n\n    ![img](images/MxUIManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxUIManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxUIManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxUIManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxUIManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxUIManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxUIManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxUIManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The UI Manager Profile Feature\n1. Select \"MxUIManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxUIManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxUIManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: UIManagerProfile).\n  \n    ![img](images/MxUIManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxUIManagerTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. UI Manager, Persistence Manager, App Manager etc.) for configuring your Symbol device based on requirements.\n  \n6. So you can see all these MX features on the left hand side of the Profile Editor window. Select the \"UI Manager\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/MxUIManagerTutorialImages/ui_feature.jpg)\n\n    Provide some name in the \"Name\" field (Ex. MyUIManager). The \"Name\" field is used to identify each feature, which is required when editing features programmatically. You can also keep the \"Name\" field empty.\n\n    So as discussed, you can enable, disable or clear the clipboard of your Symbol device using UI Manager feature of Mx. We will enable and clear the clipboard so that when we run the application, there is nothing saved in clipboard. Click on Clipboard drop-down in the wizard and select the option \"Enable\". Check the \"Clear Clipboard?\" checkbox to enable clearing.    \n\n    ![img](images/MxUIManagerTutorialImages/ui_manager_details.jpg)\n\n    ![img](images/MxUIManagerTutorialImages/ui_manager_details_selected.jpg)    \n \n7. Click Apply to apply the settings we provided    \n  \n    ![img](images/MxUIManagerTutorialImages/ui_profile_created.jpg)\n\n8. Click Finish and your Wireless profile for configuring Bluetooth is created.\n\n    ![img](images/MxUIManagerTutorialImages/ui_manager_profile_created.jpg) \n  \n9. Click \"Close\".\n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxUIManagerTutorialImages/emdk_config_file.jpg)\n  \n10. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/MxUIManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxUIManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxUIManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"UIManagerProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxUIManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxUIManagerTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxUIManagerTutorialImages/on_opened_method_2.jpg)\n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxUIManagerTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxUIManagerTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxUIManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.  \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxUIManagerTutorialImages/on_destroy_method.jpg) \n\nThat's it!!! We are done with all the coding and configuration part that will let us enable the Clipboard first and then clear it of our Symbol Android device. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n    Before running the application, We will make sure that something is copied on the Clipboard before clearing it up. \n\n    Go to device's Messages and copy any text on the clipboard.\n\n    ![img](images/MxUIManagerTutorialImages/copy_text_to_clipboard.png) \n\n2. Run the application.\n\n    ![img](images/MxUIManagerTutorialImages/home_screen.png)\n\n    You can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message. It means the Clipboard has been enabled and cleard.\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n  \n3. We will now verify this by opening messages. Clear the existing message, long click on Edit Text and press the paste button.\n\n    Since the Clipboard has been cleared using UI Manager, it will not paste anything. \n\n    ![img](images/MxUIManagerTutorialImages/paste_data.png)\n\n    ![img](images/MxUIManagerTutorialImages/no_data.png)\n\n    This is how UI Manager lets us enable, disable and clear Clipboard of the Symbol Android device using Profile Wizard. \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure Clipboard using Wireless Manager on your Symbol devices through applications, let us try to understand and implement some of the other new Mx features introduced in V 3.0. So in the next tutorial, we will concentrate on the \"Touch Manager\" Mx feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/MxUIManagerTutorial.zip)"},{"key":"guide-tutorial-tutMxUSBManager","name":" Manage USB Configurations","md":"# Manage USB Configurations\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use some new Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on managing USB configurations on your Symbol Android device using [USB Manager](#guide-profiles-refUSBManager) feature of Mx.\n \nSo now we will create a tutorial and configure (Enable/Disable) the [ADB](http://developer.android.com/tools/help/adb.html) mode of the Symbol Android device using Mx [USB Manager](#guide-profiles-refUSBManager) feature. ADB mode allows you to communicate with an emulator instance or connected Android-powered device in order to run your Android applications on them.   \n        \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 3.0 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxUSBManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxUSBManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxUSBManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxUSBManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxUSBManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\" or any latest version of Android SDK and ADT.\n\n7.  Click \"Next\".  \n\n    ![img](images/MxUSBManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxUSBManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxUSBManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxUSBManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxUSBManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxUSBManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxUSBManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxUSBManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The USB Manager Profile Feature\n1. Select \"MxUSBManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxUSBManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxUSBManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: USBManagerProfile).\n  \n    ![img](images/MxUSBManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxUSBManagerTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. USB Manager, Settings Manager, GPRS Manager etc.) for configuring your Symbol device based on requirements. \n  \n6. So you can see all these MX features on the left hand side of the Profile Editor window. Select the \"USB Manager\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/MxUSBManagerTutorialImages/usb_feature.jpg)\n\n    Provide some name in the \"Name\" field (Ex. MyUSBManager). The \"Name\" field is used to identify each feature, which is required when editing features programmatically. You can also keep the \"Name\" field empty.\n\n    You can see number of options for configuring different USB settings. Some of them are dependent on each other. We can configure every option in the profile editor window for USB Manager. As mentioned above we will configure the ADB mode (USB Debugging Mode) in this tutorial. Since we want to run our application on Symbol device, the ADB mode (USB Debugging Mode) is ON. So let us configure \"USB ADB Usage\" option. If you disable this option, you will not be able to run any Android application on the device as there will not be any communication between your machine and device. If you enable this option, the USB degugger will be turned ON and you can run your application on device again. So as of now we will keep \"USB ADB Usage\" option to \"Do not change\", which will keep the existing settings (In our case it is already ON). We will configure it programmatically by providing options (Enable/Disable) to the user on User Interface in coming steps.   \n\n    > Note: If this option is disabled through Profile Wizard, you cannot enable this option manually by going into settings unless performed Factory Reset on it. So configure this feature programmatically to enable and disable ADB USB Usage in your application.      \n\n    ![img](images/MxUSBManagerTutorialImages/usb_manager_details.jpg)\n\n    ![img](images/MxUSBManagerTutorialImages/usb_manager_details_selected.jpg)    \n \n7. Click Apply to apply the settings we provided    \n  \n    ![img](images/MxUSBManagerTutorialImages/usb_profile_created.jpg)\n\n8. Click Finish and your USB Manager profile for configuring USB options is created.\n\n    ![img](images/MxUSBManagerTutorialImages/usb_manager_profile_created.jpg) \n  \n9. Click \"Close\".\n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxUSBManagerTutorialImages/emdk_config_file.jpg)\n  \n10. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/MxUSBManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxUSBManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:   \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxUSBManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager ProfileManager with a status variable while applying the profile. It contains [RadioGroup](http://developer.android.com/reference/android/widget/RadioGroup.html) to hold [Radio Buttons](http://developer.android.com/guide/topics/ui/controls/radiobutton.html), which allow user to select option to Enable or Disable ADB USB Usage. It also has a variable that contains user selected [Radio Button](http://developer.android.com/guide/topics/ui/controls/radiobutton.html) value for further processing. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"USBManagerProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\t\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\t\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\t\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n\tDeclaration of global variables look like:\n\n\t![img](images/MxUSBManagerTutorialImages/global_variables.jpg)\n\n2. Let us add the required User Interface for this tutorial that will have two [Radio Buttons](http://developer.android.com/guide/topics/ui/controls/radiobutton.html) to Enable and Disable ADB USB Usage. The User Interface will also have a [Button](http://developer.android.com/reference/android/widget/Button.html) to apply changes selected by the user. \n\nSo go inside \"res/layout/activity_main.xml\" of the project and remove all the code. Add following code for the desired User Interface.\n  \n\t\t  \t\t\n\t:::xml\n\t<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\t    xmlns:tools=\"http://schemas.android.com/tools\"\n\t    android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\"\n\t    tools:context=\"${relativePackage}.${activityClass}\" >\n\t\n\t    <TextView\n\t        android:id=\"@+id/textView1\"\n\t        android:layout_width=\"wrap_content\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:layout_above=\"@+id/radioGroupADB\"\n\t        android:layout_margin=\"15dip\"\n\t        android:layout_marginBottom=\"20dp\"\n\t        android:text=\"Select your USB ADB Usage Option:\"\n\t        android:textSize=\"16sp\"\n\t        android:textStyle=\"bold\" />\n\t\n\t    <RadioGroup\n\t        android:id=\"@+id/radioGroupADB\"\n\t        android:layout_width=\"wrap_content\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:layout_centerInParent=\"true\" >\n\t\n\t        <RadioButton\n\t            android:id=\"@+id/radioEnableADB\"\n\t            android:layout_width=\"279dp\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:text=\"Enable USB ADB Usage\" />\n\t\n\t        <RadioButton\n\t            android:id=\"@+id/radioDisableADB\"\n\t            android:layout_width=\"match_parent\"\n\t            android:layout_height=\"wrap_content\"\n\t            android:text=\"Disable USB ADB Usage\" />\n\t    </RadioGroup>\n\t\n\t    <Button\n\t        android:id=\"@+id/buttonSet\"\n\t        android:layout_width=\"wrap_content\"\n\t        android:layout_height=\"wrap_content\"\n\t        android:layout_below=\"@+id/radioGroupADB\"\n\t        android:layout_centerHorizontal=\"true\"\n\t        android:layout_marginTop=\"20dip\"\n\t        android:text=\"Set\" />\n\t\n\t</RelativeLayout>\n\nThe layout file 'activity_main.xml' should now look like:\n\n![img](images/MxUSBManagerTutorialImages/activity_main_1.jpg)\n\nhere is the remaining part:\n\n![img](images/MxUSBManagerTutorialImages/activity_main_2.jpg)   \n\t\n3. Now come back to \"MainActivity.java\". In  `onCreate` method, we will get the references for UI element that we created in previous step followed by the listener for \"Set\" button. We will then call `getEMDKManager` so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        // Add reference to UI elements\n\t\tadbRadioGroup = (RadioGroup) findViewById(R.id.radioGroupADB);\n\n\t\t// Call the listener for Set Button to update user selected settings\n\t\taddSetButtonListener();\n\n\t\t// The EMDKManager object will be created and returned in the callback.\n\t\tEMDKResults results = EMDKManager.getEMDKManager(\n\t\t\t\tgetApplicationContext(), this);\n\n\t\t// Check the return status of getEMDKManager\n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n    The `onCreate` method should look like:\n     \n     ![img](images/MxUSBManagerTutorialImages/on_create_added.jpg)\n\n4. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);\n\n\tYour complete `onOpened` method should now look like:\n    \n    ![img](images/MxUSBManagerTutorialImages/on_opened_method.jpg) \n\n5. It displays an error as we have not added the listener method for \"Set\" button. So let us add `addSetButtonListener` by using following code:\n\n\t\t:::java\n\t\t// Set Button On Click Listener\n\t\t\tprivate void addSetButtonListener() {\n\t\t\t\tButton setButton = (Button) findViewById(R.id.buttonSet);\n\t\t\t\tsetButton.setOnClickListener(new OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(View arg0) {\n\t\t\n\t\t\t\t\t\tint radioid = adbRadioGroup.getCheckedRadioButtonId();\n\t\t\n\t\t\t\t\t\tif (radioid == R.id.radioEnableADB)\n\t\t\t\t\t\t\tvalue = 1; // 1 - Enable USB ADB Usage\n\t\t\n\t\t\t\t\t\tif (radioid == R.id.radioDisableADB)\n\t\t\t\t\t\t\tvalue = 2; // 2 - Disable USB ADB Usage\n\t\t\n\t\t\t\t\t\tupdateUSBSettings();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\tThe code sets variable `value` based on the [Radio Button](http://developer.android.com/guide/topics/ui/controls/radiobutton.html) option selected by the user. This variable will be used to update the profile settings.\n\n\t`value` = 1 -> Enable USB ADB Usage\n\n\t`value` = 2 -> Disable USB ADB Usage\n\n\tThe `addSetButtonListener` method should look like:\n     \n    ![img](images/MxUSBManagerTutorialImages/add_set_button_listener.jpg)\n\n6. Let us declare the `updateUSBSettings` method that will enable or disable ADB USB based on `value` attribute that gets updated depending on user selected option from Radio Button. This method prepares the xml input for the `processProfile` method based on `value` attribute.\n\n\tThis `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method. So the method `updateUSBSettings` has following code.\n\n\t\t:::java\n\t\t// Updates ADB USB settings by setting the profile based on user selected\n\t\t// option on UI\n\t\tpublic void updateUSBSettings() {\n\t\t\t// Reset values\n\t\t\terrorName = \"\";\n\t\t\terrorType = \"\";\n\t\t\terrorDescription = \"\";\n\t\t\tstatus = \"\";\n\t\t\n\t\t\ttry {\n\t\t\n\t\t\t// Prepare XML to update the existing profile based on user selected\n\t\t\t// settings\n\t\t\tString[] modifyData = new String[1];\n\t\t\tmodifyData[0] = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\"\n\t\t\t\t\t\t\t+ \"<characteristic type=\\\"Profile\\\">\"\n\t\t\t\t\t\t\t+ \"<parm name=\\\"ProfileName\\\" value=\\\"USBManagerProfile\\\"/>\"\n\t\t\t\t\t\t\t+ \"<characteristic type=\\\"UsbMgr\\\">\"\n\t\t\t\t\t\t\t+ \"<parm name=\\\"UsbADBUsage\\\" value=\\\"\" + value + \"\\\"/>\"\n\t\t\t\t\t\t\t+ \"</characteristic>\" + \"</characteristic>\";\n\t\t\n\t\t\t// Call processPrfoile with profile name and SET flag to create\n\t\t\t// the\n\t\t\t// profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\t\t\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\t\t\n\t\t\t// Get XML response as a String\n\t\t\tString statusXMLResponse = results.getStatusString();\n\t\t\n\t\t\ttry {\n\t\t\t  // Create instance of XML Pull Parser to parse the\n\t\t\t  // response\n\t\t\t  XmlPullParser parser = Xml.newPullParser();\n\t\t\t  // Provide the string response to the String Reader that\n\t\t\t  // reads\n\t\t\t  // for the parser\n\t\t\t  parser.setInput(new StringReader(statusXMLResponse));\n\t\t\t  // Call method to parse the response\n\t\t\t  parseXML(parser);\n\t\t\t  } catch (XmlPullParserException e) {\n\t\t\t    e.printStackTrace();\n\t\t\t  }\n\t\t\n\t\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\t\t// Method call to display success results in a dialog\n\t\t\t\tdisplayResults(\"Success\", \"Profile Successfully Applied...\");\n\t\t\t  } else {\n\t\t\t    // Method call to display failure results in a dialog\n\t\t\t\t\t\t\tdisplayResults(status, buildFailureMessage());\n\t\t\t  }\n\t\t\n\t\t\t  } else {\n\t\t\t\t// Method call to display failure results in a dialog\n\t\t\t\tdisplayResults(\"Failure\", \"Failed to apply profile...\");\n\t\t\t  }\n\t\t\t} catch (Exception ex) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\n\tThe `updateUSBSettings` method should look like:\n     \n    ![img](images/MxUSBManagerTutorialImages/update_usb_settings_1.jpg)\n\n\tand the remaining part of this method looks like:\t\n\n\t![img](images/MxUSBManagerTutorialImages/update_usb_settings_2.jpg)\n\n7. It displays few errors as we have not declared them. So let us declare them one by one. Once the response is received in string, we will call `parseXML` method to parse it and eventually call `displayResults` method to display output in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The `parseXML` method uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors. \n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\t\tint event;\n\t\t\ttry {\n\t\t\t\tevent = myParser.getEventType();\n\t\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\t\tString name = myParser.getName();\n\t\t\t\t\tswitch (event) {\n\t\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\t\"desc\");\n\t\n\t\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t\t// parm-error\n\t\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase XmlPullParser.END_TAG:\n\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tevent = myParser.next();\n\t\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\tYour complete `parseXML` method should now look like:\n    \n    ![img](images/MxUSBManagerTutorialImages/parse_xml.jpg)\n\n8. Once the response is parsed, we prepare status and error detail messages to handle errors using `buildFailureMessage` method. , in order to display to the user. \n\n\tIn this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxUSBManagerTutorialImages/build_failure_message.jpg)\n\n9. You will still see few errors as we have not yet declared `displayResults` method. So we now declare this generic method that takes two string arguments viz. `title` and `description` and displays them in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) so that the user understands the status of its ADB USB operation. The field `title` represents the status of Profile Manager operation, which could be Success or Failure. The field `description` describes the respective status.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description if any) in a\n\t\t// dialog\n\t\tpublic void displayResults(String title, String description) {\n\t\t\t// Alert Dialog to display the status of the Profile creation\n\t\t\t// operation of MX features\n\t\t\tAlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\t\tMainActivity.this);\n\t\n\t\t\talertDialogBuilder.setTitle(title);\n\t\t\talertDialogBuilder.setMessage(description);\n\t\t\talertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t\t\t// Cancels the dialog\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t// create alert dialog\n\t\t\tAlertDialog alertDialog = alertDialogBuilder.create();\n\t\t\t// show it\n\t\t\talertDialog.show();\n\t\t}\n\n\tThe method `displayResults` method looks like:\n    \n    ![img](images/MxUSBManagerTutorialImages/display_results.jpg)  \n       \n\tYou can see that all the errors are gone.  \n    \n10. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxUSBManagerTutorialImages/on_destroy_method.jpg) \n\nThat's it!!! We are done with all the coding and configuration part that will let us configure (Enable/Disable) the USB ADB Usage on Symbol Android device. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n    Before running the application, we will make sure that USB ADB mode is ON so that we can run this tutorial. So go to Settings -> Developer Options. Make sure that \"USB debugging\" (ADB Mode) option is ON.\n\n    ![img](images/MxUSBManagerTutorialImages/adb_mode_on.png)\n\n2. Run the application.\n\n    ![img](images/MxUSBManagerTutorialImages/home_screen.png)\n\n3. Now select your USB ADB option (We will select \"Disable\") and press \"Set\" button. \n\n\tYou can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message, which indicates that the app has successfully disabled USB ADB Mode.\n\n\t![img](images/MxUSBManagerTutorialImages/success.png)\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n\n3. In other words, the USB debugging option on your Symbol device is turned OFF and you will not be able to run any Android application on this Symbol device. \n\n    ![img](images/MxUSBManagerTutorialImages/adb_mode_off.png)\n\n\tYou can select the enable option and press \"Set\" button to turn USB ADB Usage ON.\n\n\tThis is how USB Manager is used to configure USB ADB Mode on your Symbol Android device using Profile Wizard. \n    \n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to Manage USB configurations using USB Manager on your Symbol devices through applications, let us try to understand and implement some of the other new Mx features introduced in V 3.0. So in the next tutorial, we will concentrate on the \"XML Manager\" Mx feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/MxUSBManagerTutorial.zip)"},{"key":"guide-tutorial-tutMxWiFiManager","name":" Configure Wi-Fi settings and Network Profiles using Mx Wi-Fi:","md":"# Configure Wi-Fi settings and Network Profiles using Mx Wi-Fi:\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on [Wi-Fi Manager](#guide-profiles-refWiFiManager) API, which allows you to manage your device's Wi-Fi settings as well as manage the network profiles to be used for connecting and remembering networks. Overall, Wi-Fi Manager supports following features:\n\n* **[Wi-Fi Enable/Disable](https://developer.motorolasolutions.com/docs/DOC-2290#wifi-enable)**\n* **[Country Selection Auto/Manual](https://developer.motorolasolutions.com/docs/DOC-2290#country-selection-automanual)**\n* **[Country to use for Wi-Fi regulatory setting](https://developer.motorolasolutions.com/docs/DOC-2290#country)**\n* **[RF Bands to use](https://developer.motorolasolutions.com/docs/DOC-2290#rf-band)**\n* **[Wi-Fi Channels](https://developer.motorolasolutions.com/docs/DOC-2290#wifi-channel)**\n* **[Wi-Fi Sleep Policy](https://developer.motorolasolutions.com/docs/DOC-2290#sleep-policy)**\n* **[Network Notification](https://developer.motorolasolutions.com/docs/DOC-2290#network-notification)**\n* **[Network Action](https://developer.motorolasolutions.com/docs/DOC-2290#network-action)**\n* **[Wi-Fi Profiles](https://developer.motorolasolutions.com/docs/DOC-2290#wifi-profiles)**\n* **[Encryption Details](https://developer.motorolasolutions.com/docs/DOC-2290#encryption-details)**\n* **[Authentication Details](https://developer.motorolasolutions.com/docs/DOC-2290#authentication-details)**\n* **[Advanced Options](https://developer.motorolasolutions.com/docs/DOC-2290#advanced-options)**\n\n\n> Note: In order to apply these settings, Wi-Fi must be enabled. If you do not specify Wi-Fi Enable in the profile you will get an error when attempting to apply other settings if the device's Wi-Fi is not already enabled.\n\n \nAll of the above features can be configured the way you want through EMDK Profile Wizard as well as programmatically using Wi-Fi Manager API. In this tutorial, We would be implementing some of the these features through EMDK Wizard.\n\n> Note: In this tutorial, we will be implementing everything through EMDK Wizard. Programmatic change using API is not in the scope of this tutorial.\n\nThe tutorial will be designed to configure Wi-Fi settings with following features and the sequence:\n\n* Enable Wi-Fi\n* Add Network \n* Connect to an existing network\n* Disconnect from an existing network\n* Remove an existing Network\n   \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 2.1 and above\n* Wi-Fi of your Symbol Android device must be enabled.\n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxWiFiManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxWiFiManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxWiFiManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxWiFiManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxWiFiManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxWiFiManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxWiFiManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxWiFiManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxWiFiManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxWiFiManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxWiFiManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxWiFiManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxWiFiManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The Wi-Fi Manager Profile Feature\n1. Select \"WiFiManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxWiFiManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxWiFiManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: WiFiProfile).\n  \n    ![img](images/MxWiFiManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxWiFiManagerTutorialImages/profile_editor.jpg)\n  \n6. Select the \"Wi-Fi\" feature from the list and click \"Right Arrow\". Using this feature you can manage your device's Wi-Fi settings as well as the network profiles to be used for connecting and remembering networks as explained earlier.\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Wi-Fi Manager, UI Manager, Touch Manager etc.) for configuring your Symbol device based on requirements.      \n \n7. Click on the Wi-Fi feature. The parameter list will be populated.  \n  \n    ![img](images/MxWiFiManagerTutorialImages/select_wifi_feature.jpg)\n\n8. You can see various settings of Wi-Fi feature in the wizard as mentioned initially. You can configure all these settings the way you want in the wizard as well as programmatically.\n\n    Provide some name in the \"Name\" field (Ex. MyWiFi). The \"Name\" field is used to identify each feature, which is required when editing features programmatically. You can also keep the \"Name\" field empty.\n    \n    So lets start implementing the settings one by one as mentioned earlier. Currenly, the Wi-Fi of the device is disabled. Before configuring any settings, we must enable the Wi-Fi first. So we will start with the first step by enabling Wi-Fi. Select Wi-Fi Enable drop-down and click \"Enable\" option. This will enable your device's Wi-Fi.  \n\n    ![img](images/MxWiFiManagerTutorialImages/wifi_enable_dropdown.jpg)\n\n    ![img](images/MxWiFiManagerTutorialImages/wifi_enabled.jpg)\n    \n9. Now we will add a new Wi-Fi network. In order to do that, select \"Network Action\" drop-down in the \"Manage Wi-Fi Radio-Specific Settings\" section. This drop-down will display various network opratons that could be performed on your device's Wi-Fi.\n\n    > Note: Keep other settings unchanged. Although you can configure any settings if you wish to.\n\n    ![img](images/MxWiFiManagerTutorialImages/network_action_dropdown.jpg)\n\n    Click on \"Add a New Network\" option and it will show configurable settings related to this option.  \n\n    ![img](images/MxWiFiManagerTutorialImages/add_new_network.jpg)\n    \n10. You can select different types of \"Security Mode\" (Open, Personal, Enterprise) and configure settings associated with each type. For this tutorial, we will keep the \"Security Mode\" as \"Personal\".  \n  \n    ![img](images/MxWiFiManagerTutorialImages/personal_network.jpg)\n\n    Now enter the details for the fields provided. Provide SSID as \"rholink-ap\". Select \"WPA Mode\" as WPA. Enter the passphrase, which is the password for authentication on your network. Check the \"Protect Key?\" checkbox so that the passphrase is protected. Keep the other settings unchanged. \n\n    > Note: The configurations may very depending on the network you add.\n\n    ![img](images/MxWiFiManagerTutorialImages/personal_network_details_added.jpg)  \n  \n9.  Click Apply and Finish. \n\n    ![img](images/MxWiFiManagerTutorialImages/wifi_profile_created.jpg)  \n\n10. Click \"Close\".   \n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxWiFiManagerTutorialImages/emdk_config_file.jpg)\n  \n12. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager. So you can see the entry of all elements in EMDKConfig.xml file that we configured.\n\n    ![img](images/MxWiFiManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxWiFiManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxWiFiManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. We will also create global variables to hold the UI elements and values that are required in this application. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"WiFiProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxWiFiManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tstatusTextView.setText(\"EMDK open success.\");\n\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxWiFiManagerTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxWiFiManagerTutorialImages/on_opened_method_2.jpg)\n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxWiFiManagerTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxWiFiManagerTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxWiFiManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.  \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxWiFiManagerTutorialImages/on_destroy_method.jpg) \n\nThat's it!!! We are done with all the coding and configuration part that will allow us to Enable the Wi-Fi and add a network specified in the EMDK Profile Wizard.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n2. Before running the application, We will make sure that Wi-Fi is disabled. Go to \"Settings\" and disable the Wi-Fi by toggling the status. \n  \n\t![img](images/MxWiFiManagerTutorialImages/disable_wifi.png)\n  \n4. Run the application. If the configurations in the wizard are successfully applied, the app will display a success [Toast](http://developer.android.com/guide/topics/ui/notifiers/toasts.html).\n\n    ![img](images/MxWiFiManagerTutorialImages/home_screen.png)\n\n    You can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) displayed with a success message. It means it enabled the Wi-Fi and added a network named \"rholink-ap\" that we had configured in the wizard earlier in this tutorial.\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n\n    To verify, go to Settings. You can see the Wi-Fi is enabled now. \n  \n\t![img](images/MxWiFiManagerTutorialImages/wifi_on.png)\n\n    Tap on Wi-Fi option and you can see that the \"rholink-ap\" network has been successfully added in the list of available networks. The lock icon near Wi-Fi image indicates that it is a secured password protected network.\n\n    ![img](images/MxWiFiManagerTutorialImages/rho_link_added.png)\n\n    > Note: This setting has just added a new network. We are not yet connected to this new network that we added.  \n\n5. Now we will connect to an existing Wi-Fi network. You can connect to any of the existing Wi-Fi network but we will connect to the one we just added (rholink-ap). So open the profile manager by selecting our project just like we did earlier for adding a network. \n \n\t![img](images/MxWiFiManagerTutorialImages/wifi_profile_created.jpg)\n\n    Click on \"Edit\" button and it will display profile editor window to edit previous configurations.\n\n    ![img](images/MxWiFiManagerTutorialImages/edit_profile.jpg)\n\n    Choose \"Network Action\" as \"Connect to an Existing Network\" from the drop-down.\n\n    ![img](images/MxWiFiManagerTutorialImages/connect_existing_network.jpg)\n\n    Enter SSID of the network you want to connect to. In this tutorial we will connect to network with SSID \"rholink-ap\" that we created earlier.\n \n    ![img](images/MxWiFiManagerTutorialImages/ssid_provided.jpg)\n\n    Click Apply, Finish and Close to save the configurations.  \n\n6. Run the application again.\n\n    ![img](images/MxWiFiManagerTutorialImages/home_screen.png)\n\n    The app displayed a success message. So to verify, go to Settings -> Wi-Fi. You can see that Wi-Fi is successfully connected to the network with SSID \"rholink-ap\", which we provided in the wizard.\n   \n    ![img](images/MxWiFiManagerTutorialImages/wifi_connected.png)\n\n7. We will now disconnect the Wi-Fi from an existing network through wizard. Go to Profile Manager and click Edit button just like we did in previous operations.\n\n    This time select the \"Network Action\" as \"Disconnect from an Existing Network\". Enter the SSID of the network you wish to disconnect from. In this tutorial we will enter the SSID as \"rholink-ap\" to which we are currently connected.\n\n    ![img](images/MxWiFiManagerTutorialImages/disconnect_from_network.jpg)\n\n    Click Apply, Finish and Close.\n\n8. Run the application. \n\n    ![img](images/MxWiFiManagerTutorialImages/home_screen.png)\n\n    The success [Toast](http://developer.android.com/guide/topics/ui/notifiers/toasts.html) indicates that the operation was successful.\n\n    Let us verify that. Go to Settings -> Wi-Fi and you will see that the device has successfully disconneted from the network \"rholink-ap\".\n\n    ![img](images/MxWiFiManagerTutorialImages/disconnected_from_network.png)\n\n9. Finally, we will remove an existing network through the EMDK Profile wizard. So again go to Profile Manager and click on \"Edit\" button. Select \"Network Action\" as \"Remove an Existing Network\". This time we will provide some other SSID just for variation. \n\n    ![img](images/MxWiFiManagerTutorialImages/ssid_to_remove.png)\n\n    In the above screen, you can see a network with SSID \"Deven\". Let us remove this network from the list by providing SSID \"Deven\" in the wizard.\n\n    ![img](images/MxWiFiManagerTutorialImages/remove_existing_network.jpg)\n\n    Click Apply, Finish and Close.\n\n10. Run the application. \n\n    ![img](images/MxWiFiManagerTutorialImages/home_screen.png)\n\n    The success message indicates that the network was removed successfully. So go to Settings -> Wi-Fi and you will not see the network with SSID \"Deven\" in the list of available networks.\n\n    ![img](images/MxWiFiManagerTutorialImages/network_removed.png)\n\n    > Note: If the network is within the range then it might appear again in the list as device scans periodically.\n\n    So these are some of the configurations we implemented using Wi-Fi Manager feature of Mx. You can try any configurations and manage your device's Wi-Fi settings as well as network profiles.\n\n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure your device's Wi-Fi settings as well as network profiles on your Symbol Android devices through applications using Mx Wi-Fi feature, let us try to understand and implement some of the other Mx features. So in the next tutorial, we will concentrate on the \"Certificate Manager\" feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/WiFiManagerTutorial.zip)."},{"key":"guide-tutorial-tutMxWirelessManager","name":" Configure Bluetooth using Mx Wireless Manager","md":"# Configure Bluetooth using Mx Wireless Manager\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use some new Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on configuring wireless configurations on your Symbol Android device (Ex. Configure device's Bluetooth) using [Wireless Manager](#guide-profiles-refWirelessManager) feature of Mx. \n\nSo now we will create a tutorial and configure (Enable/Disable) the Bluetooth of your Symbol Android device using Mx [Wireless Manager](#guide-profiles-refWirelessManager) feature. \n        \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 3.0 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxWirelessManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxWirelessManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxWirelessManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxWirelessManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxWirelessManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\"\n\n7.  Click \"Next\".  \n\n    ![img](images/MxWirelessManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxWirelessManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxWirelessManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxWirelessManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxWirelessManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxWirelessManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxWirelessManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxWirelessManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The Wireless Manager Profile Feature\n1. Select \"MxWirelessManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxWirelessManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxWirelessManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: WirelessProfile).\n  \n    ![img](images/MxWirelessManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxWirelessManagerTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. Wireless Manager, Clock Manager, Access Manager etc.) for configuring your Symbol device based on requirements. \n  \n6. So you can see all these MX features on the left hand side of the Profile Editor window. Select the \"Wireless Manager\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/MxWirelessManagerTutorialImages/wireless_feature.jpg)\n\n    Provide some name in the \"Name\" field (Ex. MyWirelessManager). The \"Name\" field is used to identify each feature, which is required when editing features programmatically. You can also keep the \"Name\" field empty.\n\n    So as discussed, you can configure Bluetooth of your Symbol Android device in Wireless Manager feature of Mx. So we will enable Bluetooth of the device by configuring Wireless Manager through wizard. So click on Bluetooth drop-down in the wizard and select the option \"Enable\".    \n\n    ![img](images/MxWirelessManagerTutorialImages/wireless_manager_details.jpg)\n\n    ![img](images/MxWirelessManagerTutorialImages/wireless_manager_details_selected.jpg)    \n \n7. Click Apply to apply the settings we provided    \n  \n    ![img](images/MxWirelessManagerTutorialImages/wireless_profile_created.jpg)\n\n8. Click Finish and your Wireless profile for configuring Bluetooth is created.\n\n    ![img](images/MxWirelessManagerTutorialImages/wireless_manager_profile_created.jpg) \n  \n9. Click \"Close\".\n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxWirelessManagerTutorialImages/emdk_config_file.jpg)\n  \n10. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/MxWirelessManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxWirelessManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxWirelessManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"WirelessProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxWirelessManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxWirelessManagerTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxWirelessManagerTutorialImages/on_opened_method_2.jpg) \n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxWirelessManagerTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxWirelessManagerTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxWirelessManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.\n           \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxWirelessManagerTutorialImages/on_destroy_method.jpg) \n\nThat's it!!! We are done with all the coding and configuration part that will let us enable Bluetooth of Symbol Android device. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n    Before running the application, We will make sure that Bluetooth of our Android device is disabled. \n\n    Go to device's Settings -> Bluetooth and make sure it is OFF.\n\n    ![img](images/MxWirelessManagerTutorialImages/bluetooth_off.png) \n\n2. Run the application.\n\n    ![img](images/MxWirelessManagerTutorialImages/home_screen.png)\n\n    You can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message.\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n  \n3. We will now see the status of Bluetooth in the settings. So go to device's Settings and you will now see that Bluetooth is enabled by Wireless Manager that we had set in the profile wizard. \n\n    ![img](images/MxWirelessManagerTutorialImages/bluetooth_on.png)\n\n    This is how Wireless Manager lets us enable Bluetooth of the Symbol Android device using Profile Wizard. \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure Bluetooth using Wireless Manager on your Symbol devices through applications, let us try to understand and implement some of the other new Mx features introduced in V 3.0. So in the next tutorial, we will concentrate on the \"UI Manager\" Mx feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/MxWirelessManagerTutorial.zip)"},{"key":"guide-tutorial-tutMxXMLManager","name":" Manage MX Processing Behavior","md":"# Manage MX Processing Behavior\n\n## Overview\n\nThis guide will walk you through creating an EMDK For Android application that will use some new Mx features introduced in EMDK for Android API to perform device configurations. Mx represents a suite of Enterprise Features on top of standard, commercially available Android Open Source Project. So this tutorial will focus on managing the XML processing by specifying the XML processing mode to use on your Symbol Android device using [XML Manager](#guide-profiles-refXMLManager) feature of Mx.\n\nThe XML Manager supports following XML processing Modes:\n\n* Execute all to end\n* Execute until error, then stop\n* Try until error, then Skip to Catch\n* Catch error, Execute remainder\n\nLet us create a tutorial and configure the XML processing mode on your Symbol Android device using Mx [XML Manager](#guide-profiles-refXMLManager) feature. \n        \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android Developer Tools (ADT)\n* EMDK for Android V 3.0 and above \n\nFor more information about setting up the EMDK please see the EMDK Overview.\n\n## Creating The Project\n1.  Create new Android Application project.\n  \n    ![img](images/MxXMLManagerTutorialImages/create_new_app.jpg)\n\n2.  Assign names for the application and package.\n \n3.  Set the minimum required SDK to \"API 16: Android 4.1 (Jelly Bean)\".\n  \n    ![img](images/MxXMLManagerTutorialImages/set_app_name.jpg)\n\n4.  Click \"Next\".\n  \n    ![img](images/MxXMLManagerTutorialImages/configure_project.jpg)\n  \n5.  Click \"Next\".\n  \n    ![img](images/MxXMLManagerTutorialImages/configure_launcher_icon.jpg)\n  \n6.  Click \"Next\".  \n\n7.  Select \"Empty Activity\" Click \"Next\".  \n\n    ![img](images/MxXMLManagerTutorialImages/create_activity.jpg)  \n\n    >Note:  \n    >If \"Empty Activity\" is not available make sure you are using \"Android SDK Tools 22.6.3\" and \"Android SDK Platform Tools 19.0.2\" or any latest version of Android SDK and ADT.\n\n7.  Click \"Next\".  \n\n    ![img](images/MxXMLManagerTutorialImages/empty_activity.jpg)\n  \n8.  Click \"Finish\".\n\n    >Note:  \n    >Currently there is nothing under \"\\assets\" folder.  \n    \n    ![img](images/MxXMLManagerTutorialImages/main_activity.jpg)  \n\n## Enabling the EMDK\n1. Select the project.\n  \n2. Select \"File -> Properties\" or right click on the project and select \"Properties\".\n  \n    ![img](images/MxXMLManagerTutorialImages/project_properties_button_1.jpg)\n   \n    ![img](images/MxXMLManagerTutorialImages/project_properties_button_2.jpg)\n   \n3. Click \"Android\" from the left pane.\n  \n    ![img](images/MxXMLManagerTutorialImages/project_properties.jpg)\n \n4. Select the \"EMDK\" target name from the list of Project Build Targets for the API version you require.  \n    ![img](images/setup/image039.jpg)  \n\n    >Note:  \n    >If an \"EMDK...\" target name is not on the list of Build Targets, please confirm you have installed Android API 16 SDK Platform.\n\n5. Click \"Apply\" and \"OK\".  \n    >Note:  \n    >The EMDK library will be added to the project.  \n    \n    ![img](images/MxXMLManagerTutorialImages/emdk_library_added.jpg) \n\n    >Note:\n    >If you are using Java 1.7 as the compiler, you may see this error\n    \n    ![img](images/MxXMLManagerTutorialImages/compiler_error.jpg) \n\n    > To correct this, you will need to change the compiler to use 1.6\n    \n    > * Click on the Java Compiler\n    > * Click Enable project specific settings\n    > * Select 1.6 for Compiler compliance level\n    \n    ![img](images/MxXMLManagerTutorialImages/java_compiler_settings.jpg) \n\n## Adding The Touch Manager Profile Feature\n1. Select \"XMLManagerTutorial\" project from Package Explorer.\n    \n2. Click \"EMDK\" menu and select \"Profile Manager\".\n  \n    ![img](images/MxXMLManagerTutorialImages/profile_manager_button.jpg)\n  \n3. The EMDK Profile Manager Window will appear.\n  \n    ![img](images/MxXMLManagerTutorialImages/emdk_profile_manager.jpg)\n  \n4. Click \"Create\" and assign a name for the profile (Ex: XMLManagerProfile).\n  \n    ![img](images/MxXMLManagerTutorialImages/create_new_profile.jpg)\n  \n5. Click \"Create\". The Profile Editor window will appear.\n  \n    ![img](images/MxXMLManagerTutorialImages/profile_editor.jpg)\n\n    The Profile Manager wizard provides various features, one of them being Data Capture for capturing Barcode, MSR data in your application and many Mx features (Ex. XML Manager, App Manager, Settings Manager etc.) for configuring your Symbol device based on requirements. \n  \n6. So you can see all these MX features on the left hand side of the Profile Editor window. Select the \"XML Manager\" feature from the list and click \"Right Arrow\".\n\n    ![img](images/MxXMLManagerTutorialImages/xml_feature.jpg)\n\n    Provide some name in the \"Name\" field (Ex. MyXMLManager). The \"Name\" field is used to identify each feature, which is required when editing features programmatically. You can also keep the \"Name\" field empty.\n\n    The drop-down \"XML Processing Mode\" provides different modes of processing XML that you can choose for your Symbol Android device. Select the XML processing mode of your choice. Let us select the first XML processing mode \"Execute all to end\".         \n\n    ![img](images/MxXMLManagerTutorialImages/xml_manager_details.jpg)\n\n    ![img](images/MxXMLManagerTutorialImages/xml_manager_details_selected.jpg)    \n \n7. Click Apply to apply the settings we provided    \n  \n    ![img](images/MxXMLManagerTutorialImages/xml_profile_created.jpg)\n\n8. Click Finish and your XML Manager profile for specifying XML processing mode to use is created.\n\n    ![img](images/MxXMLManagerTutorialImages/xml_manager_profile_created.jpg) \n  \n9. Click \"Close\".\n\n    >Note:  \n    >Now the \"EMDKConfig.xml\" is created under \"\\assets\" folder. This file will contain a definition of all of your profiles that you create. \n    \n    ![img](images/MxXMLManagerTutorialImages/emdk_config_file.jpg)\n  \n10. You can inspect the EMDKConfig.xml to see it is reflecting the changes made to the parameters via EMDK Profile Manager GUI earlier.  However, it is advised that this file not be manually updated and only be controlled via the Profile Manager.\n\n    ![img](images/MxXMLManagerTutorialImages/emdk_config_file_entries.jpg)    \n\n## Enabling Android Permissions\n1. Modify the Application's Manifest.xml to use the EMDK library and to set permission for the EMDK.\n  \n    ![img](images/MxXMLManagerTutorialImages/manifest_file.jpg)\n\n    You must first enable permissions for 'com.symbol.emdk.permission.EMDK':  \n   \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/> \n\n    Then you must enable the library:  \n      \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n\n    When done, your manifest.xml should look like:\n\n    ![img](images/MxXMLManagerTutorialImages/manifest_permissions_added.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code. \n\n    First you must add references to the libraries:  \n    \n        :::java\n        import com.symbol.emdk.*;  \n        import com.symbol.emdk.EMDKManager.EMDKListener;  \n\t\timport android.widget.Toast;    \n\n    Then you must extend the activity to implement EMDKListener. Use Eclipse's Content Assist to implement the unimplemented functions of `onOpened` and `onClosed`.    \n    \n        :::java\n        public class MainActivity extends Activity implements EMDKListener {  \n          \n            .. .. .. .. .. .. ...  \n          \n            @Override  \n            public void onClosed() {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n            @Override  \n            public void onOpened(EMDKManager emdkManager) {  \n                   // TODO Auto-generated method stub  \n            }  \n          \n        }      \n\n    We will now create some global variables to hold the profile name as well as instance objects of EMDKManager and ProfileManager with a status variable while applying the profile. Some of the variables are used to hold the name, type and description in case of any errors. These variables would be used throughout the code. \n\n    >Note:\n    >Verify the Profile name in the code with the one created in the Profile Manager. They both should be identical.    \n    \n        :::java\n        // Assign the profile name used in EMDKConfig.xml\n\t    private String profileName = \"XMLManagerProfile\";\n\n\t    // Declare a variable to store ProfileManager object\n\t    private ProfileManager profileManager = null;\n\n\t    // Declare a variable to store EMDKManager object\n\t    private EMDKManager emdkManager = null;\n\n\t\t// Contains the parm-error name (sub-feature that has error)\n\t\tprivate String errorName = \"\";\n\n\t\t// Contains the characteristic-error type (Root feature that has error)\n\t\tprivate String errorType = \"\";\n\n\t\t// contains the error description for parm or characteristic error.\n\t\tprivate String errorDescription = \"\";\n\n\t\t// contains status of the profile operation\n\t\tprivate String status = \"\";\n\n    In the onCreate method, we call getEMDKManager so that the EMDK can be initialized and checked to see if it is ready. \n\n        :::java\n        //The EMDKManager object will be created and returned in the callback.  \n        EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), this);  \n          \n        //Check the return status of getEMDKManager  \n\t\tif (results.statusCode == EMDKResults.STATUS_CODE.SUCCESS) {\n\n\t\t\t// EMDKManager object creation success\n\n\t\t} else {\n\n\t\t\t// EMDKManager object creation failed\n\n\t\t}\n\n\n    So far your code should look like:\n     \n     ![img](images/MxXMLManagerTutorialImages/on_create_added.jpg) \n\n2. Now we need to use the `onOpened` method to get a reference to the EMDKManager. The EMDKListener interface will trigger this event when the EMDK is ready to be used. The EMDKListener interface must be implemented in order to get a reference to the EMDKManager APIs. This event will pass the EMDKManager instance and we assign it to the global variable `emdkManager` that we created in the previous steps. We then use that instance object to get an instance of ProfileManager and assign it to the global variable `profileManager`. This is how we will interface with the APIs in the rest of the code:\n\n    > Note: \n    > Rename the argument of `onOpened` method from `arg0` to `emdkManager`  \n\n        :::java\n        // This callback will be issued when the EMDK is ready to use.\n\t\tthis.emdkManager = emdkManager;\n\n\t\t// Get the ProfileManager object to process the profiles\n\t\tprofileManager = (ProfileManager) emdkManager\n\t\t\t\t.getInstance(EMDKManager.FEATURE_TYPE.PROFILE);         \n    \n    Now that we have a reference to ProfleManager, we use it to install and activate the profile we built earlier using the `processProfile` method. We could have also performed this action at a different time, say when someone pressed a button, but we chose to do it as soon as the EMDK was ready:\n\n\t\t:::java\n\t\tif (profileManager != null) {\n\t\t\tString[] modifyData = new String[1];\n\n\t\t\t// Call processPrfoile with profile name and SET flag to create the profile. The modifyData can be null.\n\t\t\tEMDKResults results = profileManager.processProfile(profileName,\n\t\t\t\t\tProfileManager.PROFILE_FLAG.SET, modifyData);\n\n\t\t\tif (results.statusCode == EMDKResults.STATUS_CODE.CHECK_XML) {\n\n\n\t\t\t} else {\n\t\t\t  // Show dialog of Failure\n\t\t\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\t\t\tbuilder.setTitle(\"Failure\");\n\t\t\t\tbuilder.setMessage(\"Failed to apply profile...\")\n\t\t\t\t\t\t.setPositiveButton(\"OK\",\n\t\t\t\t\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t\t\tpublic void onClick\t\t\t\t\t\t\t\t\t\t\t\t\t(DialogInterface dialog,\n\t\t\t\t\t\t\t\t\t\t\tint id) {\n\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\tAlertDialog alert = builder.create();\n\t\t\t\talert.show();\n\t\t\t}\n\n\t\t}\n\n    This `processProfile` method returns the result of applying a particular profile that we set using EMDK Profile Wizard in [EMDKResults](#api-EMDKResults) reference. If the profile is successfully processed, it retuns the status as `CHECK_XML` and then we go on and parse the response to get further details whether the profile was applied successfully or not. Otherwise we display a Failure message in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html).\n\n\t> Note: 1. There is a difference between prcessing a profile successfully and applying a profile successfully.\n\n\t> Note: 2. If the status is other than `CHECK_XML`, we are simply displaying a failure message. You can actually go ahead and check different types of status and display the appropriate message accrodingly, which is not in the scope of this sample tutorial.\n\n\n\tIn case of `CHECK_XML` status, We retrive  XML response string from the result using `getStatusString` method.\n\n\t\t:::java\n\t\t// Get XML response as a String\n\t\tString statusXMLResponse = results.getStatusString();\n\n\tFurther, we would parse this XML response string using [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) in order to get the status and error parameters if any. XML Pull Parser is an interface that defines parsing functionality provided in [XMLPULL V1 API](http://www.xmlpull.org/) (visit this website to learn more about API and its implementations). In the parsing we would be looking for specific status tags (Error Name, Error Type and Error Description) in case of any errors and if found, we would get those values in the respective global variables that we have declared in previous step.\n\n\t\t:::java\n\t\ttry {\n\t\t\t// Create instance of XML Pull Parser to parse the response\n\t\t\tXmlPullParser parser = Xml.newPullParser();\n\t\t\t// Provide the string response to the String Reader that reads\n\t\t\t// for the parser\n\t\t\tparser.setInput(new StringReader(statusXMLResponse));\n\t\t\t// Call method to parse the response\n\t\t\tparseXML(parser);\n\t\t\t} catch (XmlPullParserException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t> Note: Here we have called the method `parseXML` to parse XML response string. We will declare the method in the next step. \n\n\tOnce the response is parsed, we would display the result of applying this profile in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html) by calling `displayResults` method, which we would declare in coming steps.\n\n\t\t:::java\n\t\t// Method call to display results in a dialog\n\t\tdisplayResults();\n\n    Your complete `onOpened` method should now look like:\n    \n    ![img](images/MxXMLManagerTutorialImages/on_opened_method_1.jpg) \n\n    ![img](images/MxXMLManagerTutorialImages/on_opened_method_2.jpg)\n\n3. You will see few errors as we have not declared the respective methods to parse the response and display result. Lets do it one by one. In this step, we will create a method `parseXML` that uses [XML Pull Parser](http://developer.android.com/reference/org/xmlpull/v1/XmlPullParser.html) to parse the XML string response and set the status and error parameters if any.\n\n\tIn the reponse, we are supposed to capture `name` and `desc` for `parm-error` tag, `type` and `desc` for `characteristic-error` tag in case of any errors.\n\n\t\t:::java\n\t\t// Method to parse the XML response using XML Pull Parser\n\t\tpublic void parseXML(XmlPullParser myParser) {\n\t\tint event;\n\t\ttry {\n\t\t\tevent = myParser.getEventType();\n\t\t\twhile (event != XmlPullParser.END_DOCUMENT) {\n\t\t\t\tString name = myParser.getName();\n\t\t\t\tswitch (event) {\n\t\t\t\tcase XmlPullParser.START_TAG:\n\t\t\t\t\t// Get Status, error name and description in case of\n\t\t\t\t\t// parm-error\n\t\t\t\t\tif (name.equals(\"parm-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorName = myParser.getAttributeValue(null, \"name\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\n\t\t\t\t\t\t// Get Status, error type and description in case of\n\t\t\t\t\t\t// parm-error\n\t\t\t\t\t} else if (name.equals(\"characteristic-error\")) {\n\t\t\t\t\t\tstatus = \"Failure\";\n\t\t\t\t\t\terrorType = myParser.getAttributeValue(null, \"type\");\n\t\t\t\t\t\terrorDescription = myParser.getAttributeValue(null,\n\t\t\t\t\t\t\t\t\"desc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase XmlPullParser.END_TAG:\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tevent = myParser.next();\n\n\t\t\t  }\n\t\t    } catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t    }\n\t\t}\n\n    Your complete `parseXML` method should now look like:\n    \n    ![img](images/MxXMLManagerTutorialImages/parse_xml.jpg) \n\n4. You will still see one error as we need to declare `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). Before displaying the results, we should form the content of the result to be shown first, specifically in case of errors. This could be done by creating `buildFailureMessage` method.\n \n    In this method, the error message in case of error is formed using following way: \n\n    * Name and description of error if the response contains `parm-error`.\n    * Type and description of error if the response contains `characteristic-error`.\n    * Name, type and description of error if the response contains both `parm-error` and `characteristic-error`.\n\n\tThe `buildFailureMessage` method would have following code to match the above mentioned criteria.  \n\n\t\t:::java\n\t\t// Method to build failure message that contains name, type and\n\t\t// description of respective error (parm, characteristic or both)\n\t\tpublic String buildFailureMessage() {\n\t\t  String failureMessage = \"\";\n\t\t  if (!TextUtils.isEmpty(errorName) && !TextUtils.isEmpty(errorType))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorType + \" :\" + \"\\n\"\n\t\t\t\t\t+ errorDescription;\n\t\t  else if (!TextUtils.isEmpty(errorName))\n\t\t\t failureMessage = errorName + \" :\" + \"\\n\" + errorDescription;\n\t\t  else\n\t\t\t failureMessage = errorType + \" :\" + \"\\n\" + errorDescription;\n\t\t  return failureMessage;\n\n\t\t}\n\n    `buildFailureMessage` method should look like:\n    \n    ![img](images/MxXMLManagerTutorialImages/build_failure_message.jpg)\n\n5. In this step, we will add `displayResults` method to display the result of profile operation in a [dialog](http://developer.android.com/reference/android/app/AlertDialog.html). The dialog would display status as `Success` or `Failure` with corresponding message based on the response of profile operation.\n\n\t\t:::java\n\t\t// Method to display results (Status, Error Name, Error Type, Error\n\t\t// Description) in a\n\t\t// dialog\n\t\tpublic void displayResults() {\n\t\t  // Alert Dialog to display the status of the Profile creation\n\t\t  // operation of MX features\n\t\t  AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(\n\t\t\t\tMainActivity.this);\n\n\t\t  if (TextUtils.isEmpty(errorDescription)) {\n\t\t\talertDialogBuilder.setTitle(\"Success\");\n\t\t\talertDialogBuilder.setMessage(\"Profile Successfully Applied...\");\n\t\t  } else {\n\t\t\t// set title\n\t\t\talertDialogBuilder.setTitle(status);\n\t\t\t// call buildFailureMessage() method to set failure message in\n\t\t\t// dialog\n\t\t\talertDialogBuilder.setMessage(buildFailureMessage());\n\t\t  }\n\n\t\t  alertDialogBuilder.setCancelable(false).setPositiveButton(\"OK\",\n\t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int id) {\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t  // create alert dialog\n\t\t  AlertDialog alertDialog = alertDialogBuilder.create();\n\n\t\t  // show it\n\t\t  alertDialog.show();\n\n\t    }  \n\n    The method `displayResults` should look like:\n    \n    ![img](images/MxXMLManagerTutorialImages/display_results.jpg)\n\n\tYou can see that all the errors are gone.  \n    \n6. Now let's override the \"onDestroy\" method so we can release the EMDKManager resources:  \n\n        :::java\n        @Override  \n        protected void onDestroy() {  \n            // TODO Auto-generated method stub  \n            super.onDestroy();  \n            //Clean up the objects created by EMDK manager  \n            emdkManager.release();  \n        } \n\n    Your onDestroy method should now look like this:  \n\n    ![img](images/MxXMLManagerTutorialImages/on_destroy_method.jpg) \n\nThat's it!!! We are done with all the coding and configuration part that will let us configure XML processing mode on our Symbol Android device. Now let us run the application.\n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug. \n\n2. Run the application.\n\n    ![img](images/MxXMLManagerTutorialImages/home_screen.png)\n\n    You can see an [Alert Dialog](http://developer.android.com/reference/android/app/AlertDialog.html) with a success message, which implies that the XML processing mode has been applied successfully.\n\n\t> Note: In case of any errors, you will see a Failure status with respective error message in that dialog.\n  \n3. We will now verify this by going into the device's Settings -> Display -> Touch Mode.\n\n    ![img](images/MxXMLManagerTutorialImages/touch_mode_changed.png)\n\n    This is how XML Manager is used to specify XML processing mode on your Symbol Android device using Profile Wizard. \n\n##Important Programming Tips##\n\n1. It is required to do the following changes in the application's AndroidManifest.xml:  \n  \n    >Note:\n    >* Include the permission for EMDK:  \n    \n        :::xml\n        <uses-permission android:name=\"com.symbol.emdk.permission.EMDK\"/>\n    \n\t>Note:\n    >* Use the EMDK library:  \n    \n        :::xml\n        <uses-library android:name=\"com.symbol.emdk\"/>\n  \n2. Installing the EMDK for Android application without deploying the EMDK runtime on the Symbol device will fail because of missing shared library on the device.\n \n4. Use the DataWedge v1.7.12 or higher version to test the ProfileManager.processProfile() for DataWedge profiles.\n\n## What's Next\nNow that you have learned how to configure XML Processing Mode using XML Manager on your Symbol devices through applications, let us try to understand and implement some of the other new Mx features introduced in V 3.0. So in the next tutorial, we will concentrate on the \"Wireless Manager\" Mx feature and try to explore this feature by creating a tutorial.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](https://s3.amazonaws.com/emdk/Tutorials/XMLManagerTutorial.zip)"},{"key":"guide-tutorial-tutXamarinDataWedgeIntent","name":" Scan barcodes using DataWedge Intents in Xamarin Android","md":"# Scan barcodes using DataWedge Intents in Xamarin Android\n\n## Overview\n\nThis guide will walk you through creating a [Xamarin](http://xamarin.com/) application on [Android platform](http://developer.xamarin.com/guides/android/) that will scan barcodes using [DataWedge](https://launchpad.motorolasolutions.com/documents/dw_user_guide.html) Intents. Basically, the tutorial will use DataWedge profile that we need to create through which it will send the scanned barcode data to our Xamarin Android application using [Intents](http://developer.android.com/guide/components/intents-filters.html). The same tutorial for native Android using Java is available [here](https://launchpad.motorolasolutions.com/documents/dwdemo_sample.html). Since [Xamarin](http://xamarin.com/) uses C#, we will write similar code using C# in our [Xamarin](http://xamarin.com/) Android application. \n\n> Note: You can go through this [quick starter](http://developer.xamarin.com/guides/android/getting_started/hello,android/hello,android_quickstart/) to get familiar with Xamarin Android.  \n        \n###Prerequisites\n\n* Java Development Kit (JDK)\n* Android SDK\n* Install Xamarin Android on your Mac/Windows machine using guidelines mentioned [here](http://developer.xamarin.com/guides/android/getting_started/installation/) \n\n> Note:\n> This tutorial uses Xamarin studio for app development. You can use either Visual Studio or Xamarin Studio.\n\n## Creating The Project\n1.  Launch the Xamarin Studio\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/launch_studio.jpg)\n \n2.  Create a new Solution\n  \n    ![img](images/XamarinDataWedgeIntentTutorialImages/create_new_solution.jpg)\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/new_solution.jpg)\n\n3.  Select \"Android\" section under \"C#\" on the left hand side and you will see different options of creating Android Project.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/android_section.jpg)\n \n4.  Select \"Android Application\" and provide application name in the \"Name\" field (Ex. barcodescanner).\n  \n    ![img](images/XamarinDataWedgeIntentTutorialImages/set_app_name.jpg)\n\n> Note: You can set different location for the project based on your workspace.\n\n5.  Click \"OK\" and the project will be created.\n  \n    ![img](images/XamarinDataWedgeIntentTutorialImages/project_created.jpg)   \n  \n\n## Updating Manifest\n1. Modify the Application's AndroidManifest.xml to receive Intents from a Profile of DataWedge application that we will be creating later.\n\n\tInitially the AndroidManifest.xml file looks like: \n  \n    ![img](images/XamarinDataWedgeIntentTutorialImages/manifest_file.jpg)\n\n\tRemove all the existing code and add following code:\n\n\t\t:::xml\n\t\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t\t<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" android:versionCode=\"1\" android:versionName=\"1.0\" package=\"barcodescanner.barcodescanner\">\n\n\t\t  <uses-sdk android:targetSdkVersion=\"19\" android:minSdkVersion=\"16\" />\n\n\t\t  <application android:icon=\"@drawable/icon\" android:label=\"barcodescanner\">\n\t\t   <activity android:name=\".MainActivity\" android:label=\"barcodescanner\" android:launchMode=\"singleTask\">\n\t\t    <intent-filter>\n\t\t\t  <action android:name=\"barcodescanner.RECVR\" />\n\n\t\t\t  <category android:name=\"android.intent.category.DEFAULT\" />\n\t\t    </intent-filter>\n\t\t   </activity>\n\t      </application>\n    \t</manifest>\n\n    we have added the `MainActivity` in `application` tag. This MainActivity has has the [Intent Filters](http://developer.android.com/guide/topics/manifest/intent-filter-element.html) that specifies a Receiver through which the app would receive Intent from DataWedge application for its MainActivity.\n\n\tYou can also see that `activity` tag has an attribute `android:launchMode=\"singleTask\"` that provides only one instance of the [Activity](http://developer.android.com/reference/android/app/Activity.html), which handles all new incoming Intents.       \n    \n    When done, your manifest.xml should look like:\n\n    ![img](images/XamarinDataWedgeIntentTutorialImages/manifest_updated.jpg) \n\n##Adding Some Code    \n1. Now we will start to add some code.\n\n\tFirst, Lets add a simple User Interface that contains a [Text View]( http://developer.android.com/reference/android/widget/TextView.html) as a label and  an [Edit Text](http://developer.android.com/reference/android/widget/EditText.html) that will display Barcode data to the user.\n\n\tSo go to `Resources -> layout -> Main.axml` and remove all the existing code. Add the following code to `Main.axml`:\n\n\t\t:::xml\n\t\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t\t<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    \t  android:orientation=\"vertical\"\n\t      android:layout_width=\"fill_parent\"\n\t      android:layout_height=\"fill_parent\"\n\t      android:minWidth=\"25px\"\n\t      android:minHeight=\"25px\">\n\t\t    <TextView\n\t\t      android:layout_width=\"match_parent\"\n\t\t      android:layout_height=\"wrap_content\"\n\t\t      android:layout_margin=\"10dip\"\n\t\t      android:text=\"Barcode Data:\"\n\t\t      android:textSize=\"18sp\"\n\t\t      android:textStyle=\"bold\" />\n\t\t    <EditText\n\t\t      android:layout_width=\"match_parent\"\n\t\t      android:layout_height=\"wrap_content\"\n\t\t      android:inputType=\"textMultiLine\"\n\t\t      android:id=\"@+id/editbox\" />\n    \t</LinearLayout>\n\n\tNow, your `Main.axml` file should look like:\n\n    ![img](images/XamarinDataWedgeIntentTutorialImages/main_ui.jpg)\n\n2. Once done with User Interface, we will now add some C# code in `MainActivity.cs` to get the scanned barcode data through DataWedge application profile using Intent and display it in the User Interface.\n\n\tSo open the `MainActivity.cs` file that looks like:\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/main_activity_initial.jpg)\n\n\tRemove the existing code from `OnCreate` method including variables and Activity information just above `MainActivity` class. The `MainActivity.cs` should now look like:\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/remove_oncreate_info.jpg)\n\n3. Remove all the existing `using` imports in `MainActivity.cs` add add the following imports that let you use required components in the application.\n\n\t\t:::java\n\t\tusing System;\n\n\t\tusing Android.App;\n\t\tusing Android.Content;\n\t\tusing Android.Runtime;\n\t\tusing Android.Views;\n\t\tusing Android.Widget;\n\t\tusing Android.OS;\n\t\tusing Android.Text;\n\t\tusing Android.Text.Style;\n\t\tusing Android.Graphics;\n\n\tWe need to add manifest attributes such as Activities and Intent Filters to our `MainActivity.cs` in order to make our code work. So add the following code just above `MainActivity` class in `MainActivity.cs`.\n\n\t> Note: For more Information please go through [Working with AndroidManifest.xml](http://developer.xamarin.com/guides/android/advanced_topics/working_with_androidmanifest.xml/)\n\n\t\t:::java\n\t\t[Activity (Name=\"barcodescanner.barcodescanner.MainActivity\", Label = \"barcodescanner\", \n\t\tLaunchMode = Android.Content.PM.LaunchMode.SingleTask , MainLauncher = true, Icon = \"@drawable/icon\")]\n\n\t\t[IntentFilter(new string[] { \"barcodescanner.RECVR\" }, Categories = new[] { Intent.CategoryDefault })]\n\n\tYour code with the imports and manifest attributes should look like:\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/using_imports.jpg)\n\n4. Lets declare some global variables in `MainActivity` class that we would be using in our application. Some of these variables hold the Intent information such as `source-tag`, `label-type` and `data-string` of the scanned barcode data coming through DataWedge application. The variable `ourIntentAction` holds the Intent Action for our operation and `editText` holds the UI information, which in this tutorial is barcode data.\n\n\t\t:::java\n\t\t// This intent string contains the source of the data as a string  \n\t\tprivate static string SOURCE_TAG = \"com.motorolasolutions.emdk.datawedge.source\";\n\t    // This intent string contains the barcode symbology as a string  \n\t\tprivate static string LABEL_TYPE_TAG = \"com.motorolasolutions.emdk.datawedge.label_type\";\n\t    // This intent string contains the captured data as a string  \n\t    // (in the case of MSR this data string contains a concatenation of the track data)  \n\t\tprivate static string DATA_STRING_TAG = \"com.motorolasolutions.emdk.datawedge.data_string\";\n\t\t// Intent Action for our operation\n\t    private static string ourIntentAction = \"barcodescanner.RECVR\";\n\t\t// EditText to hold Barcode data\n\t\tprivate EditText editText;\n\n5. We will now configure `OnCreate` method by adding following code:\n\n\t\t:::java\n\t\t// Set our view from the \"main\" layout resource\n\t    SetContentView(Resource.Layout.Main);\n\n\t    // Get our button from the layout resource,\n\t    // and attach an event to it\n\t\teditText = FindViewById<EditText>(Resource.Id.editbox);\n\t\teditText.SetSelection(editText.Text.Length);\n\t           \n\t\tIntent i = Intent;\n\t    handleDecodeData(i);\n\n\tThis code block refers to `Main.axml` to get the User Interface for Main Activity. It refers to the UI elements declared in the `Main.axml` layout. The intent code will launch the activity as a single task. \n\n\tSo the code with global variables and `OnCreate` method should look like:\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/on_create.jpg)\n\n\t> Note: The red color indicates `handleDecodeData` method is not defined, which We will do in the next step.\n\n6. In this step, we would specify `handleDecodeData` method that accepts Intent with scanned barcode information. We will extract this barcode information and display to the user in this method.\n\n\t\t:::java\n\t\t// Receives the Intent that has barcode info and displays to the user\n\t    private void handleDecodeData(Android.Content.Intent i)\n\t    {\n\t          // check the intent action is for us  \n\t          if (i.Action.Equals(ourIntentAction))\n\t          {\n\t              // define a string that will hold our output  \n\t              String Out = \"\";\n\t              // get the source of the data  \n\t              String source = i.GetStringExtra(SOURCE_TAG);\n\t              // save it to use later  \n\t              if (source == null) source = \"scanner\";\n\t              // get the data from the intent  \n\t              String data = i.GetStringExtra(DATA_STRING_TAG);\n\t              // let's define a variable for the data length  \n\n\n\t              int data_len = 0;\n\t              // and set it to the length of the data  \n\t              if (data != null) data_len = data.Length;\n\t              // check if the data has come from the barcode scanner  \n\t              if (source.Equals(\"scanner\"))\n\t              {\n\t                  // check if there is anything in the data  \n\t                  if (data != null && data.Length > 0)\n\t                  {\n\t                      // we have some data, so let's get it's symbology  \n\t                      String sLabelType = i.GetStringExtra(LABEL_TYPE_TAG);\n\t                      // check if the string is empty  \n\t                      if (sLabelType != null && sLabelType.Length > 0)\n\t                      {                        \n\t\t\t\t\t\t  \t  // format of the label type string is LABEL-TYPE-SYMBOLOGY  \n\t                          // so let's skip the LABEL-TYPE- portion to get just the symbology  \n\t                          sLabelType = sLabelType.Substring(11);\n\t                      }\n\t                      else\n\t                      {\n\t                          // the string was empty so let's set it to \"Unknown\"  \n\t                          sLabelType = \"Unknown\";\n\t                      }\n\n\n\t                      // let's construct the beginning of our output string  \n\t                      Out = \"Source: Scanner, \" + \"Symbology: \" + sLabelType + \", Length: \" + data_len.ToString() + \", Data: ...\\r\\n\";\n\t                  }\n\t              }\n\t              // check if the data has come from the MSR  \n\t              if (source.Equals(\"msr\"))\n\t              {\n\t                  // construct the beginning of our output string  \n\t                  Out = \"Source: MSR, Length: \" + data_len.ToString() + \", Data: ...\\r\\n\";\n\t              }\n\n\t              // we need to put the edit box text into a spannable string builder  \n\t\t\t\t  SpannableStringBuilder stringbuilder = new SpannableStringBuilder(editText.Text);\n\t              // add the output string we constructed earlier  \n\t              stringbuilder.Append(Out);\n\t              // now let's highlight our output string in bold type  \n\t              //stringbuilder.SetSpan(new StyleSpan(Typeface.DefaultBold), et.Text.Length, stringbuilder.Length, SpannableString.SPAN_EXCLUSIVE_EXCLUSIVE);  \n\t              // then add the barcode or msr data, plus a new line, and add it to the string builder  \n\t              stringbuilder.Append(data + \"\\r\\n\");\n\t              // now let's update the text in the edit box  \n\t\t\t\t  editText.SetText(stringbuilder.ToString(), null);\n\t              // we want the text cursor to be at the end of the edit box  \n\t              // so let's get the edit box text again  \n\n\t              // and set the cursor position at the end of the text  \n\t\t\t\t  editText.SetSelection(editText.Text.Length);\n\t              // and we are done!  \n\t          }\n\t    }\n\n\tAs you can see the method receives Intent. It then fetches source data of the Intent along with data string. The method then checks for scanner device types such as `Scanner` and `MSR`, which is going to be `Scanner` in this tutorial. Based on the scanner device (Scanner), the method would form the output data string that contains barcode data and display it in the Edit Text that we specified in layout.\n\n\tSo the `handleDecodeData` method should look like:\n\n\t> Note: Since the `handleDecodeData` method is too long, it's been divided into multiple screen captures.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/handle_decode_data_1.jpg)\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/handle_decode_data_2.jpg)\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/handle_decode_data_3.jpg)\n\n7. Finally, we would override `OnNewIntent` method that primarily receives the Intent sent by our DataWedge profile whenever a barcode is scanned. This method would in turn call `handleDecodeData` method to get the barcode data, format it and display it to the user.\n\n\tAdd following code for `OnNewIntent` method:\n\n\t\t:::java\n\t\t// Receives Intent from DataWedge application that has barcode data \n\t    protected override void OnNewIntent(Intent i)\n\t    {\n\t        handleDecodeData(i);\n\t    }\n\n\tThe method `OnNewIntent` looks like:\n\t\n\t![img](images/XamarinDataWedgeIntentTutorialImages/on_new_intent_method.jpg)  \n\nThat's it!!! We are done with all the coding part that will let us capture the Intent sent by DataWedge Profile whenever a barcode is scanned. This Intent has the barcode data that would be extracted and displayed in our Xamarin Android application.\n\n> Note: We have not yet created the DataWedge Profile for our Xamarin Android application. We will create it after we run the application so that the profile can see our \"barcodescanner\" application in the list of available applications. \n \n## Running the Application\n\n1. Connect the device (having the latest EMDK runtime) to USB port. \n\n    > Note:   \n    > Make sure the device is in USB debug.\n\n\tIn order to run the application on device, select your connected Symbol device under \"Physical Devices\" in the drop-down.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/physical_device.jpg)\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/physical_device_selected.jpg)\n\n2. Run the application by pressing ![img](images/XamarinDataWedgeIntentTutorialImages/run_app.jpg)  button on the top left corner of Xamarin Studio.\n\n    ![img](images/XamarinDataWedgeIntentTutorialImages/home_screen.png)\n\n\tAs we have not created the \"DataWedge Profile\" yet, we will not get the formatted barcode data in the EditText after scanning barcodes. So lets create one.\n\n3. **Creating a DataWedge Profile:**\n\n\t* Open DataWedge application.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/data_wedge.png)\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/data_wedge_opened.png)\n\n\t* You can see different DataWedge Profiles associated with their different respective applications. Now we need to create a DataWedge Profile specific to our Android application that we have created and installed on Symbol device. So click the Menu button and select \"New Profile\" option.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/new_profile.png)\n\n\t* Enter some Profile Name (Ex. Xamarin-Profile) and press \"OK\".\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/profile_name.png)\n\n\t* The profile is now created. We need to configure the profile to throw barcode Intent to our Xamarin Android application. So tap on the profile we created.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/profile_list.png)\n\n\t* Now associate our application to this profile by clicking \"Associated apps\" option. This will let the profile know to pass Intent having barcode data to our application every time a barcode is scanned.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/associated_apps.png)\n\n\t* Press menu and select \"New app/activity\" option.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/new_app.png)\n\n\t* Select our Xamarin Android application from the list (barcodescanner.barcodescanner).\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/select_xamarin_app.png)\n\n\t* Select the Activity where you want your app to receive Intent. In our case, it would be **barcodescanner.barcodescanner.MainActivity**. So select that option and you should see following.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/activity_selected.png)\n\n\t* Now scroll down a bit and disable the \"Keystroke Output\" option.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/disable_keystroke.png)\n\n\t* Scroll down and Enable the \"Intent Output\" option, which allows your application to receive information via Intents.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/enable_intent_output.png)\n\n\t* Just below that, click the \"Intent Action\" option and specify the Intent action name that we mentioned in our apps manifest file (barcodescanner.RECVR) and press \"OK\"\n\n\t> Note: The Intent Action Name in the manifest and DataWedge Profile should be identical.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/intent_action_name.png)\n\n\t* Just below that, click the \"Intent Category\" option and specify the Intent category name that we mentioned in our apps manifest file (android.intent.category.DEFAULT) and Press \"OK\"\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/intent_category_name.png)\n\n\t* So now we have successfully created a DataWedge Profile (Xamarin-Profile) that transfers the Intents having barcode data to our Xamarin Android application (barcodescanner).\n\n4. So open the Xamarin Android application named \"barcodescanner\" that we created.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/home_screen.png)\n\n5. Now scan the barcodes and you should see the formatted barcode data successfully received through our DataWedge Profile and displayed on the Edit Text of our Xamarin Android application.\n\n\t![img](images/XamarinDataWedgeIntentTutorialImages/barcode_data.png)\n\n##Important Programming Tips##\n\n1. It is required to add the manifest configurations in MainActivity.cs file to make them work properly.\n\n\tExample:  \n  \n    \t:::java\n\t\t[Activity (Name=\"barcodescanner.barcodescanner.MainActivity\", Label = \"barcodescanner\", \n\t\tLaunchMode = Android.Content.PM.LaunchMode.SingleTask , MainLauncher = true, Icon = \"@drawable/icon\")]\n\n\t\t[IntentFilter(new string[] { \"barcodescanner.RECVR\" }, Categories = new[] { Intent.CategoryDefault })]\n\t\t\n  \n2. Make sure you check the compatibility of the Xamarin and Xamarin Studio versions that you are installing on your machine.\n\n## Download the Source\nThe project source to this tutorial can be [downloaded (Internet Connection Required)](source code link)"}];