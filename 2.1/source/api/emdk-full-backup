#EMDKManager

The EMDKManager class is the key class in Android EMDK. This class provides access to different classes for the supported features. Clients should call EMDKManager.getEMDKManager(Context, EMDKManager.EMDKListener), to get the EMDKManager object. Each application implements EMDKListener interface. The EMDKManager object will be returned on successful opening through the EMDKListener callback.

**Example Usage:**

:::java
EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), emdkListener);


**Version:**

2.0

##Public Methods
###**getEMDKManager**(Context context, EMDKManager.EMDKListener emdkListener)
This is static method and it is the key function to get the EMDKManager object. Clients must implement <a href="#EMDKManagerEMDKListener">EMDKManager.EMDKListener</a> to get notified of the EMDK manager status and to get the EMDKManager object.

**Example Usage:**
:::java
EMDKResults results = EMDKManager.getEMDKManager(getApplicationContext(), emdkListener);


**Parameters:**

**context** - The application context should be provided by the user.
**emdkListener** - The EMDK Listener for listener callbacks.

**Returns:**
com.symbol.emdk.EMDKResults - <a href="#EMDKResults">EMDKResults</a> object.

###**getInstance**(EMDKManager.FEATURE_TYPE featureType)
This method returns an object instance which has derived from EMDKBase. Based on the type given, the object needs to be type-casted before used. Calling this method <a href="#getInstanceEMDKManagerFEATURETYPE">EMDKManager.getInstance(FEATURE_TYPE)</a> before EMDKManager opened will return null.

**Example Usage:**

:::java
@Override
public void onOpened(EMDKManager emdkmanager)
{
ProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);
VersionManager versionManager = (VersionManager)emdkmanager.getInstance(FEATURE_TYPE.VERSION);
}


**Parameters:**

**featureType** - The <a href="#EMDKManagerFEATURETYPE">EMDKManager.FEATURE_TYPE</a> the object to be created.

**Returns:**
com.symbol.emdk.EMDKBase - Object derived from EMDKBase to be type-casted to the appropriate type. Currently <a href="#ProfileManager">ProfileManager</a> and <a href="#VersionManager">VersionManager</a> are returned based on the <a href="#EMDKManagerFEATURETYPE">EMDKManager.FEATURE_TYPE</a> given in.

###**release**()
This method releases all the resources constructed by EMDKManager. EMDKManager can't be used after this call. The clients must call this method before exiting the application.

**Example Usage:**

:::java
emdkManager.release();


**Returns:**
void

###**release**(EMDKManager.FEATURE_TYPE featureType)
This method releases resources of a given manager type. Instance variable is not required as multiple instances are not allowed by design.

**Example Usage:**

:::java
emdkManager.release(EMDKManager.FEATURE_TYPE.PROFILE);


**Parameters:**

**featureType** - Type of <a href="#EMDKManagerFEATURETYPE">EMDKManager.FEATURE_TYPE</a> to be released. Only the given feature related manager will be cleared if it has been constructed.

**Returns:**

void

##Public Enums
###**EMDKManager.FEATURE_TYPE**
This lists all the features exposed by the EMDK.

**Example Usage:**

:::java
FEATURE_TYPE.PROFILE


**Values:**

**PROFILE** - EMDK feature type profile
**VERSION** - EMDK feature type version

###Interface-EMDKManager.

#EMDKListener
This is the interface for the callback to notify the opening and closing status of the EMDK. On a successful opening, the EMDKManager object will be returned. An interface for notifying clients when they the EMDKManager is ready to use or closed abruptly.

**Example Usage:**

:::java
public class MainActivity extends Activity implements EMDKListener

.. .. ..

EMDKManager.getEMDKManager(getApplicationContext(), emdkListener);


**Version:**
2.0

##Public Methods
###**onClosed**()
Called to notify the client that this EMDKManager object has been abruptly closed. The clients must call to call <a href="#release">EMDKManager.release()</a> to free all the resources used by EMDKManager even after onClosed(). Notifies user upon a abrupt closing of EMDKManager.

**Example Usage:**

:::java
@Override
public void onClosed()
{

}


**Returns:**
void

###**onOpened**(EMDKManager emdkManager)
Called to notify the client when the EMDKManager object has been opened and its ready to use.

**Example Usage:**

:::java
@Override
public void onOpened(EMDKManager emdkManager)
{

}


**Parameters:**

**emdkManager**

**Returns:**
void

#EMDKResults
Class for holding result data.

**Example Usage:**

:::java
@Override
public void onOpened(EMDKManager emdkmanager)
{
ProfileConfig profileConfigObj = new ProfileConfig();
ProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);
EMDKResults results = profileManager.processProfile("Profile Name", ProfileManager.PROFILE_FLAG.GET, profileConfigObj);
}


**Version:**
2.0

##Public Methods
###**getStatusDocument**()
Gets status results from process profile as xml document.

**Example Usage:**

:::java
Document document = results.getStatusDocument();


**Returns:**
org.w3c.dom.Document - XML document.

###**getStatusString**()
Gets status results from process profile as xml string.

**Example Usage:**

:::java
String xml = results.getStatusString();


**Returns:**
java.lang.String - XML text.

##Public Fields
###**statusCode**
Gets status code result from process profile as enum value of type <a href="#EMDKResultsSTATUSCODE">EMDKResults.STATUS_CODE</a>.

**Example Usage:**

:::java
STATUS_CODE statusCode = results.statusCode;


**Type:**
com.symbol.emdk.<a href="#EMDKResultsSTATUSCODE">EMDKResults.STATUS_CODE</a>

##Public Enums
###**EMDKResults.STATUS_CODE**
Defines all the status codes the library returns.

**Example Usage:**

:::java
results.statusCode.SUCCESS;


**Values:**

**SUCCESS** - Process profile was a success.
**FAILURE** - Process profile was a failure.
**UNKNOWN** - Process profile had mixed results.
**NULL_POINTER** - Process profile was a had a null value.
**EMPTY_PROFILENAME** - Profile name passed Process profile was empty.
**EMDK_NOT_OPENED** - EMDK is not opened

#ProfileConfig
Class for dealing with profile data

**Example Usage:**

:::java
ProfileConfig profileConfig = new ProfileConfig();




**Version:**

2.0

##Constructors
###**ProfileConfig**()
Creates a new instance of ProfileConfig.

**Example Usage:**

:::java
ProfileConfig profileConfig = new ProfileConfig();


##Public Fields
###**activitySelection**
Gets and Sets the activity selection for the profiles <a href="#activitySelection">ProfileConfig.activitySelection</a>. If no activities are associated to profile, the profile will be associated to that application for that session.

**Example Usage:**

:::java
ActivitySelection activitySelection = profileConfig.activitySelection;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigActivitySelection">ProfileConfig.ActivitySelection</a>

###**dataCapture**
Gets and Sets the profiles DataCapture object <a href="#dataCapture">ProfileConfig.dataCapture</a>.

**Example Usage:**

:::java
DataCapture dataCapture = profileConfig.dataCapture;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCapture">ProfileConfig.DataCapture</a>

###**modifiedDate**
Gets and Sets the profiles modified date string.

**Example Usage:**

:::java
String profileDate = profileConfig.modifiedDate;




**Type:**

java.lang.String

###**profileName**
Gets and Sets the profile name.

**Example Usage:**

:::java
String profileName = profileConfig.profileName;


**Type:**

java.lang.String

##Public Enums
###**ProfileConfig.ACTION_KEY_CHAR**
Keystroke Output Action key character enables decoding of a special character embedded within a bar code or MSR data for use in native Android applications. This feature is helpful when populating or executing a form.

**Example Usage:**

:::java
ACTION_KEY_CHAR.NONE;


**Values:**

**DEFAULT** - Default action key character configured on the device.
**NONE** - Action key character feature is disabled.
**TAB** - Tab character code in a bar code is processed. When DataWedge detects this character code in a bar code, move the focus to the next field.
**LINEFEED** - Line feed character code in a bar code is processed. When DataWedge detects this character code in a bar code, move the focus to the next field.
**CARRIAGERETURN** - Carriage return character code in a bar code is processed. When DataWedge detects this character code in a bar code, move the focus to the next field.

###**ProfileConfig.BOOKLAND_FORMAT**
Lists the Bookland formats

**Example Usage:**

:::java
BOOKLAND_FORMAT.DEFAULT;


**Values:**

**DEFAULT** - Default bookland format configured on device.
**ISBN_10** - 978 reported in 10 digit mode.
**ISBN_13** - 978/979 transmitted as EAN13 as per 2007 ISBN-13 protocol.

###**ProfileConfig.CHECK_DIGIT**
The number of check digits to be verified. With MSI symbols, one check digit is mandatory and always verified by the reader. The second check digit is optional.

**Example Usage:**

:::java
CHECK_DIGIT.DEFAULT;


**Values:**

**DEFAULT** - Default check digit configured on device.
**ONE** - Verify one check digit.
**TWO** - Verify two check digits.

###**ProfileConfig.CHECK_DIGIT_SCHEME**
Two algorithms are possible for the verification of the second MSI check digit. Select the algorithm used to encode the check digit.

**Example Usage:**

:::java
CHECK_DIGIT_SCHEME.DEFAULT;


**Values:**

**DEFAULT** - Default check digit scheme configured on device.
**MOD_11_10** - First check digit is MOD 11 and second check digit is MOD 10.
**MOD_10_10** - Both check digits are MOD 10.

###**ProfileConfig.CHECK_DIGIT_TYPE**
Verify data integrity.

**Example Usage:**

:::java
CHECK_DIGIT_TYPE.DEFAULT;


**Values:**

**DEFAULT** - Default check digit type configured on device.
**NO** - A check digit is not used.
**USS** - Select to check the integrity of all Interleaved 2 of 5 symbols to verify the data complies with either the Uniform Symbology Specification (USS) check digit algorithm.
**OPCC** - Select to check the integrity of all Interleaved 2 of 5 symbols to verify the data complies with either the Optical Product Code Council (OPCC) check digit algorithm.

###**ProfileConfig.CODE_ID_TYPE**
A Code ID character identifies the code type of a scanned bar code. This is useful when the reader is decoding more than one code type. Select a code ID character to insert between the prefix and the decoded symbol.

**Example Usage:**

:::java
CODE_ID_TYPE.DEFAULT;


**Values:**

**DEFAULT** - Default prefix configured on device.
**NONE** - No prefix.
**AIM** - A standards based three character prefix.
**SYMBOL** - A Symbol defined single character prefix.

###**ProfileConfig.COUPON_REPORT**
Supported Coupon modes

**Example Usage:**

:::java
COUPON_REPORT.DEFAULT;


**Values:**

**DEFAULT** - Default coupon reports mode configured on device.
**OLD** - Scanner will read only the old coupon format.
**NEW** - Scanner will read only the new GS1 DataBar coupon format.
**BOTH** - Scanner will read both old coupon format as well as the new GS1 DataBar coupon format.

###**ProfileConfig.DEVICETYPES**
List of supported scanner device types.

**Example Usage:**

:::java
DEVICETYPES.INTERNAL_LASER1;


**Values:**

**AUTO** - Default scanner device configured on device.
**INTERNAL_LASER1** - Internal laser.
**INTERNAL_CAMERA1** - Internal camera.
**INTERNAL_IMAGER1** - Internal imager.

###**ProfileConfig.ENABLED_STATE**
Enable states.

**Example Usage:**

:::java
ENABLED_STATE.FALSE;


**Values:**

**DEFAULT** - Default enable state configured on device.
**FALSE** - Disabled.
**TRUE** - Enabled.

###**ProfileConfig.ILLUMINATION_MODE**
Turns camera illumination on and off. This option is only available when camera is selected in the Barcode input Scanner selection option.

**Example Usage:**

:::java
ILLUMINATION_MODE.DEFAULT;


**Values:**

**DEFAULT** - Default illumination configured on device.
**OFF** - External illumination is always is off.
**ON** - External illumination is always on.

###**ProfileConfig.INTENT_DELIVERY**
Allows configuration of the Intent Output Plug-in for the profile. The Intent Output Plug-in allows the captured data to be sent to an application in the form of an implicit Intent.

**Example Usage:**

:::java
INTENT_DELIVERY.SEND_VIA_STARTACTIVITY;


**Values:**

**DEFAULT** - Default intent delivery type configured on the device.
**SEND_VIA_STARTACTIVITY** - Send output via StartActivity.
**SEND_VIA_STARTSERVICE** - Send output via startService.
**BROADCAST_INTENT** - Send output via Broadcast intent.

###**ProfileConfig.INVERSE_1D_MODE**
This parameter allows the user to select decoding on inverse 1D bar codes.

**Example Usage:**

:::java
INVERSE_1D_MODE.DEFAULT;


**Values:**

**DEFAULT** - Default inverse 1D mode configured on device.
**DISABLED** - Disables decoding of inverse 1D symbologies.
**ENABLED** - Enables decoding of only inverse 1D symbologies.
**AUTO** - Allows decoding of both positive as well as inverse 1D symbologies.

###**ProfileConfig.ISBT128_CONTACT_MODE**
Option for concatenating pairs of ISBT128 code types.

**Example Usage:**

:::java
ISBT128_CONTACT_MODE.DEFAULT;


**Values:**

**DEFAULT** - Default ISBT128 concatenation configured on device.
**NEVER** - Will ignore the barcode pair and only output decode data for only one of the barcodes.
**ALWAYS** - Will not decode if both the barcodes are not present or if one of them cannot be decoded. There must be two ISBT codes in order to decode and perform concatenation.
**AUTO** - Decodes and concatenates pairs of ISBT codes immediately. If only a single ISBT symbol is present, the device must decode the symbol the number of times set via DataWedge Configuration 4 - 1 1 Redundancy - Code128 before transmitting its data to confirm that there is no additional ISBT symbol.

###**ProfileConfig.LCD_MODE**
Enable or disable LCD mode (for Blockbuster imager devices only). LCD mode enhances the ability of the imager to read bar codes from LCD displays such as cellphones.

**Example Usage:**

:::java
LCD_MODE.DEFAULT;


**Values:**

**DEFAULT** - Default LCD mode configured on device.
**DISABLED** - Disables LCD mode.
**ENABLED** - Enables LCD mode.

###**ProfileConfig.LINEAR_SECURITY_LEVEL**
Sets the number of times a bar code is read to confirm an accurate decode.

**Example Usage:**

:::java
LINEAR_SECURITY_LEVEL.DEFAULT;


**Values:**

**DEFAULT** - Default linear security level configured on device.
**SHORT_OR_CODABAR** - Two times read redundancy if short bar code or Codabar.
**ALL_TWICE** - Two times read redundancy for all bar codes (default).
**LONG_AND_SHORT** - Two times read redundancy for long bar codes, three times for short bar codes.
**ALL_THRICE** - Three times read redundancy for all bar codes.

###**ProfileConfig.PICK_LIST**
Allows the imager to decode only the bar code that is directly under the cross-hair/reticle (+) part of the pattern. This feature is useful in applications where multiple bar codes may appear in the field of view during a decode session and only one of them is tar geted for decode.

**Example Usage:**

:::java
PICK_LIST.DEFAULT;


**Values:**

**DEFAULT** - Default pick list configured on device.
**DISABLED** - Disables Picklist mode. Any bar code within the field of view can be decoded.
**ENABLED** - Enables the Picklist mode so that only the bar code that is directly under the cross-hair (reticle) is decoded. This is useful when used in conjunction with the static and dynamic reticle viewfinder modes. (Scan Module Only).
**CENTERED** - Enables the Picklist mode so that only the bar code in the center of the image is decoded. This is most useful when used in conjunction with the static and dynamic reticle viewfinder modes. Note: This mode is only valid for decoder modules that supports a viewfinder. If one tries to set this for a unsupported decoder then the device would issue an error. (Camera scanner only)

###**ProfileConfig.PREAMBLE**
Controls the preamble applied to the bar code Preamble characters are part of the UPC symbol consisting of Country Code and System Character. Select the appropriate option to match the host system.

**Example Usage:**

:::java
PREAMBLE.DEFAULT;


**Values:**

**DEFAULT** - Default preamble configured on device.
**NONE** - No preamble.
**SYS_CHAR** - System character preamble.
**COUNTRY_AND_SYS_CHAR** - Both country and system code preamble.

###**ProfileConfig.SECURITY_LEVEL**
The scanner offers four levels of decode security for UPC/EAN bar codes. Select higher security levels for lower quality bar codes. There is an inverse relationship between security and decode speed, so be sure to choose only that level of security necessary for the application.

**Example Usage:**

:::java
CHECK_DIGIT_TYPE.DEFAULT;


**Values:**

**DEFAULT** - Default security level configured on device.
**LEVEL_0** - This setting allows the scanner to operate fastest, while providing sufficient security in decoding "in-spec" UPC/EAN bar codes (default).
**LEVEL_1** - As bar code quality levels diminish, certain characters become prone to misdecodes before others (i.e., 1, 2, 7, 8). If the scanner is misdecoding poorly printed bar codes, and the misdecodes are limited to these characters, select this security level.
**LEVEL_2** - If the scanner is misdecoding poorly printed bar codes, and the misdecodes are not limited to characters 1, 2, 7, and 8, select this security level.
**LEVEL_3** - If the scanner is still misdecoding, select this security level. Be advised, selecting this option is an extreme measure against misdecoding severely out of spec bar codes. Selecting this level of security can significantly impair the decoding ability of the scanner. If this level of security is necessary, try to improve the quality of the bar codes.

###**ProfileConfig.SUPPLEMENTAL_MODE**
Supplemental modes.

**Example Usage:**

:::java
SUPPLEMENTAL_MODE.DEFAULT;


**Values:**

**DEFAULT** - Default supplemental mode configured on device.
**NO** - The scanner is presented with a UPC/EAN plus supplemental symbol, the scanner decodes UPC/EAN and ignores the supplemental characters.
**ALWAYS** - The scanner only decodes UPC/EAN symbols with supplemental characters, and ignores symbols without supplementals.
**AUTO** - The scanner decodes UPC/EAN symbols with supplemental characters immediately . If the symbol does not have a supplemental, the scanner must decode the bar code the number of times set via UPC/EAN Supplemental Redundancy before transmitting its data to confirm that there is no supplemental.
**SMART** - Enables smart supplementals. In this mode the decoder returns the decoded value of the main block right away if it does not belong to one of the following supplemental types: 378, 379, 977, 978, 979, 414, 419, 434 or 439. If the bar code starts with one of the prefixes it searches the image more aggressively for a supplemental. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.
**S_378_379** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 378 or 379. Disables reading of supplementals for any other UPC/EAN bar code not starting with 378 or 379. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.
**S_978_979** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 978 or 979. Disables reading of supplementals for another UPC/EAN bar code not starting with 978 or 979. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.
**S_414_419_434_439** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 414, 419, 434 or 439. Disables reading of supplementals for another UPC/EAN bar code 4 - 16 not starting with 414, 419, 434 or 439. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.
**S_977** - Enables (auto-discriminate) supplemental for UPC/EAN codes starting with 977. Disables reading of supplementals for another UPC/EAN barcode not starting with 977. Tries to scan the supplemental if it is present. If the supplemental scanning failed, then the main bar code is returned.

###**ProfileConfig.UCC_LINK_MODE**
Describes the UCC link mode state.

**Example Usage:**

:::java
UCC_LINK_MODE.DEFAULT;


**Values:**

**DEFAULT** - Default UCC link mode configured on device.
**LINK_FLAG_IGNORED** - 1D component is transmitted regardless of whether a 2D component is detected.
**ALWAYS_LINKED** - 1D and the 2D components are transmitted. If 2D is not present, the 1D component is not transmitted.
**AUTO_DISCRIMINATE** - the digital scanner determines if there is a 2D portion, then transmits the 1D component, as well as the 2D portion if present (default). (default).

###**ProfileConfig.VERIFY_CHECK_DIGIT**
Check the integrity of all Code 11 symbols to verify that the data complies with the specified check digit algorithm. This selects the check digit mechanism for the decoded Code 11 bar code.

**Example Usage:**

:::java
VERIFY_CHECK_DIGIT.DEFAULT;


**Values:**

**DEFAULT** - Default verify check digit scheme configured on device.
**NO** - Do not verify check digit.
**ONE** - Bar code contains one check digit.
**TWO** - Bar code contains two check digits.

###**ProfileConfig.VIEWFINDER_MODE**
Configures the Viewfinder modes supported for camera scanning.

**Example Usage:**

:::java
VIEWFINDER_MODE.ENABLED;


**Values:**

**DEFAULT** - Default view finder mode configured on the device.
**DISABLED** - Viewfinder disabled. Viewfinder is not displayed during aiming or scanning.
**ENABLED** - Viewfinder enabled. Displays the images captured by the camera on the screen.
**STATIC_RECTICLE** - Viewfinder enabled with locate reticle. Displays the viewfinder as well as draws a red reticle in the center of the screen which helps with tracking the barcode.

#Class-ProfileConfig.ActivitySelection
Class for dealing with ActivitySelection of profile data <a href="#activitySelection">ProfileConfig.activitySelection<

**Example Usage:**

:::java
ActivitySelection activitySelection = profileConfig.activitySelection;


**Version:**

2.0

##Constructors
###**ProfileConfig.ActivitySelection**()

##Public Fields
###**activities**
Gets and Sets activities to the profile <a href="#activities">ProfileConfig.ActivitySelection.activities</a>.

**Example Usage:**

:::java
ActivitySelection activitySelection = profileConfig.activitySelection


**Type:**

java.util.ArrayList&lt;com.symbol.emdk.ProfileConfig.ActivitySelection.ActivityElement&gt;

#Class-ProfileConfig.ActivitySelection.ActivityElement
Gets and Sets application's package name and its activities to the profile <a href="#ProfileConfigActivitySelectionActivityElement">ProfileConfig.ActivitySelection.ActivityElement</a>.

**Example Usage:**

:::java
ArrayList&lt;ActivityElement&gt; activities = profileConfig.activitySelection.activities;


**Version:**

2.0

##Constructors

###**ProfileConfig.ActivitySelection.ActivityElement**(String packageName, java.lang.String[] activities)

**Parameters:**

* packageName
* activities

##Public Fields

###**packageName**

**Type:**

java.lang.String

#Class-ProfileConfig.DataCapture
Class for dealing with data capture profile data <a href="#ProfileConfigDataCapture">ProfileConfig.DataCapture</a>

**Example Usage:**

:::java
DataCapture dataCapture = profileConfig.dataCapture;


**Version:**

2.0

##Public Fields

###**barcode**
Gets and Sets Barcode configuration object.

**Example Usage:**

:::java
profileConfig.dataCapture.barcode.decoders.code11 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcode">ProfileConfig.DataCapture.Barcode</a>

###**dataDelivery**
Gets and Sets DataDelivery configuration object.

**Example Usage:**

:::java
profileConfig.dataCapture.dataDelivery.keystroke.ime_output_enabled = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureDataDelivery">ProfileConfig.DataCapture.DataDelivery</a>

###**msr**
Gets and Sets MSR configuration object.

**Example Usage:**

:::java
profileConfig.msr.msr_input_enabled = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureMSR">ProfileConfig.DataCapture.MSR</a>




<div class="className" id="ProfileConfigDataCaptureBarcode">
<a name="ProfileConfigDataCaptureBarcode"></a>

#Class-ProfileConfig.DataCapture.Barcode
Holds Barcode configuration settings

**Example Usage:**

:::java
Barcode barcode = profileConfig.dataCapture.barcode;


**Version:**

2.0

##Public Fields

###**decoderParams**
Gets and Sets DecoderParams configuration object <a href="#decoderParams">ProfileConfig.DataCapture.Barcode.decoderParams</a>.

**Example Usage:**

:::java
barcode.decoderParams.upca.preamble = PREAMBLE.SYS_CHAR;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParams">ProfileConfig.DataCapture.Barcode.DecoderParams</a>

###**decoders**
Gets and Sets Decoders configuration object <a href="#decoders">ProfileConfig.DataCapture.Barcode.decoders</a>.

**Example Usage:**

:::java
barcode.decoders.codabar = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoders">ProfileConfig.DataCapture.Barcode.Decoders</a>

###**readerParams**
Gets and Sets ReaderParams configuration object <a href="#readerParams">ProfileConfig.DataCapture.Barcode.readerParams</a>.

**Example Usage:**

:::java
barcode.readerParams.illumination_mode = ILLUMINATION_MODE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeReaderParams">ProfileConfig.DataCapture.Barcode.ReaderParams</a>

###**scanParams**
Gets and Sets ScanParams configuration object <a href="#scanParams">ProfileConfig.DataCapture.Barcode.scanParams</a>.

**Example Usage:**

:::java
barcode.ScanParams.decode_haptic_feedback = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeScanParams">ProfileConfig.DataCapture.Barcode.ScanParams</a>

###**scannerSelection**
Gets and Sets scanner selection <a href="#ProfileConfigDEVICETYPES">ProfileConfig.DEVICETYPES</a>.

**Example Usage:**

:::java
barcode.scannerSelection = DEVICETYPES.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDEVICETYPES">ProfileConfig.DEVICETYPES</a>

###**scanner_input_enabled**
Gets and Sets scanner enabled state <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
barcode.scanner_input_enabled = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**upcEanParams**
Gets and Sets UpcEanParams configuration object <a href="#upcEanParams">ProfileConfig.DataCapture.Barcode.upcEanParams</a>.

**Example Usage:**

:::java
barcode.upcEanParams.linear_decode = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeUpcEanParams">ProfileConfig.DataCapture.Barcode.UpcEanParams</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams
Holds Decoder configuration settings.

**Example Usage:**

:::java
DecoderParams decoderParams = profileConfig.dataCapture.barcode.decoderParams;


**Version:**

2.0

##Public Fields

###**codabar**
Configures the Codabar Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCodabar">ProfileConfig.DataCapture.Barcode.DecoderParams.Codabar</a>.

**Example Usage:**

:::java
decoderParams.codabar.clsi_editing = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCodabar">ProfileConfig.DataCapture.Barcode.DecoderParams.Codabar</a>

###**code11**
Configures the Code11 Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCode11">ProfileConfig.DataCapture.Barcode.DecoderParams.Code11</a>.

**Example Usage:**

:::java
decoderParams.code11.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCode11">ProfileConfig.DataCapture.Barcode.DecoderParams.Code11</a>

###**code128**
Configures the Code128 Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCode128">ProfileConfig.DataCapture.Barcode.DecoderParams.Code128</a>.

**Example Usage:**

:::java
decoderParams.code128.enable_ean128 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCode128">ProfileConfig.DataCapture.Barcode.DecoderParams.Code128</a>

###**code39**
Configures the Code39 Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCode39">ProfileConfig.DataCapture.Barcode.DecoderParams.Code39</a>.


**Example Usage:**

:::java
decoderParams.code39.full_ascii = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCode39">ProfileConfig.DataCapture.Barcode.DecoderParams.Code39</a>

###**code93**
Configures the Code93 Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCode93">ProfileConfig.DataCapture.Barcode.DecoderParams.Code93</a>.

**Example Usage:**

:::java
decoderParams.code93.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCode93">ProfileConfig.DataCapture.Barcode.DecoderParams.Code93</a>

###**composite_AB**
Configures the Composite AB Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCompositeAB">ProfileConfig.DataCapture.Barcode.DecoderParams.Composite_AB</a>.

**Example Usage:**

:::java
decoderParams.composite_AB.ucc_link_mode = UCC_LINK_MODE.ALWAYS_LINKED;



**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsCompositeAB">ProfileConfig.DataCapture.Barcode.DecoderParams.Composite_AB</a>

###**discrete_2of5**
Configures the Discrete_2of5 Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsDiscrete2of5">ProfileConfig.DataCapture.Barcode.DecoderParams.Discrete_2of5</a>.

**Example Usage:**

:::java
decoderParams.discrete_2of5.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsDiscrete2of5">ProfileConfig.DataCapture.Barcode.DecoderParams.Discrete_2of5</a>

###**interleaved_2of5**
Configures the Interleaved 2of5 Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsInterleaved2of5">ProfileConfig.DataCapture.Barcode.DecoderParams.Interleaved_2of5</a>.

**Example Usage:**

:::java
decoderParams.interleaved_2of5.check_digit = CHECK_DIGIT_TYPE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsInterleaved2of5">ProfileConfig.DataCapture.Barcode.DecoderParams.Interleaved_2of5</a>

###**matrix_2of5**
Configures the Matrix 2of5 Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsMatrix2of5">ProfileConfig.DataCapture.Barcode.DecoderParams.Matrix_2of5</a>.

**Example Usage:**

:::java
decoderParams.matrix_2of5.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsMatrix2of5">ProfileConfig.DataCapture.Barcode.DecoderParams.Matrix_2of5</a>

###**msi**
Configures the MSI Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsMSI">ProfileConfig.DataCapture.Barcode.DecoderParams.MSI</a>.

**Example Usage:**

:::java
decoderParams.msi.check_digit = CHECK_DIGIT.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsMSI">ProfileConfig.DataCapture.Barcode.DecoderParams.MSI</a>

###**uk_Postal**
Configures the UK_Postal Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsUKPostal">ProfileConfig.DataCapture.Barcode.DecoderParams.UK_Postal</a>.

**Example Usage:**

:::java
decoderParams.uk_Postal.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsUKPostal">ProfileConfig.DataCapture.Barcode.DecoderParams.UK_Postal</a>

###**upca**
Configures the UPCA Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsUPCA">ProfileConfig.DataCapture.Barcode.DecoderParams.UPCA</a>.

**Example Usage:**

:::java
decoderParams.upca.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsUPCA">ProfileConfig.DataCapture.Barcode.DecoderParams.UPCA</a>

###**upce0**
Configures the UPCE0 Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsUPCE0">ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE0</a>.

**Example Usage:**

:::java
decoderParams.upce0.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsUPCE0">ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE0</a>

###**upce1**
Configures the UPCE1 Symbology object <a href="#ProfileConfigDataCaptureBarcodeDecoderParamsUPCE1">ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE1</a>.

**Example Usage:**

:::java
decoderParams.upce1.convert_to_upca = ENABLED_STATE.DEFAULT;



**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureBarcodeDecoderParamsUPCE1">ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE1</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.Codabar
Holds Codabar configuration settings.

**Example Usage:**

:::java
Codabar codabar = profileConfig.dataCapture.barcode.decoderParams.codabar;


**Version:**

2.0

##Public Fields

###**clsi_editing**
Enable this parameter to strip the start and stop characters and insert a space after the first, fifth, and tenth characters of a 14-character Codabar symbol. Enable this feature if the host system requires this data format (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
codabar.clsi_editing = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**length1**
Use to set decode lengths (default - 6).

**Example Usage:**

:::java
int length1 = codabar.length1;


**Type:**

int

###**length2**
Use to set decode lengths (default - 55).

**Example Usage:**

:::java
int length2 = codabar.length2;


**Type:**

int

###**notis_editing**
Enable this parameter to strip the start and stop characters from a decoded Codabar symbol. Enable this feature if the host system requires this data format (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
codabar.notis_editing = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**redundancy**
Sets the reader to read the bar code twice before accepting data (default - enabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
codabar.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.Code11
Holds Code 11 configuration settings.

**Example Usage:**

:::java
Code11 code11 = profileConfig.dataCapture.barcode.decoderParams.code11;


**Version:**

2.0

##Public Fields

###**length1**
Use to set decode lengths (default - 4).

**Example Usage:**

:::java
int length1 = code11.length1;


**Type:**

int

###**length2**
Use to set decode lengths (default - 55).

**Example Usage:**

:::java
int length2 = code11.length2;


**Type:**

int

###**redundancy**
Sets the reader to read the bar code twice before accepting data (default - enabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code11.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**report_check_digit**
Transmit Code 11 data with or without the check digit (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code11.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**verify_check_digit**
Check the integrity of all Code 11 symbols to verify that the data complies with the specified check digit algorithm. This selects the check digit mechanism for the decoded Code 11 bar code. Use enum <a href="#ProfileConfigVERIFYCHECKDIGIT">ProfileConfig.VERIFY_CHECK_DIGIT</a>.

**Example Usage:**

:::java
code11.verify_check_digit = VERIFY_CHECK_DIGIT.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigVERIFYCHECKDIGIT">ProfileConfig.VERIFY_CHECK_DIGIT</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.Code128
Holds Code128 configuration settings.

**Example Usage:**

:::java
Code128 code128 = profileConfig.dataCapture.barcode.decoderParams.code128;


**Version:**

2.0

##Public Fields

###**check_isbt_table**
The ISBT specification includes a table that lists several types of ISBT bar codes that are commonly used in pairs. If ISBT128 Concat Mode is set, enable Check ISBT T able to concatenate only those pairs found in this table. Other types of ISBT codes are not concatenated (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code128.check_isbt_table = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**enable_ean128**
Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code128.enable_ean128 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**enable_plain**
Flag to enable other 128 sub types (besides GS1-128 and ISBT -128). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code128.enable_plain = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**isbt128_concat_mode**
Select an option for concatenating pairs of ISBT code types. Use enum <a href="#ProfileConfigISBT128CONTACTMODE">ProfileConfig.ISBT128_CONTACT_MODE</a>.

**Example Usage:**

:::java
code128.isbt128_concat_mode = ISBT128_CONTACT_MODE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigISBT128CONTACTMODE">ProfileConfig.ISBT128_CONTACT_MODE</a>

###**length1**
Use to set decode lengths (default - 0).

**Example Usage:**

:::java
int length1 = code128.length1;



**Type:**

int


###**length2**
Use to set decode lengths (default - 55).

**Example Usage:**

:::java
int length2 = code128.length2;


**Type:**

int

###**redundancy**
Sets the reader to read the bar code twice before accepting data (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code128.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**security_level**
The scanner of fers four levels of decode security for Code 128 bar codes. Select increasing levels of security for decreasing levels of bar code quality. There is an inverse relationship between security and scanner aggressiveness, so choose only that level of security necessary for any given application. Use enum <a href="#ProfileConfigSECURITYLEVEL">ProfileConfig.SECURITY_LEVEL</a>.

**Example Usage:**

:::java
code128.security_level = SECURITY_LEVEL.DEFAULT;




**Type:**

com.symbol.emdk.<a href="#ProfileConfigSECURITYLEVEL">ProfileConfig.SECURITY_LEVEL</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.Code39
Holds Code39 configuration settings.

**Example Usage:**

:::java
Code39 code39 = profileConfig.dataCapture.barcode.decoderParams.code39;


**Version:**

2.0

##Public Fields
###**convert_to_code32**
Code 32 is a variant of Code 39 used by the Italian pharmaceutical industry (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code39.convert_to_code32 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**full_ascii**
Code 39 Full ASCII is a variant of Code 39 that pairs characters to encode the full ASCII character set (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code39.full_ascii = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**length1**
Use to set decode lengths (default - 0).

**Example Usage:**

:::java
int length1 = code39.length1;


**Type:**

int

###**length2**
Use to set decode lengths 4 (default - 55).

**Example Usage:**

:::java
int length2 = code39.length2;




**Type:**

int

###**redundancy**
Sets the reader to read the bar code twice before accepting data (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code39.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**report_check_digit**
Transmit Code 39 data with or without the check digit (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code39.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**report_code32_prefix**
Scan the appropriate bar code to enable or disable adding the prefix character "A" to all Code 32 bar codes (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code39.report_code32_prefix = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**security_level**
Options: Security level 0 , Security Level 1 , Security Level 2 and Security Level 3 (default - Security level 1). Use enum <a href="#ProfileConfigSECURITYLEVEL">ProfileConfig.SECURITY_LEVEL</a>.

**Example Usage:**

:::java
code39.security_level = SECURITY_LEVEL.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigSECURITYLEVEL">ProfileConfig.SECURITY_LEVEL</a>

###**verify_check_digit**
Enable this feature to check the integrity of all Code 39 symbols to verify that the data complies with a specified check digit algorithm. The digital scanner decodes only those Code 39 symbols that include a modulo 43 check digit. Enable this feature only if the Code 39 symbols contain a modulo 43 check digit (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code39.verify_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.Code93
Holds Code93 configuration settings.

**Example Usage:**

:::java
Code93 code93 = profileConfig.dataCapture.barcode.decoderParams.code93;


**Version:**

2.0

##Public Fields

###**length1**
Use to set decode lengths (default - 0).

**Example Usage:**

:::java
int length1 = code93.length1;


**Type:**

int

###**length2**
Use to set decode lengths (default - 55).

**Example Usage:**

:::java
int length2 = code93.length2;


**Type:**

int

###**redundancy**
Sets the reader to read the bar code twice before accepting data (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
code93.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.Composite_AB
Holds Composite AB configuration settings.

**Example Usage:**

:::java
Composite_AB compositeAB = profileConfig.dataCapture.barcode.decoderParams.composite_AB;


**Version:**

2.0

##Public Fields

###**ucc_link_mode**
Gets and Sets UCC Link Mode using <a href="#ProfileConfigUCCLINKMODE">ProfileConfig.UCC_LINK_MODE</a> enum;

**Example Usage:**

:::java
compositeAB.ucc_link_mode = UCC_LINK_MODE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigUCCLINKMODE">ProfileConfig.UCC_LINK_MODE</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.Discrete_2of5
Holds Discrete 2 of 5 configuration settings.

**Example Usage:**

:::java
Discrete_2of5 discrete_2of5 = profileConfig.dataCapture.barcode.decoderParams.discrete_2of5;


**Version:**

2.0

##Public Fields

###**length1**
Used to set decode lengths (default - 0).

**Example Usage:**

:::java
int length1 = discrete_2of5.length1;


**Type:**

int

###**length2**
Used to set decode lengths (default - 14).

**Example Usage:**

:::java
int length2 = discrete_2of5.length2;


**Type:**

int

###**redundancy**
Sets the reader to read the bar code twice before accepting data (default - enabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
discrete_2of5.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.Interleaved_2of5
Holds Interleaved 2 of 5 configuration settings.

**Example Usage:**

:::java
Interleaved_2of5 interleaved2of5 = profileConfig.dataCapture.barcode.decoderParams.interleaved_2of5;


**Version:**

2.0

##Public Fields

###**check_digit**
The check digit type to verify. Use enum <a href="#ProfileConfigCHECKDIGITTYPE">ProfileConfig.CHECK_DIGIT_TYPE</a>.

**Example Usage:**

:::java
interleaved2of5.check_digit = CHECK_DIGIT_TYPE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigCHECKDIGITTYPE">ProfileConfig.CHECK_DIGIT_TYPE</a>

###**convert_itf14_to_ean13**
Convert 14-character Interleaved 2 of 5 bar codes to EAN-13, and transmit as EAN-13. The Interleaved 2 of 5 bar code must be enabled and must have a leading zero and a valid EAN-13 check digit (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
interleaved2of5.convert_itf14_to_ean13 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**length1**
Use to set decode lengths (default - 14).

**Example Usage:**

:::java
int length1 = interleaved2of5.length1;


**Type:**

int

###**length2**
Use to set decode lengths (default - 10).

**Example Usage:**

:::java
int length2 = interleaved2of5.length2;


**Type:**

int

###**redundancy**
Sets the reader to read the bar code twice before accepting data (default - enabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
interleaved2of5.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**report_check_digit**
Transmit Interleaved 2 of 5 data with or without the check digit (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
interleaved2of5.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**security_level**
Specifies security level Use enum <a href="#ProfileConfigSECURITYLEVEL">ProfileConfig.SECURITY_LEVEL</a>.

**Example Usage:**

:::java
interleaved2of5.security_level = SECURITY_LEVEL.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigSECURITYLEVEL">ProfileConfig.SECURITY_LEVEL</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.MSI
Holds Codabar configuration settings.

**Example Usage:**

:::java
MSI msi = profileConfig.dataCapture.barcode.decoderParams.msi;


**Version:**

2.0

##Public Fields

###**check_digit**
With MSI symbols, one check digit is mandatory and always verified by the reader. The second check digit is optional. Use enum <a href="#ProfileConfigCHECKDIGIT">ProfileConfig.CHECK_DIGIT</a>.

**Example Usage:**

:::java
msi.check_digit = CHECK_DIGIT.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigCHECKDIGIT">ProfileConfig.CHECK_DIGIT</a>

###**check_digit_scheme**
Two algorithms are possible for the verification of the second MSI check digit. Select the algorithm used to encode the check digit. Use enum <a href="#ProfileConfigCHECKDIGITSCHEME">ProfileConfig.CHECK_DIGIT_SCHEME</a>.

**Example Usage:**

:::java
msi.check_digit_scheme = CHECK_DIGIT_SCHEME.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigCHECKDIGITSCHEME">ProfileConfig.CHECK_DIGIT_SCHEME</a>

###**length1**
Use to set decode lengths (default - 4).

**Example Usage:**

:::java
int length1 = msi.length1;


**Type:**

int

###**length2**
Use to set decode lengths (default - 55).

**Example Usage:**

:::java
int length2 = msi.length2


**Type:**

int

###**redundancy**
Sets the reader to read the bar code twice before accepting data (default - enabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
msi.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**report_check_digit**
Transmit MSI data with or without the check digit (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
msi.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.Matrix_2of5
Holds Matrix 2 of 5 configuration settings.

**Example Usage:**

:::java
Matrix_2of5 matrix2of5 = profileConfig.dataCapture.barcode.decoderParams.matrix_2of5;


**Version:**

2.0

##Public Fields

###**length1**
Used to set decode lengths (default - 10).

**Example Usage:**

:::java
int length1 = matrix2of5.length1;


**Type:**

int

###**length2**
Used to set decode lengths (default - 0).

**Example Usage:**

:::java
int length2 = matrix2of5.length2;


**Type:**

int

###**redundancy**
Sets the reader to read the bar code twice before accepting data (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
matrix2of5.redundancy = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**report_check_digit**
Transmit Matrix 2 of 5 data with or without the check digit(default - enabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
matrix2of5.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**verify_check_digit**
Enable this feature to check the integrity of all Matrix 2 of 5 symbols to verify that the data complies with a specified check digit algorithm (default - enabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
matrix2of5.verify_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.UK_Postal
Holds UK Postal configuration settings.

**Example Usage:**

:::java
UK_Postal ukPostal = profileConfig.dataCapture.barcode.decoderParams.uk_Postal;


**Version:**

2.0

##Public Fields

###**report_check_digit**
Transmit UK Postal data with or without the check digit (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
ukPostal.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.UPCA
Holds UPCA configuration settings.

**Example Usage:**

:::java
UPCA upca = profileConfig.dataCapture.barcode.decoderParams.upca;


**Version:**

2.0

##Public Fields

###**preamble**
Preamble characters are part of the UPC symbol consisting of Country Code and System Character. Select the appropriate option to match the host system. Use enum <a href="#ProfileConfigPREAMBLE">ProfileConfig.PREAMBLE</a>.

**Example Usage:**

:::java
upca.preamble = PREAMBLE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigPREAMBLE">ProfileConfig.PREAMBLE</a>

###**report_check_digit**
The check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option (default - enabled) . Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
upca.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE0
Holds UPCE0 configuration settings.

**Example Usage:**

:::java
UPCE0 upce0 = profileConfig.dataCapture.barcode.decoderParams.upce0;


**Version:**

2.0

##Public Fields

###**convert_to_upca**
Enable to convert UPCE0 (zero suppressed) decoded data to UPC-A format before transmission. After conversion, the data follows UPC-A format and is af fected by UPC-A programming selections. Disable to transmit UPCE0 decoded data as UPCE0 data, without conversion (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
upce0.convert_to_upca = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**preamble**
Preamble characters are part of the UPC symbol consisting of Country Code and System Character. Select the appropriate option to match the host system. Use enum <a href="#ProfileConfigPREAMBLE">ProfileConfig.PREAMBLE</a>.

**Example Usage:**

:::java
upce0.preamble = PREAMBLE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigPREAMBLE">ProfileConfig.PREAMBLE</a>

###**report_check_digit**
The check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
upce0.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.DecoderParams.UPCE1
Holds UPCE1 configuration settings.

**Example Usage:**

:::java
UPCE1 upce1 = profileConfig.dataCapture.barcode.decoderParams.upce1;


**Version:**

2.0

##Public Fields

###**convert_to_upca**
Enable this to convert UPCE1 decoded data to UPC-A format before transmission. After conversion, the data follows UPC-A format and is af fected by UPC-A programming selections. Disable this to transmit UPCE1 decoded data as UPCE1 data, without conversion (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
upce1.convert_to_upca = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**preamble**
Preamble characters are part of the UPC symbol consisting of Country Code and System Character. Select the appropriate option to match the host system. Use enum <a href="#ProfileConfigPREAMBLE">ProfileConfig.PREAMBLE</a>.

**Example Usage:**
:::java
upce1.preamble = PREAMBLE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigPREAMBLE">ProfileConfig.PREAMBLE</a>

###**report_check_digit**
The check digit is the last character of the symbol used to verify the integrity of the data. Enables or disables this option (default - disabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
upce1.report_check_digit = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.Decoders
The Decoders class provides access to enable or disable decoder barcode symbologies.

**Example Usage:**

:::java
Decoders decoders = barcode.decoders;

decoders.upca = ENABLED_STATE.TRUE;


**Version:**

2.0

##Public Fields

###**australian_postal**
Sets the Enabled State of Decoder Australian Postal. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.australian_postal = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**aztec**
Sets the Enabled State of Decoder Aztec. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.aztec = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**canadian_postal**
Sets the Enabled State of Decoder Canadian Postal. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.canadian_postal = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**chinese_2of5**
Sets the Enabled State of Decoder Chinese 2 of 5. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.chinese_2of5 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**codabar**
Sets the Enabled State of Decoder Codabar. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.codabar = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**code11**
Sets the Enabled State of Decoder Code11. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.code11 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**code128**
Sets the Enabled State of Decoder Code 128. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.code128 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**code39**
Sets the Enabled State of Decoder Code 39. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.code39 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**code93**
Sets the Enabled State of Decoder Code 93. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.code93 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**composite_ab**
Sets the Enabled State of Decoder Composite AB. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.composite_ab = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**composite_c**
Sets the Enabled State of Decoder Composite C. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.composite_c = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**d2of5**
Sets the Enabled State of Decoder Discrete 2 of 5. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.d2of5 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**datamatrix**
Sets the Enabled State of Decoder Data Matrix. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.datamatrix = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**dutch_postal**
Sets the Enabled State of Decoder Dutch Postal. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.dutch_postal = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**ean13**
Sets the Enabled State of Decoder EAN-13. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**

:::java
decoders.ean13 = ENABLED_STATE.DEFAULT;


**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**ean8**
Sets the Enabled State of Decoder EAN-8. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.ean8 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**gs1_databar**
Sets the Enabled State of Decoder Interleaved 2 of 5. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.gs1_databar = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**gs1_databar_exp**
Sets the Enabled State of Decoder GS1 DataBar Expanded. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.gs1_databar_exp = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**gs1_databar_lim**
Sets the Enabled State of Decoder GS1 DataBar Limited. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.gs1_databar_lim = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**i2of5**
Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.i2of5 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**japanese_postal**
Sets the Enabled State of Decoder Japan Postal. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.japanese_postal = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**korean_3of5**
Sets the Enabled State of Decoder Korean 3 of 5. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.korean_3of5 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**matrix_2of5**
Sets the Enabled State of Decoder Matrix 2 of 5. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.matrix_2of5 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**maxicode**
Sets the Enabled State of Decoder Maxicode. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.maxicode = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**micropdf**
Sets the Enabled State of Decoder Micro PDF. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.micropdf = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**microqr**
Sets the Enabled State of Decoder Micro QR. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.microqr = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**msi**
Sets the Enabled State of Decoder MSI. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.msi = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**pdf417**
Sets the Enabled State of Decoder PDF417. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.pdf417 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**qrcode**
Sets the Enabled State of Decoder QR Code. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.qrcode = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**signature**
Sets the Enabled State of Decoder Signature. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.signature = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**tlc39**
Sets the Enabled State of Decoder TLC 39. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.tlc39 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**trioptic39**
Sets the Enabled State of Decoder Trioptic 39. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.trioptic39 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**uk_postal**
Sets the Enabled State of Decoder UK Postal. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.uk_postal = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**upca**
Sets the Enabled State of Decoder UPCA. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.upca = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**upce0**
Sets the Enabled State of Decoder UPCE0. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.upce0 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**upce1**
Sets the Enabled State of Decoder UPCE1. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.upce1 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**us4state**
Sets the Enabled State of Decoder US4State. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.us4state = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**us4state_fics**
Sets the Enabled State of Decoder US4State FICS. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.us4state_fics = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**usplanet**
Sets the Enabled State of Decoder US Planet. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.usplanet = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**uspostnet**
Sets the Enabled State of Decoder US Postnet. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.uspostnet = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**webcode**
Sets the Enabled State of Decoder Web Code. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
decoders.webcode = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.Barcode.ReaderParams
Holds reader configuration settings.

**Example Usage:**
:::java
ReaderParams readerParams = profileConfig.dataCapture.barcode.readerParams;

**Version:**

2.0

##Public Fields

###**beam_timer**
Sets the maximum amount of time that the reader remains on (0 - 60,000 ms in increments of 100 ms). A value of 0 sets the reader to stay on indefinitely (default -15000).

**Example Usage:**
:::java
int timer = readerParams.beam_timer;

**Type:**

int

###**illumination_mode**
Turns camera illumination on and off. This option is only available when camera is selected in the Barcode input Scanner selection option. Use enum <a href="#ProfileConfigILLUMINATIONMODE">ProfileConfig.ILLUMINATION_MODE</a>.

**Example Usage:**
:::java
readerParams.illumination_mode = ILLUMINATION_MODE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigILLUMINATIONMODE">ProfileConfig.ILLUMINATION_MODE</a>

###**inverse_1d_mode**
This parameter allows the user to select decoding on inverse 1D bar codes. Use enum <a href="#ProfileConfigINVERSE1DMODE">ProfileConfig.INVERSE_1D_MODE</a>.

**Example Usage:**
:::java
readerParams.inverse_1d_mode = INVERSE_1D_MODE.AUTO;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigINVERSE1DMODE">ProfileConfig.INVERSE_1D_MODE</a>

###**lcd_mode**
Enables or disables LCD mode. LCD mode enhances the ability of the imager to read bar codes from LCD displays such as cellphones (imager only). Use enum <a href="#ProfileConfigLCDMODE">ProfileConfig.LCD_MODE</a>.

**Example Usage:**
:::java
readerParams.lcd_mode = LCD_MODE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigLCDMODE">ProfileConfig.LCD_MODE</a>

###**linear_security_level**
Sets the number of times a bar code is read to confirm an accurate decode. Use enum <a href="#ProfileConfigLINEARSECURITYLEVEL">ProfileConfig.LINEAR_SECURITY_LEVEL</a>.

**Example Usage:**
:::java
readerParams.linear_security_level = LINEAR_SECURITY_LEVEL.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigLINEARSECURITYLEVEL">ProfileConfig.LINEAR_SECURITY_LEVEL</a>

###**low_power_timeout**
Time in milliseconds of non-use before dropping to a low-power mode.

**Example Usage:**
:::java
int timeout = readerParams.low_power_timeout;

**Type:**

int

###**picklist**
Allows the imager to decode only the bar code that is directly under the cross-hair/reticle (+) part of the pattern. This feature is useful in applications where multiple bar codes may appear in the field of view during a decode session and only one of them is targeted for decode. Use enum <a href="#ProfileConfigPICKLIST">ProfileConfig.PICK_LIST</a>.

**Example Usage:**
:::java
readerParams.picklist = PICK_LIST.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigPICKLIST">ProfileConfig.PICK_LIST</a>

###**viewfinder_mode**
Configures the Viewfinder modes supported for camera scanning. Use enum <a href="#ProfileConfigVIEWFINDERMODE">ProfileConfig.VIEWFINDER_MODE</a>.

**Example Usage:**
:::java
readerParams.viewfinder_mode = VIEWFINDER_MODE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigVIEWFINDERMODE">ProfileConfig.VIEWFINDER_MODE</a>

#Class-ProfileConfig.DataCapture.Barcode.ScanParams
Holds scanning configuration settings.

**Example Usage:**
:::java
ScanParams scanParams = profileConfig.dataCapture.barcode.scanParams;

**Version:**

2.0

##Public Fields

###**code_id_type**
A Code ID character identifies the code type of a scanned bar code. This is useful when the reader is decoding more than one code type. Select a code ID character to insert between the prefix and the decoded symbol. Use enum <a href="#ProfileConfigCODEIDTYPE">ProfileConfig.CODE_ID_TYPE</a>.

**Example Usage:**
:::java
scanParams.code_id_type = CODE_ID_TYPE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigCODEIDTYPE">ProfileConfig.CODE_ID_TYPE</a>

###**datacapture_led_id**
Data Capture LED ID

**Example Usage:**
:::java
int led = scanParams.datacapture_led_id;

**Type:**

int

###**decode_audio_feedback_uri**
Select an audio tone to sound upon a good decode.

**Example Usage:**
:::java
String audioFeedback = scanParams.decode_audio_feedback_uri;

**Type:**

java.lang.String

###**decode_haptic_feedback**
Enable the device to vibrate upon a good decode (default - enabled). Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
scanParams.decode_haptic_feedback = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**good_decode_led_timer**
Time for which Good Decode LED Notification Runs in milliseconds.

**Example Usage:**
:::java
int ledTimer = scanParams.good_decode_led_timer;

**Type:**

int

#Class-ProfileConfig.DataCapture.Barcode.UpcEanParams
Holds Upc Ean Params configuration settings.

**Example Usage:**
:::java
UpcEanParams upcEanParams = profileConfig.dataCapture.barcode.upcEanParams;

**Version:**

2.0

##Public Fields

###**bookland**
Flag to enable Bookland code decoding. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
upcEanParams.bookland = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**bookland_format**
Specifies the bookland format to use. Use enum <a href="#ProfileConfigBOOKLANDFORMAT">ProfileConfig.BOOKLAND_FORMAT</a>.

**Example Usage:**
:::java
upcEanParams.bookland_format = BOOKLAND_FORMAT.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigBOOKLANDFORMAT">ProfileConfig.BOOKLAND_FORMAT</a>

###**coupon**
Enables Coupon code decoding. Note that in order to successfully decode Coupon codes, all of the correct decoders must be enabled. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
upcEanParams.coupon = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**coupon_report**
Used to differentiate between old coupon (UPC/EAN and Code128) and new GS1 DataBar Coupons. NOTE: There is an Interim GS1 DataBar Coupon (UPC A and the GS1 DataBar), which is meant for smooth transition of adaption from old coupon format to new coupon format. If an interim coupon is presented to the scanner, it will read old or new portion of it, depending on the report mode setting. Use enum <a href="#ProfileConfigCOUPONREPORT">ProfileConfig.COUPON_REPORT</a>.

**Example Usage:**
:::java
upcEanParams.coupon_report = COUPON_REPORT.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigCOUPONREPORT">ProfileConfig.COUPON_REPORT</a>

###**databar_to_upc_ean**
If this is set it converts DataBar bar codes to UPC/EAN format. For this setting to work UPC/EAN symbologies must be enabled. A check in the checkbox indicates that the option is enabled. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
upcEanParams.databar_to_upc_ean = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**linear_decode**
Flag to enable linear decode. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
upcEanParams.linear_decode = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**random_weight_check_digit**
Flag to enable random weight check digit verification. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
upcEanParams.random_weight_check_digit = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**retry_count**
Retry count for auto-discriminating for supplementals. Possible values are 2 to 20 inclusive. Note that this flag is only considered if Supplemental Mode - UPC EAN is set to one of the following values: Supplementals Auto, Supplementals Smart, Supplementals 378-379 , Supplementals 978-979, Supplementals 977 or Supplementals 414-419-434-439 (2 to 20, default 10).

**Example Usage:**
:::java
int retry = upcEanParams.retry_count;

**Type:**

int

###**security_level**
The scanner of fers four levels of decode security for UPC/EAN bar codes. Select higher security levels for lower quality bar codes. There is an inverse relationship between security and decode speed, so be sure to choose only that level of security necessary for the application. Use enum <a href="#ProfileConfigSECURITYLEVEL">ProfileConfig.SECURITY_LEVEL</a>.

**Example Usage:**
:::java
upcEanParams.security_level = SECURITY_LEVEL.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigSECURITYLEVEL">ProfileConfig.SECURITY_LEVEL</a>

###**supplemental2**
Flag to enable length 2 supplementals. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
upcEanParams.supplemental2 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**supplemental5**
Flag to enable length 5 supplementals. Use enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
upcEanParams.supplemental5 = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**supplemental_mode**
The supplemental mode. Use enum <a href="#ProfileConfigSUPPLEMENTALMODE">ProfileConfig.SUPPLEMENTAL_MODE</a>.

**Example Usage:**
:::java
upcEanParams.supplemental_mode = SUPPLEMENTAL_MODE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigSUPPLEMENTALMODE">ProfileConfig.SUPPLEMENTAL_MODE</a>

#Class-ProfileConfig.DataCapture.DataDelivery
Class for dealing with DataDelivery profile data <a href="#ProfileConfigDataCaptureDataDelivery">ProfileConfig.DataCapture.DataDelivery</a>

**Example Usage:**
:::java
DataDelivery dataDelivery = profileConfig.dataCapture.dataDelivery;

**Version:**

2.0

##Public Fields

###**intent**
Gets and Sets Intent configuration object <a href="#ProfileConfigDataCaptureDataDeliveryIntent">ProfileConfig.DataCapture.DataDelivery.Intent</a>.

**Example Usage:**
:::java
profileConfig.dataCapture.dataDelivery.intent.output_enabled = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureDataDeliveryIntent">ProfileConfig.DataCapture.DataDelivery.Intent</a>

###**keystroke**
Gets and Sets Keystroke configuration object <a href="#ProfileConfigDataCaptureDataDeliveryKeystroke">ProfileConfig.DataCapture.DataDelivery.Keystroke</a>.

**Example Usage:**
:::java
profileConfig.dataCapture.dataDelivery.keystroke.ime_output_enabled = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureDataDeliveryKeystroke">ProfileConfig.DataCapture.DataDelivery.Keystroke</a>

#Class-ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting
Holds Basic Data Formatting configuration settings.

**Example Usage:**
:::java
BasicDataFormatting basicDataFormatting = profileConfig.dataCapture.dataDelivery.intent.basicDataFormatting;

**Version:**

2.0

##Public Fields

###**bdf_enabled**
Enables or disables Basic Data Formatting (default - enabled). Uses the <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a> enum.

**Example Usage:**
:::java
basicDataFormatting.bdf_enabled = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**bdf_prefix**
Add characters to the beginning of the data when sent.

**Example Usage:**
:::java
String prefix = basicDataFormatting.bdf_prefix;

**Type:**

java.lang.String

###**bdf_send_data**
Set to transfer the captured data to the foreground application. Disabling this option prevents the actual data from being transmitted. However, the prefix and suf fix strings, if present, are still transmitted even when this option is disabled (default - enabled). Uses the <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a> enum.

**Example Usage:**
:::java
basicDataFormatting.bdf_send_data = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**bdf_send_enter**
Set to append an Enter character to the end of the processed data(default - disabled). Uses the <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a> enum.

**Example Usage:**
:::java
basicDataFormatting.bdf_send_enter = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**bdf_send_hex**
Set to send the data in hexadecimal format(default - disabled). Uses the <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a> enum.

**Example Usage:**
:::java
basicDataFormatting.bdf_send_hex = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**bdf_send_tab**
Set to append a tab character to the end of the processed data(default - disabled). Uses the <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a> enum.

**Example Usage:**
:::java
basicDataFormatting.bdf_send_tab = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**bdf_suffix**
Add characters to the end of the data when sent.

**Example Usage:**
:::java
String suffix = basicDataFormatting.bdf_suffix;

**Type:**

java.lang.String

#Class-ProfileConfig.DataCapture.DataDelivery.Intent
Holds Intent configuration settings.

**Example Usage:**
:::java
Intent intent = profileConfig.Intent;

**Version:**

2.0

##Public Fields

###**action**
Gets and Sets the intent action.

**Example Usage:**
:::java
String action = intent.action;

**Type:**

java.lang.String

###**basicDataFormatting**
Gets and Sets intent INTENT_DELIVERY configuration object <a href="#ProfileConfigDataCaptureDataDeliveryBasicDataFormatting">ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting</a>.

**Example Usage:**
:::java
intent.BasicDataFormatting.bdf_enabled = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureDataDeliveryBasicDataFormatting">ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting</a>

###**category**
Gets and Sets the intent category.

**Example Usage:**
:::java
String category = intent.category;

**Type:**

java.lang.String

###**delivery**
Gets and Sets intent INTENT_DELIVERY configuration enum <a href="#ProfileConfigINTENTDELIVERY">ProfileConfig.INTENT_DELIVERY</a>.

**Example Usage:**
:::java
intent.delivery = INTENT_DELIVERY.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigINTENTDELIVERY">ProfileConfig.INTENT_DELIVERY</a>

###**output_enabled**
Gets and Sets intent ENABLED_STATE configuration enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
intent.output_enabled = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileConfig.DataCapture.DataDelivery.Keystroke
Holds Keystroke configuration settings.

**Example Usage:**
:::java
Keystroke keystroke = profileConfig.dataCapture.dataDelivery.keystroke;

**Version:**

2.0

##Public Fields


###**basicDataFormatting**
Gets and Sets keystroke basic data formatting configuration object <a href="#ProfileConfigDataCaptureDataDeliveryBasicDataFormatting">ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting</a>.

**Example Usage:**
:::java
keystroke.BasicDataFormatting.bdf_enabled = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigDataCaptureDataDeliveryBasicDataFormatting">ProfileConfig.DataCapture.DataDelivery.BasicDataFormatting</a>

###**ime_output_enabled**
Gets and Sets keystroke ENABLED_STATE configuration enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
keystroke.ime_output_enabled = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

###**keystroke_action_char**
Gets and Sets keystroke ACTION_KEY_CHAR configuration enum <a href="#ProfileConfigACTIONKEYCHAR">ProfileConfig.ACTION_KEY_CHAR</a>.

**Example Usage:**
:::java
keystroke.keystroke_action_char = ACTION_KEY_CHAR.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigACTIONKEYCHAR">ProfileConfig.ACTION_KEY_CHAR</a>

#Class-ProfileConfig.DataCapture.MSR
Holds MSR configuration settings

**Example Usage:**
:::java
MSR msr = profileConfig.dataCapture.msr;

**Version:**

2.0

##Constructors

###**ProfileConfig.DataCapture.MSR**()

##Public Fields

###**msr_input_enabled**
Gets and Sets MSR enabled configuration enum <a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>.

**Example Usage:**
:::java
msr.msr_input_enabled = ENABLED_STATE.DEFAULT;

**Type:**

com.symbol.emdk.<a href="#ProfileConfigENABLEDSTATE">ProfileConfig.ENABLED_STATE</a>

#Class-ProfileManager
This class handles all the profile related functions.

**Example Usage:**
:::java
@Override
public void onOpened(EMDKManager emdkmanager)
{
ProfileManager profileManager = (ProfileManager)emdkmanager.getInstance(FEATURE_TYPE.PROFILE);
}

**Version:**

2.0

##Public Methods

###**processProfile**(String profileName, ProfileManager.PROFILE_FLAG profileFlag, Document extraData)
Processes the given profile based on the data provided and the flag and return status of the action.

**Example Usage:**
:::java
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
DocumentBuilder db = dbf.newDocumentBuilder();
Document extraData;
extraData = db.newDocument();
profileManager.processProfile("Profile1", PROFILE_FLAG.GET, extraData);

**Parameters:**

**profileName** - Name of the profile.
**profileFlag** - <a href="#ProfileManagerPROFILEFLAG">ProfileManager.PROFILE_FLAG</a> If the profileFlag is set to SET, and if the given profile is not available in the EMDKConfig.xml, it will look for valid profile in extraData argument and if present, the profile will be added to the internal XML volatile repository and also applied to the device. If the profile is present in the EMDKConfig.xml, it will be applied to the device. If profileFlag is set to GET and if the profile is present in the internal repository, it will be returned in extraData.
**extraData** - This can be used to provide data for processing action.

**Returns:**

com.symbol.emdk.EMDKResults - <a href="#EMDKResults">EMDKResults</a> object.

###**processProfile**(String profileName, ProfileManager.PROFILE_FLAG profileFlag, java.lang.String[] extraData)
Processes the given profile based on the data provided and the flag and return status of the action.

**Example Usage:**
:::java
profileManager.processProfile("Profile1", PROFILE_FLAG.GET, new String[]{""});

**Parameters:**

**profileName** - Name of the profile.
**profileFlag** - <a href="#ProfileManagerPROFILEFLAG">ProfileManager.PROFILE_FLAG</a> If the profileFlag is set to SET, and if the given profile is not available in the EMDKConfig.xml, it will look for valid profile in extraData argument and if present, the profile will be added to the internal XML volatile repository and also applied to the device. If the profile is present in the EMDKConfig.xml, it will be applied to the device. If profileFlag is set to GET and if the profile is present in the internal repository, it will be returned in extraData.
**extraData** - This can be used to provide data for processing action.

**Returns:**

com.symbol.emdk.EMDKResults - <a href="#EMDKResults">EMDKResults</a> object.

###**processProfile**(String profileName, ProfileManager.PROFILE_FLAG profileFlag, ProfileConfig extraData)
Processes the given profile based on the data provided and the flag and return status of the action.

**Example Usage:**
:::java
//Create the ProfileConfig object
ProfileConfig profileConfigObj = new ProfileConfig();
//Get the ProfileConfig from the profile XML
EMDKResults results = mProfileManager.processProfile(profileName, ProfileManager.PROFILE_FLAG.GET, profileConfigObj);
//Set the code128
profileConfigObj.dataCapture.barcode.decoders.code128 = ENABLED_STATE.TRUE;
//call processPrfoile with profile name, SET flag and config data to update the profile
EMDKResults results = mProfileManager.processProfile(profileName, ProfileManager.PROFILE_FLAG.SET, profileConfigObj);

**Parameters:**

**profileName** - Name of the profile.
**profileFlag** - <a href="#ProfileManagerPROFILEFLAG">ProfileManager.PROFILE_FLAG</a> If the profileFlag is set to SET, and if the given profile is not available in the EMDKConfig.xml, it will look for valid profile in extraData argument and if present, the profile will be added to the internal XML volatile repository and also applied to the device. If the profile is present in the EMDKConfig.xml, it will be applied to the device. If profileFlag is set to GET and if the profile is present in the internal repository, it will be returned in extraData.
**extraData** - <a href="#ProfileConfig">ProfileConfig</a> This can be used to provide data for processing action.

**Returns:**

com.symbol.emdk.EMDKResults - <a href="#EMDKResults">EMDKResults</a> object.

##Public Enums

###**ProfileManager.PROFILE_FLAG**
All the possible actions for <a href="#processProfileStringProfileManagerPROFILEFLAGDocument">ProfileManager.processProfile(String, PROFILE_FLAG, Document)</a> and <a href="#processProfileStringProfileManagerPROFILEFLAGString">ProfileManager.processProfile(String, PROFILE_FLAG, String[])</a>}is enumerated here.

**Example Usage:**
:::java
PROFILE_FLAG.SET

**Values:**

**SET** - Creates a profile with given XML data. If the profile is already created, this activates the profile if it is not bound to any activity.
**GET** - Retrieves a profile from internal repository.

##Class-VersionManager
Version information can be captured from this class.

**Example Usage:**
:::java
@Override
public void onOpened(EMDKManager emdkmanager)
{
VersionManager versionManager = (VersionManager)emdkmanager.getInstance(FEATURE_TYPE.VERSION);
}

**Version:**

2.0

##Public Methods

###**getVersion**(VersionManager.VERSION_TYPE versionKey)

Gets the version of the specified <a href="#VersionManagerVERSIONTYPE">VersionManager.VERSION_TYPE</a>

**Example Usage:**
:::java
versionManager.getVersion(VERSION_TYPE.EMDK)

**Parameters:**

**versionKey** - <a href="#VersionManagerVERSIONTYPE">VersionManager.VERSION_TYPE</a>

**Returns:**

java.lang.String - Version number

##Public Enums

###**VersionManager.VERSION_TYPE**
All the version keys for <a href="#getVersionVersionManagerVERSIONTYPE">VersionManager.getVersion(VERSION_TYPE)</a> are enumerated here.

**Example Usage:**
:::java
VERSION_TYPE.EMDK

**Values:**

**EMDK** - EMDK version
